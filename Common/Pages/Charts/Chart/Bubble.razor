@page "/chart/bubble"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using PointRender

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Bubble Chart Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Blazor Bubble Chart component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/bubble-chart'>Blazor Bubble Chart</a> example visualizes the literacy rates and GDP growth rates of countries. A tooltip shows more information about the countries.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the bubble chart. The bubble chart is a type of chart that shows three dimensions of the data. Each point is drawn as a bubble, where the bubble's size depends on the  <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartSeries.html#Syncfusion_Blazor_Charts_ChartSeries_Size'>Size</a> property. You can also use the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartSeries.html#Syncfusion_Blazor_Charts_ChartSeries_Fill'>Fill</a> property to customize the data appearance.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices. 
    More information about the bubble series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/bubble'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="World Countries Details" Width="@Width" Theme="@Theme">
        <ChartPrimaryXAxis CrossesAt="5" Minimum="65" Maximum="102" Interval="5">
            <ChartAxisTitleStyle></ChartAxisTitleStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis CrossesAt="85" Minimum="0" Maximum="10" Interval="2.5">
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Header="<b>${point.tooltip}</b>" EnableMarker="false" Enable="true" Format="Literacy Rate : <b>${point.x}%</b> <br/>GDP Annual Growth Rate : <b>${point.y}</b><br/>Population : <b>${point.size} Billion</b>"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries TooltipMappingName="Text" DataSource="@ChartPoints" Name="Pound" XName="Literacy" MinRadius="3" MaxRadius="8"
                         Size="BubbleSize" YName="GDPGrowth" Type="ChartSeriesType.Bubble">
                <ChartMarker>
                    <ChartDataLabel Visible="true" Name="TooltipMappingName" Position=LabelPosition.Middle>
                        <ChartDataLabelFont FontWeight="500"></ChartDataLabelFont>
                    </ChartDataLabel>
                </ChartMarker>
                <ChartSeriesBorder Width="2"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartEvents OnDataLabelRender="DatalabelRender" OnPointRender="PointRender"></ChartEvents>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<BubbleChartData> ChartPoints { get; set; } = new List<BubbleChartData>
    {
        new BubbleChartData { Literacy = 92.2, GDPGrowth = 7.8, BubbleSize = 1.347, TooltipMappingName = "China", Text = "China" },
        new BubbleChartData { Literacy = 74, GDPGrowth = 6.5, BubbleSize = 1.241, TooltipMappingName = "India", Text = "India" },
        new BubbleChartData { Literacy = 90.4, GDPGrowth = 6.0, BubbleSize = 0.238, TooltipMappingName = "Indonesia", Text = "Indonesia" },
        new BubbleChartData { Literacy = 99.4, GDPGrowth = 2.2, BubbleSize = 0.312, TooltipMappingName = "US", Text = "United States" },
        new BubbleChartData { Literacy = 88.6, GDPGrowth = 1.3, BubbleSize = 0.197, TooltipMappingName = "Brazil", Text = "Brazil" },
        new BubbleChartData { Literacy = 99, GDPGrowth = 0.7, BubbleSize = 0.0818, TooltipMappingName = "Germany", Text = "Germany" },
        new BubbleChartData { Literacy = 72, GDPGrowth = 2.0, BubbleSize = 0.0826, TooltipMappingName = "Egypt", Text = "Egypt" },
        new BubbleChartData { Literacy = 99.6, GDPGrowth = 3.4, BubbleSize = 0.143, TooltipMappingName = "Russia", Text = "Russia" },
        new BubbleChartData { Literacy = 96.5, GDPGrowth = 0.2, BubbleSize = 0.128, TooltipMappingName = "Japan", Text = "Japan" },
        new BubbleChartData { Literacy = 86.1, GDPGrowth = 4.0, BubbleSize = 0.115, TooltipMappingName = "MLI", Text = "MeLiteracy Ion" },
        new BubbleChartData { Literacy = 92.6, GDPGrowth = 5.2, BubbleSize = 0.096, TooltipMappingName = "PH", Text = "Philipines" },
        new BubbleChartData { Literacy = 61.3, GDPGrowth = 1.45, BubbleSize = 0.162, TooltipMappingName = "Nigeria", Text = "Nigeria" },
        new BubbleChartData { Literacy = 82.2, GDPGrowth = 3.97, BubbleSize = 0.7, TooltipMappingName = "Hong Kong", Text = "Hong Kong" },
        new BubbleChartData { Literacy = 79.2, GDPGrowth = 4.9, BubbleSize = 0.162, TooltipMappingName = "NL", Text = "NetherLand" },
        new BubbleChartData { Literacy = 72.5, GDPGrowth = 4.5, BubbleSize = 0.7, TooltipMappingName = "Jordan", Text = "Jordan" },
        new BubbleChartData { Literacy = 81, GDPGrowth = 2.5, BubbleSize = 0.21, TooltipMappingName = "Australia", Text = "Australia" },
        new BubbleChartData { Literacy = 66.8, GDPGrowth = 3.9, BubbleSize = 0.028, TooltipMappingName = "MN", Text = "Mongolia" },
        new BubbleChartData { Literacy = 78.4, GDPGrowth = 2.9, BubbleSize = 0.231, TooltipMappingName = "Taiwan", Text = "Taiwan" }
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        this.SetTheme(null);
        if (SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public void DatalabelRender(TextRenderEventArgs args)
    {
        if(SampleService.IsDevice)
        {
            args.Text = args.Text.Replace("Indonesia", "ID");
            args.Text = args.Text.Replace("Brazil", "BR");
            args.Text = args.Text.Replace("Germany", "DE");
            args.Text = args.Text.Replace("Egypt", "EG");
            args.Text = args.Text.Replace("Japan", "JP");
            args.Text = args.Text.Replace("Hong Kong", "HK");
            args.Text = args.Text.Replace("Australia", "AUS");
            args.Text = args.Text.Replace("Taiwan", "TW");
        }
       
    }
    public void PointRender(PointRenderEventArgs args)
    {
        this.SetTheme(args);
    }

    private void SetTheme(PointRenderEventArgs args)
    {
        if (NavigationManager.Uri.IndexOf("material") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.MaterialDark;
                else
                {
                    args.Fill = BubblePointColor.MaterialDarkColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.MaterialDarkColors[args.Point.Index % 10];
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Material;
                else
                {
                    args.Fill = BubblePointColor.MaterialColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.MaterialColors[args.Point.Index % 10];
                }                
            }
        }
        else if (NavigationManager.Uri.IndexOf("fabric") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FabricDark;
                else
                {
                    args.Fill = BubblePointColor.FabricColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.FabricColors[args.Point.Index % 10];
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fabric;
                else
                {
                    args.Fill = BubblePointColor.FabricColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.FabricColors[args.Point.Index % 10];
                }                
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.Bootstrap5Dark;
                else
                {
                    args.Fill = BubblePointColor.Bootstrap5DarkColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.Bootstrap5DarkColors[args.Point.Index % 10];
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap5;
                else
                {
                    args.Fill = BubblePointColor.Bootstrap5Colors[args.Point.Index % 10];
                    args.Border.Color = PointColor.Bootstrap5Colors[args.Point.Index % 10];
                }                
            }
        }
        else if (NavigationManager.Uri.IndexOf("fluent") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.FluentDark;
                else
                {
                    args.Fill = BubblePointColor.FluentDarkColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.FluentDarkColors[args.Point.Index % 10];
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Fluent;
                else
                {
                    args.Fill = BubblePointColor.FluentColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.FluentColors[args.Point.Index % 10];
                }                
            }
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
            {
                args.Fill = BubblePointColor.BootstrapColors[args.Point.Index % 10];
                args.Border.Color = PointColor.BootstrapColors[args.Point.Index % 10];
            }            
        }
        else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.BootstrapDark;
                else
                {
                    args.Fill = BubblePointColor.BootstrapColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.BootstrapColors[args.Point.Index % 10];
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Bootstrap;
                else
                {
                    args.Fill = BubblePointColor.BootstrapColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.BootstrapColors[args.Point.Index % 10];
                }                
            }
        }
        else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
        {
            if (NavigationManager.Uri.IndexOf("dark") > -1)
            {
                if (args == null)
                    Theme = Theme.TailwindDark;
                else
                {
                    args.Fill = BubblePointColor.TailwindDarkColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.TailwindDarkColors[args.Point.Index % 10]; 
                }                
            }
            else
            {
                if (args == null)
                    Theme = Theme.Tailwind;
                else
                {                    
                    args.Fill = BubblePointColor.TailwindColors[args.Point.Index % 10];
                    args.Border.Color = PointColor.TailwindColors[args.Point.Index % 10];
                }
            }
        }
        else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
        {
            if (args == null)
                Theme = Theme.HighContrast;
            else
            {
                args.Fill = BubblePointColor.HighContrastColors[args.Point.Index % 10];
                args.Border.Color = PointColor.HighContrastColors[args.Point.Index % 10];
            }            
        }
        else
        {
            if (args == null)
                Theme = Theme.Bootstrap4;
            else
            {
                args.Fill = BubblePointColor.BootstrapColors[args.Point.Index % 10];
                args.Border.Color = PointColor.BootstrapColors[args.Point.Index % 10];
            }            
        }
    }

    public class BubbleChartData
    {
        public double Literacy { get; set; }
        public double GDPGrowth { get; set; }
        public double BubbleSize { get; set; }
        public string TooltipMappingName { get; set; }
        public string Text { get; set; }
    }
}
