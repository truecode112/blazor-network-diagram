@page "/chart/stacked-area"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Stacked Area Chart Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="Blazor Stacked Area Chart example shows the relation between individual values and the total sum of the points." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/stacked-area-chart'>Blazor Stacked Area</a> example visualizes the amount of sales by payment mode with default stacked area series. A legend in the sample shows information about the series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the stacked area chart. This chart visualizes data with y-values stacked one over another in a series order. It shows the relationship between individual values to the total sum of points.</p>
    <p>More information about the stacked area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stacked-area'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Amount of Sales by Payment Mode" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="yyyy" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Amount of sales in €" Minimum="0" Maximum="7" Interval="1" LabelFormat="{value}k">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" Name="Bank Transfer" XName="Period" Width="2"
                         Opacity="1" YName="OrganicSales" Type="ChartSeriesType.StackingArea">
                <ChartMarker IsFilled="true" Visible="true" Height="9" Width="9" Shape="ChartShape.Circle">
                    <ChartMarkerBorder Width="0.5" Color="#666666"></ChartMarkerBorder>
                </ChartMarker>
                <ChartSeriesBorder Width="1" Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Credit Card" XName="Period" Width="2"
                         Opacity="1" YName="FairTradeSales" Type="ChartSeriesType.StackingArea">
                <ChartMarker IsFilled="true" Visible="true" Height="9" Width="9" Shape="ChartShape.Triangle">
                    <ChartMarkerBorder Width="0.5" Color="#666666"></ChartMarkerBorder>
                </ChartMarker>
                <ChartSeriesBorder Width="1"  Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Debit Card" XName="Period" Width="2"
                         Opacity="1" YName="VegAlternativesSales" Type="ChartSeriesType.StackingArea">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Rectangle">
                    <ChartMarkerBorder Width="0.5" Color="#666666"></ChartMarkerBorder>
                </ChartMarker>
                <ChartSeriesBorder Width="1"  Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Cash" XName="Period" Width="2"
                         Opacity="1" YName="OtherSales" Type="ChartSeriesType.StackingArea">
                <ChartMarker IsFilled="true" Visible="true" Height="9" Width="9" Shape="ChartShape.Diamond">
                    <ChartMarkerBorder Width="0.5" Color="#666666"></ChartMarkerBorder>
                </ChartMarker>
                <ChartSeriesBorder Width="1" Color="#666666"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StackedAreaChartData> ChartPoints { get; set; } = new List<StackedAreaChartData>
    {
        new StackedAreaChartData { Period = new DateTime(2000, 01, 01), OrganicSales = 0.61, FairTradeSales = 0.03, VegAlternativesSales = 0.48, OtherSales = 0.23 },
        new StackedAreaChartData { Period = new DateTime(2002, 01, 01), OrganicSales = 0.91, FairTradeSales = 0.06, VegAlternativesSales = 0.57, OtherSales = 0.17 },
        new StackedAreaChartData { Period = new DateTime(2004, 01, 01), OrganicSales = 1.19, FairTradeSales = 0.14, VegAlternativesSales = 0.63, OtherSales = 0.23 },        
        new StackedAreaChartData { Period = new DateTime(2006, 01, 01), OrganicSales = 1.74, FairTradeSales = 0.29, VegAlternativesSales = 0.66, OtherSales = 0.43 },        
        new StackedAreaChartData { Period = new DateTime(2008, 01, 01), OrganicSales = 1.99, FairTradeSales = 0.64, VegAlternativesSales = 0.77, OtherSales = 0.72 },        
        new StackedAreaChartData { Period = new DateTime(2010, 01, 01), OrganicSales = 1.48, FairTradeSales = 1.06, VegAlternativesSales = 0.54, OtherSales = 1.38 },        
        new StackedAreaChartData { Period = new DateTime(2012, 01, 01), OrganicSales = 1.66, FairTradeSales = 1.55, VegAlternativesSales = 0.61, OtherSales = 2.16 },        
        new StackedAreaChartData { Period = new DateTime(2014, 01, 01), OrganicSales = 1.67, FairTradeSales = 1.65, VegAlternativesSales = 0.67, OtherSales = 2.61 }
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public class StackedAreaChartData
    {
        public DateTime Period { get; set; }
        public double OrganicSales { get; set; }
        public double FairTradeSales { get; set; }
        public double VegAlternativesSales { get; set; }
        public double OtherSales { get; set; }
    }

}