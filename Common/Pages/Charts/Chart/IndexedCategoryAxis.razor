@page "/chart/indexed-category-axis"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts Indexed Category Axis Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Indexed Category Axis in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows an indexed category axis in a chart with details about GDP growth across different countries.</p>
</SampleDescription>
<ActionDescription>
    <p>The category axis is also rendered on the basis of the index values in the data source. To render the indexed category axis, set <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_ValueType'>ValueType</a> to <b>Category</b> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_IsInversed'>IsIndexed</a> property to <b>true</b>.</p>
    <p>More information about the indexed category axis can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/category-axis/#indexed-category-axis'>documentation section</a>.</p>
</ActionDescription>

<div class="col-lg-10 control-section sb-property-border">
    <SfChart Title="GDP by Countries" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" EdgeLabelPlacement="EdgeLabelPlacement.Shift" LabelIntersectAction="@Label" LabelRotation="@LabelRotate" Interval="1" IsIndexed="@Indexed">
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}%">
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@GDP_2015" Name="2015" XName="Country" Width="2" Opacity="1" YName="GDPGrowthRate" Type="@Series1">
                <ChartMarker Visible="@Marker1" Height="10" Width="10">
                    <ChartDataLabel Visible="true" EnableRotation="@Rotation" Angle="@RotateAngle" Position="Syncfusion.Blazor.Charts.LabelPosition.Top" Name="TextMapping">
                    </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@GDP_2016" Name="2016" XName="Country" Width="2" Opacity="1" YName="GDPGrowthRate" Type="@Series2">
                <ChartMarker Visible="@Marker2" Height="10" Width="10">
                     <ChartDataLabel Visible="true" EnableRotation="@Rotation" Angle="@RotateAngle" Position="Syncfusion.Blazor.Charts.LabelPosition.Top" Name="TextMapping">
                     </ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true"></ChartLegendSettings>
    </SfChart>
</div>

<div class="col-lg-2 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>Indexed: </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <SfCheckBox Checked="@Indexed" ValueChange="@CheckValue" TChecked="bool"></SfCheckBox>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    bool Rotation { get; set; } = false;
    public double RotateAngle {get; set;} = 0;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Rotate45;
    public List<CategoryData> GDP_2015 { get; set; } = new List<CategoryData>
    {
        new CategoryData { Country = "India", GDPGrowthRate = 7.9 },
        new CategoryData { Country = "Myanmar", GDPGrowthRate = 7.3 },
        new CategoryData { Country = "Bangladesh", GDPGrowthRate = 6.0 },
        new CategoryData { Country = "Cambodia", GDPGrowthRate = 7.0 },
        new CategoryData { Country = "China", GDPGrowthRate = 6.9 },
    };
    public List<CategoryData> GDP_2016 { get; set; } = new List<CategoryData>
    {
        new CategoryData { Country = "Australia", GDPGrowthRate = 2.5 },
        new CategoryData { Country = "Poland", GDPGrowthRate = 2.7 },
        new CategoryData { Country = "Singapore", GDPGrowthRate = 2.0 },
        new CategoryData { Country = "Canada", GDPGrowthRate = 1.4 },
        new CategoryData { Country = "Germany", GDPGrowthRate = 1.8 },
    };
    private bool Indexed = true, Marker1 = false, Marker2 = false;
    private ChartSeriesType Series1 = ChartSeriesType.Column, Series2 = ChartSeriesType.Column;
    private double LabelRotate;
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if(SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            LabelRotate = -45;
            Rotation = true;
            RotateAngle = -90;
        }
    }

    private void CheckValue(ChangeEventArgs<bool> args)
    {
        Indexed = args.Checked;
        if (Indexed)
        {
            Series1 = Series2 = ChartSeriesType.Column;
            Marker1 = Marker2 = false;
            LabelRotate = -45;
        }
        else
        {
            Series1 = Series2 = ChartSeriesType.Line;
            Marker1 = Marker2 = true;
            LabelRotate = 90;
        }
    }

    public class CategoryData
    {
        public string Country { get; set; }
        public double GDPGrowthRate { get; set; }
    }
}
