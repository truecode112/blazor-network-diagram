@page "/chart/candle-stick"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts Candle Stick Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Candle Stick in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes the AAPL stock price with a default candlestick series. The tooltip and crosshair show information about the stock price.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the candlestick series. This chart shows financial data and trends at equal intervals. It can often be combined with line and column charts to show the closing value of the stock and volume of the data.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    More information about the candle series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/candle'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="AAPL Historical" Width="@Width" Theme="@Theme">
        <ChartEvents OnAxisLabelRender="AxisLabelEvent"></ChartEvents>
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime">
            <ChartAxisCrosshairTooltip Enable="true"></ChartAxisCrosshairTooltip>
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Volume" OpposedPosition="true" LabelFormat="{value}M">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartAxes>
            <ChartAxis Name="secondary" OpposedPosition="true" RowIndex="1" LabelFormat="n0" Title="Price" RangePadding="ChartRangePadding.None" PlotOffset="20" Maximum="150">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            </ChartAxis>
        </ChartAxes>
        <ChartRows>
            <ChartRow Height="30%"></ChartRow>
            <ChartRow Height="70%"></ChartRow>
        </ChartRows>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Shared="true" Header="" Format="<b>Apple Inc.(AAPL)</b> <br> High : <b>${point.high}</b> <br> Low : <b>${point.low}</b> <br> Open : <b>${point.open}</b> <br> Close : <b>${point.close}</b> <br> Volume : <b>${point.volume}</b>"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries Type="ChartSeriesType.Column" EnableTooltip="false" DataSource="@ChartPoints" Name="Volume" XName="Period" YName="Volume">
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" YAxisName="secondary" Name="Apple Inc.(AAPL)" XName="Period" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume"
                         BearFillColor="#2ecd71" BullFillColor="#e74c3d" Type="ChartSeriesType.Candle">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    private CandleData[] ChartPoints { get; set; } = new CandleData[] { };

    protected override async Task OnInitializedAsync()
    {
        ChartPoints = await Http.GetFromJsonAsync<CandleData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/chart/financial-data.json");
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Width = "100%";
        }
    }

    public void AxisLabelEvent(AxisLabelRenderEventArgs args)
    {
        if(args.Text.Contains("M"))
        {
            args.Text = args.Text.Replace("0000000M", "M", StringComparison.InvariantCulture);
        }
    }

    public class CandleData
    {
        public DateTime Period { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double Open { get; set; }
        public double Close { get; set; }
        public double Volume { get; set; }
    }

}


