@page "/chart/percent-stacked-line"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor 100% Stacked Line Chart Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="Blazor 100% Stacked Line Chart example shows how to render and configure the 100% stacked line type chart." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/100-stacked-line-chart'>Blazor 100% Stacked Line Chart</a> example visualizes the family expenses with 100% stacked line series to identify who spent more money in each category. Data points are enhanced with markers and tooltips.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the 100% stacked line chart. This chart displays multiple series of data as stacked lines, ensuring that the cumulative proportion of each stacked element always totals 100%. <code>Markers</code>  are used to represent individual data and its values.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the 100% stacked line series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stack-line'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Family Expense for Year" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="@Label" LabelRotation="@Rotation">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Interval="20">
            <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y} (${point.percentage}%)</b>"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" Name="John" XName="ExpensesCategory" Width="2"
                         Opacity="1" YName="JohnExpenses" Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Circle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Peter" XName="ExpensesCategory" Width="2"
                         Opacity="1" YName="PeterExpenses" Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="7" Width="7" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Steve" XName="ExpensesCategory" Width="2"
                         Opacity="1" YName="SteveExpenses" Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="5" Width="5" Shape="ChartShape.Rectangle">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartPoints" Name="Charle" XName="ExpensesCategory" Width="2"
                         Opacity="1" YName="CharleExpenses" Type="ChartSeriesType.StackingLine100">
                <ChartMarker IsFilled="true" Visible="true" Height="6" Width="6" Shape="ChartShape.Triangle">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public double Rotation { get; set; } = 0;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;
    public List<StackedChartData> ChartPoints { get; set; } = new List<StackedChartData>
    {
        new StackedChartData { ExpensesCategory = "Jan" , JohnExpenses = 90, PeterExpenses = 40 , SteveExpenses = 70, CharleExpenses = 120},
        new StackedChartData { ExpensesCategory = "Feb", JohnExpenses = 80, PeterExpenses = 90, SteveExpenses = 110, CharleExpenses = 70 },
        new StackedChartData { ExpensesCategory = "Mar",JohnExpenses = 50, PeterExpenses = 80, SteveExpenses = 120, CharleExpenses = 50 },
        new StackedChartData { ExpensesCategory = "Apr",JohnExpenses= 70, PeterExpenses = 30, SteveExpenses = 60, CharleExpenses = 180 },
        new StackedChartData { ExpensesCategory = "May", JohnExpenses = 30, PeterExpenses = 80, SteveExpenses = 80, CharleExpenses = 30 },
        new StackedChartData { ExpensesCategory = "Jun", JohnExpenses = 10, PeterExpenses = 110, SteveExpenses = 100, CharleExpenses = 270},
        new StackedChartData { ExpensesCategory = "Jul",JohnExpenses = 100, PeterExpenses = 30, SteveExpenses = 70, CharleExpenses = 40 },
        new StackedChartData { ExpensesCategory = "Aug", JohnExpenses = 55, PeterExpenses = 95, SteveExpenses = 55, CharleExpenses = 75},
        new StackedChartData { ExpensesCategory = "Sep", JohnExpenses = 20, PeterExpenses = 50, SteveExpenses = 40, CharleExpenses = 65 },
        new StackedChartData { ExpensesCategory = "Oct", JohnExpenses = 40, PeterExpenses = 20, SteveExpenses = 80, CharleExpenses = 95 },
        new StackedChartData { ExpensesCategory = "Nov", JohnExpenses = 45, PeterExpenses = 15, SteveExpenses = 45, CharleExpenses = 195 },
        new StackedChartData { ExpensesCategory = "Dec", JohnExpenses = 75, PeterExpenses = 45, SteveExpenses = 65, CharleExpenses = 115 }
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            Width = "100%";
            Rotation = -45;
        }
    }

    public class StackedChartData
    {
        public string ExpensesCategory { get; set; }
        public double JohnExpenses { get; set; }
        public double PeterExpenses { get; set; }
        public double SteveExpenses { get; set; }
        public double CharleExpenses { get; set; }
    }
}
