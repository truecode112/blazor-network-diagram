@page "/chart/percent-stacked-column"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor 100% Stacked Column Chart Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="Blazor 100% Stacked Column Chart example shows how to render and configure the 100% stacking column type chart." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/100-stacked-column-chart'>Blazor 100% Stacked Column Chart</a> example visualizes motor vehicle production by manufacturer with a default stacked column series. The legend in the sample shows the information about those series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the 100% stacked column chart. The 100% stacked column chart displays multiple series of data as stacked columns, ensuring that the cumulative proportion of each stacked element always totals 100%.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover over a point or tap on a point in touch-enabled devices.</p>
    <p>More information about the 100% stacked column series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/stack-column'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Motor Vehicle Production by Manufacturer" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" LabelIntersectAction="LabelIntersectAction.Rotate45">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis RangePadding="ChartRangePadding.None" Interval="20">
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartPoints" XName="Year" YName="General" Width="2" Name="General Motors" Type="ChartSeriesType.StackingColumn100">
                 <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartPoints" XName="Year" YName="Honda" Width="2" Name="Honda" Type="ChartSeriesType.StackingColumn100">
                 <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartPoints" XName="Year" YName="Suzuki" Width="2" Name="Suzuki" Type="ChartSeriesType.StackingColumn100">
                 <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartPoints" XName="Year" YName="BMW" Width="2" Name="BMW" Type="ChartSeriesType.StackingColumn100">
                 <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartLegendSettings Visible="true"></ChartLegendSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartTooltipSettings Enable="true" Format="${point.x} : <b>${point.y} (${point.percentage}%)</b>"></ChartTooltipSettings>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StackedColumn100ChartData> ChartPoints { get; set; } = new List<StackedColumn100ChartData>
    {
        new StackedColumn100ChartData { Year = "2013", General = 9628912, Honda = 4298390, Suzuki = 2842133, BMW = 2006366 },
        new StackedColumn100ChartData { Year = "2014", General = 9609326, Honda = 4513769, Suzuki = 3016710, BMW = 2165566 },
        new StackedColumn100ChartData { Year = "2015", General = 7485587, Honda = 4543838, Suzuki = 3034081, BMW = 2279503 },
        new StackedColumn100ChartData { Year = "2016", General = 7793066, Honda = 4999266, Suzuki = 2945295, BMW = 2359756 },
        new StackedColumn100ChartData { Year = "2017", General = 6856880, Honda = 5235842, Suzuki = 3302336, BMW = 2505741 },

    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
                Width = "100%";
        }
    }

    public class StackedColumn100ChartData
    {
        public string Year { get; set; }
        public double General { get; set; }
        public double Honda { get; set; }
        public double Suzuki { get; set; }
        public double BMW { get; set; }
    }
}
