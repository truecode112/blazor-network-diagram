@page "/chart/area-zone"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts Area Zone Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Area Zone in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes the data on US season retail sales growth using a multi-colored area series in the chart. Data points are enhanced with segments and tooltips.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure points in a particular range by using <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/area#multicolored-area'>MultiColoredArea</a> series. Points within the range can be configured with the  <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartSegment.html#Syncfusion_Blazor_Charts_ChartSegment_Color'>Color</a> property in <code>ChartSegment</code>.</p>
    <p><a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/tool-tip'>Tooltip</a> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the multi-colored area series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/area#multicolored-area'>documentation section</a>.</p>
</ActionDescription>

<style>
    #control-container {
        padding: 0px !important;
    }

    #control-container {
        padding: 0px !important;
    }

    #winter stop {
        stop-color: #4ca1af;
    }

    #winter stop[offset="0"] {
        stop-color: #c4e0e5;
    }

    #winter stop[offset="1"] {
        stop-color: #4ca1af;
    }

    #summer stop {
        stop-color: #ffa751;
    }

    #summer stop[offset="0"] {
        stop-color: #ffe259;
    }

    #summer stop[offset="1"] {
        stop-color: #ffa751;
    }

    #spring stop {
        stop-color: #1d976c;
    }

    #spring stop[offset="0"] {
        stop-color: #93f9b9;
    }

    #spring stop[offset="1"] {
        stop-color: #1d976c;
    }
    .winter {
        width: 10px;
        height: 10px;
        color: #4ca1af;
        font-weight: bold;
    }
    .summer {
        width: 10px;
        height: 10px;
        color: #ffa751;
        font-weight: bold;
    }
    .spring {
        width: 10px;
        height: 10px;
        color: #93f9b9;
        font-weight: bold;
    }
    .chartPadding {
        padding-left: 12px;
        font-size: 14px;
    }
</style>

<svg style="height: 0">
    <defs>
        <linearGradient id="winter" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="summer" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
        <linearGradient id="spring" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0"></stop>
            <stop offset="1"></stop>
        </linearGradient>
    </defs>
</svg>

<div class="control-section" align='center'>
    <SfChart Title="US Season Retail Sales Growth" Width="@Width" Theme="@Theme">
        <ChartArea>
            <ChartAreaBorder Width="0"></ChartAreaBorder>
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MMM" Interval="1" LabelIntersectAction="@Label" LabelRotation="@Rotation" IntervalType="IntervalType.Months" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="${value}K" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="200" Interval="50">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
        <ChartTooltipSettings Header="<b>Revenue</b>" EnableMarker="false" Enable="true" Format="${point.x} : <b>${point.y}</b>" Shared="true"></ChartTooltipSettings>
        <ChartAnnotations>
            <ChartAnnotation CoordinateUnits="Units.Point" X="new DateTime(2016, 3, 1)" Y="115">
                <ContentTemplate>
                    <div style="width:80px; padding: 5px;">
                        <table style="width: 100%">
                            <tr>
                                <td class="chartPadding winter">
                                    Winter
                                </td>
                            </tr>
                        </table>
                    </div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation  CoordinateUnits="Units.Point" X="new DateTime(2016, 6, 1)" Y="115">
                <ContentTemplate>
                    <div style="width:80px; padding: 5px;">
                        <table style="width: 100%">
                            <tr>                               
                                <td class="chartPadding summer">
                                    Summer
                                </td>
                            </tr>
                        </table>
                    </div>
                </ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation CoordinateUnits="Units.Point" X="new DateTime(2016, 11, 1)" Y="165">
                <ContentTemplate>
                    <div style="width:80px; padding: 5px;">
                        <table style="width: 100%">
                            <tr>
                                <td class="chartPadding spring">
                                    Spring
                                </td>
                            </tr>
                        </table>
                    </div>
                </ContentTemplate>
            </ChartAnnotation>
        </ChartAnnotations>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" SegmentAxis="Segment.X" XName="Month" YName="US_OrganicRevenue" Type="ChartSeriesType.MultiColoredArea">
                <ChartSegments>
                    <ChartSegment Value="new DateTime(2016, 4, 1)" Color="url(#winter)"></ChartSegment>
                    <ChartSegment Value="new DateTime(2016, 8, 1)" Color="url(#summer)"></ChartSegment>
                    <ChartSegment Color="url(#spring)"></ChartSegment>
                </ChartSegments>                
                <ChartSeriesBorder Width="1"></ChartSeriesBorder>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Random randomNum = new Random();
    public string Width { get; set; } = "90%";
    public double Rotation { get; set; } = 0;
    private double[] revenueAmount = { 150, 71.5, 106.4, 100.25, 70.0, 106.0, 85.6, 78.5, 76.4, 86.1, 155.6, 160.4 };
    private Theme Theme { get; set; }
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Rotate45;
    public List<AreaChartData> ChartPoints { get; set; }

    public List<AnnotationData> AreaAnnotations = new List<AnnotationData> {
        new AnnotationData() { Visible = true, X = "120", Y = "135" },
        new AnnotationData() { Visible = true, X = "350", Y = "150" },
        new AnnotationData() { Visible = true, X = "700", Y = "120" }
    };

    public class AnnotationData
    {
        public string X { get; set; }
        public string Y { get; set; }
        public bool Visible { get; set; }
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        ChartPoints = this.GetData();
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            Width = "100%";
            Rotation = -45;
        }
    }

    private List<AreaChartData> GetData()
    {
        List<AreaChartData> chartData = new List<AreaChartData>();
        for (int i = 0; i < revenueAmount.Length; i++)
        {
            chartData.Add(new AreaChartData
            {
                Month = new DateTime(2016, 1, 1).AddMonths(i),
                US_OrganicRevenue = revenueAmount[i]
            });
        }
        return chartData;
    }

    public class AreaChartData
    {
        public DateTime Month { get; set; }
        public double US_OrganicRevenue { get; set; }
    }

}

