@page "/scheduler/expandoobject"

@using System.Dynamic
@using Syncfusion.Blazor.Schedule
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Scheduler ExpandoObject Binding Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the ExpandoObject Binding in Blazor Scheduler Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the usage of ExpandoObject data binding with CRUD operations in Scheduler component.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        The Scheduler supports dynamic data binding. The <code>DataSource</code> of the <code>ScheduleEventSettings</code> property can be assigned as list of ExpandoObject.
    </p>
    <p>
        In this demo, we have bound the dynamic list of objects as DataSource to Scheduler using the ExpandoObjects.
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <SfSchedule TValue="ExpandoObject" @bind-SelectedDate="@CurrentDate" Width="100%" Height="550px">
        <ScheduleEventSettings DataSource="@eventsCollection"></ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>
    </SfSchedule>
</div>

@code {
    DateTime CurrentDate { get; set; }
    private List<ExpandoObject> eventsCollection = new List<ExpandoObject>() { };
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        CurrentDate = new DateTime(DateTime.Today.Year, 8, 10);
        DateTime scheduleStart = new DateTime(DateTime.Today.Year, 8, 8, 10, 0, 0);
        eventsCollection = Enumerable.Range(1, 5).Select((x) =>
        {
            scheduleStart = scheduleStart.AddDays(1);
            dynamic d = new ExpandoObject();
            d.Id = 1000 + x;
            d.Subject = (new string[] { "Project Discussion", "Workflow Analysis", "Report", "Meeting", "Project Demo" })[new Random().Next(5)];
            d.StartTime = scheduleStart;
            d.EndTime = scheduleStart.AddHours(1);
            d.IsAllDay = false;
            d.RecurrenceRule = null;
            d.RecurrenceException = null;
            d.RecurrenceID = null;
            return d;
        }).Cast<ExpandoObject>().ToList<ExpandoObject>();
    }
}
