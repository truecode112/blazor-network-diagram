@page "/diagramcomponent/keyboard-interaction"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.Internal
@using System.Collections.ObjectModel
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Keyboard Interaction Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Keyboard Interaction in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
    <p>This sample illustrates interaction with the Diagram component using shortcut keys. The command manager is used to manage keyboard interactions.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to interact with the Diagram component using shortcut keys. The <code><a target='_blank' href=’https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.CommandManager.html’>command manager</a></code> property is used to map the commands with key gestures. In this example, along with the built-in commands, a few custom commands have been added and a few built-in commands (nudge) are overridden. That is, when the arrow keys are pressed, selection will move to the next node instead of movingthe selected objects. Different kinds of interactions and the corresponding key gestures are also listed in the property panel.</p>
</ActionDescription>
@*End:Hidden*@

@*Hidden:Lines*@
<style>
    #diagram {
        display: block;
    }

    .row {
        display: block;
    }

    .container-fluid {
        padding-left: 0px;
    }

    .property-panel-header {
        padding-bottom: 0px;
    }

    .property-panel-content {
        padding-top: 0px !important;
    }

    @@media (max-width: 550px) {
        .property-panel-content {
            padding-top: 0px !important;
        }
    }

    .sb-property-border {
        border-right: 1px solid #D7D7D7;
    }
</style>
@*End:Hidden*@
<div class="col-lg-9 control-section sb-property-border">
    <div id="diagram-space" class="content-wrapper">
        <SfDiagramComponent @ref="@Diagram" Height="645px" NodeCreating="@NodeCreating">
            <CommandManager Commands="commands" Execute="@ExecuteCommand" CanExecute="@CanExecute"/>            
            <DataSourceSettings ID="Id" ParentID="Ancestor" DataSource="@DataSource"/>
            <Layout @bind-Type="@type"/> 
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@gridLineIntervals">
                </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@gridLineIntervals">
                </VerticalGridLines>
            </SnapSettings>
        </SfDiagramComponent>
    </div>
</div>
@*Hidden:Lines*@
<div class="col-lg-3 property-section">
    <div>
        <h4 class="property-panel-header">Built-In Commands</h4>
        <div class="property-panel-content">
            <table id="property1" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width:70%;">
                            <h5>Command</h5>
                        </td>
                        <td style="width:30%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:61%;">Select All </td>
                        <td style="width:39%;">Ctrl + A</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Cut</td>
                        <td style="width:40%;">Ctrl + X</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Copy</td>
                        <td style="width:40%;">Ctrl + C</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Paste</td>
                        <td style="width:40%;">Ctrl + V</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Undo</td>
                        <td style="width:40%;">Ctrl + Z</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Redo</td>
                        <td style="width:40%;">Ctrl + Y</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Delete</td>
                        <td style="width:40%;">Delete</td>
                    </tr>
                     <tr>
                        <td style="width:60%;">Edit Annotation</td>
                        <td style="width:40%;">F2</td>
                    </tr>
                     <tr>
                        <td style="width:60%;">Cancel</td>
                        <td style="width:40%;">Esc</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4 class="property-panel-header">Custom Commands</h4>
        <div class="property-panel-content">
            <table id="property2" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width:70%;">
                            <h5>
                                Command
                            </h5>
                        </td>
                        <td style="width:30%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:60%;">NodeGroup</td>
                        <td style="width:40%;">Ctrl + G</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Ungroup</td>
                        <td style="width:40%;">Ctrl + U</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h4 class="property-panel-header">Modified Commands</h4>
        <div class="property-panel-content">
            <table id="property3" style="font-size: 12px;">
                <tbody>
                    <tr>
                        <td style="width:70%;">
                            <h5>
                                Command
                            </h5>
                        </td>
                        <td style="width:30%;">
                            <h5>Gesture</h5>
                        </td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Parent Node </td>
                        <td style="width:40%;">Up Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Child Node </td>
                        <td style="width:40%;">Down Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Previous Child </td>
                        <td style="width:40%;">Left Arrow</td>
                    </tr>
                    <tr>
                        <td style="width:60%;">Navigate to Next Child </td>
                        <td style="width:40%;">Right Arrow</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
@*End:Hidden*@
@code
{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    SfDiagramComponent Diagram;
    LayoutType type = LayoutType.HierarchicalTree;
    DiagramObjectCollection<KeyboardCommand> commands;
    // Defines interval values for GridLines
    public double[] gridLineIntervals { get; set; }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        gridLineIntervals = new double[] { 1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75 };
        commands = new DiagramObjectCollection<KeyboardCommand>()
        {
            CreateCustomCommand("customGroup",DiagramKeys.G,ModifierKeys.Control),
            CreateCustomCommand("customUngroup",DiagramKeys.U,ModifierKeys.Control),
            CreateCustomCommand("navigateUp",DiagramKeys.ArrowUp,ModifierKeys.None),
            CreateCustomCommand("navigateDown",DiagramKeys.ArrowDown,ModifierKeys.None),
            CreateCustomCommand("navigateLeft",DiagramKeys.ArrowLeft,ModifierKeys.None),
            CreateCustomCommand("navigateRight",DiagramKeys.ArrowRight,ModifierKeys.None),
        };
    }

    // Method to create custom command.
    private KeyboardCommand CreateCustomCommand(string name, DiagramKeys key, ModifierKeys modifierkey)
    {
        KeyboardCommand command = new KeyboardCommand()
        {
            Name = name,
            Gesture = new KeyGesture() { Key = key, Modifiers = modifierkey }
        };
        return command;
    }

    // Method to create common style for node
    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node.Data is System.Text.Json.JsonElement)
        {
            node.Data = System.Text.Json.JsonSerializer.Deserialize<DataModel>(node.Data.ToString());
        }
        if (node.Data != null)
        {
            DataModel organizationData = node.Data as DataModel;
            ShapeAnnotation annotation = new ShapeAnnotation() { Content = organizationData.Id, Offset = new DiagramPoint(0.5, 0.5), Style = new TextStyle() { Color = "white" } };
            node.Width = 70;
            node.Height = 70;
            node.Shape = new BasicShape() { Type = shapes.Basic, Shape = NodeBasicShapes.Ellipse, CornerRadius = 10 };
            node.Style.Fill = organizationData.Fill;
            node.Style.StrokeColor = "white";
            if (node.Annotations.Count == 0)
            {
                node.Annotations = new DiagramObjectCollection<ShapeAnnotation>() { annotation };
            }
        }
    }

    public class DataModel
    {
        public string Id { get; set; }
        public string Fill { get; set; }
        public string Ancestor { get; set; }
    }

    // Method to determine whether this command can execute or not.
    public void CanExecute(CommandKeyArgs args)
    {
        args.CanExecute = true;
    }

    // Method to execute the custom command
    public void ExecuteCommand(CommandKeyArgs obj)
    {
        Diagram.BeginUpdate();
        switch (obj.Name)
        {
            case "customGroup":
                Diagram.Group();
                break;
            case "customUngroup":
                Diagram.Ungroup();
                break;
            case "navigateUp":
                _ = this.NavigateLevels(false);
                break;
            case "navigateDown":
                _ = this.NavigateLevels(true);
                break;
            case "navigateLeft":
                _ = this.NavigateToSiblings(false);
                break;
            case "navigateRight":
                _ = this.NavigateToSiblings(true);
                break;
        }
        _ = Diagram.EndUpdate();
    }

    public List<DataModel> DataSource = new List<DataModel>()
    {
        new DataModel{ Id = "A", Fill = "#1ba1e2" },
        new DataModel{ Id = "B", Ancestor = "A", Fill = "#e41404" },
        new DataModel{ Id = "C", Ancestor = "A", Fill = "#e41404" },
        new DataModel{ Id = "D", Ancestor = "A", Fill = "#e41404" },
        new DataModel{ Id = "E", Ancestor = "B", Fill = "#f09609" },
        new DataModel{ Id = "F", Ancestor = "B", Fill = "#f09609" },
        new DataModel{ Id = "G", Ancestor = "D", Fill = "#f09609" },
        new DataModel{ Id = "H", Ancestor = "D", Fill = "#f09609" },
        new DataModel{ Id = "I", Ancestor = "F", Fill = "#e41404" },
        new DataModel{ Id = "J", Ancestor = "F", Fill = "#e41404" },
        new DataModel{ Id = "K", Ancestor = "H", Fill = "#e41404" },
        new DataModel{ Id = "L", Ancestor = "H", Fill = "#e41404" },
        new DataModel{ Id = "M", Ancestor = "I", Fill = "#2b862b" },
        new DataModel{ Id = "N", Ancestor = "I", Fill = "#2b862b" },
        new DataModel{ Id = "O", Ancestor = "K", Fill = "#2b862b" },
        new DataModel{ Id = "P", Ancestor = "K", Fill = "#2b862b" },
        new DataModel{ Id = "Q", Ancestor = "N", Fill = "#1ba1e2" },
        new DataModel{ Id = "R", Ancestor = "N", Fill = "#1ba1e2" },
        new DataModel{ Id = "S", Ancestor = "P", Fill = "#1ba1e2" },
        new DataModel{ Id = "T", Ancestor = "P", Fill = "#1ba1e2" }
    };

    //This method is used to determine the parent node
    private DiagramObjectCollection<IDiagramObject> GetNode(string name, bool isParent)
    {
        DiagramObjectCollection<IDiagramObject> nodes = new DiagramObjectCollection<IDiagramObject>();
        Node node;
        Connector connector = Diagram.GetObject(name) as Connector;
        if (connector != null)
        {
            string Id = (isParent ? connector.SourceID : connector.TargetID);
            node = Diagram.GetObject(Id) as Node;
            nodes.Add(node);
        }
        return nodes;
    }

    @*Hidden:Lines*@
    #pragma warning disable 1998
    @*End:Hidden*@
    // This method is used to select the node
    private async Task SelectNode(ObservableCollection<IDiagramObject> node)
    {
        if (node != null && node.Count > 0)
        {
            Diagram.ClearSelection();
            Diagram.Select(node, false);
        }
    }
    @*Hidden:Lines*@
    #pragma warning restore 1998
    @*End:Hidden*@

    // This method is used to select the node(up or down) through arrow key
    private async Task NavigateLevels(Boolean isParent)
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0] as Node;
            if (node.ID != "")
            {
                List<string> inEdges = node.InEdges;
                List<string> outEdges = node.OutEdges;
                List<string> edges = isParent ? outEdges : inEdges;
                if (edges.Count > 0)
                {
                    string connectorId = edges[0];
                    DiagramObjectCollection<IDiagramObject> altNode = this.GetNode(connectorId, (isParent ? false : true)) as DiagramObjectCollection<IDiagramObject>;
                    await this.SelectNode(altNode);
                }
            }
        }
    }

    // This method is used to select the sibling node(left or right) through arrow key
    private async Task NavigateToSiblings(bool isRightSibling)
    {
        if (Diagram.SelectionSettings.Nodes.Count > 0)
        {
            Node child = Diagram.SelectionSettings.Nodes[0] as Node;
            if (child != null)
            {
                List<string> inEdges = child.InEdges;
                if (inEdges.Count > 0)
                {
                    string connectorId = inEdges[0];
                    string altConnectorId = "";
                    DiagramObjectCollection<IDiagramObject> parent = this.GetNode(connectorId, true);
                    if (parent != null && parent.Count > 0)
                    {
                        List<string> edges = (parent[0] as Node).OutEdges;
                        for (int i = 0; i < edges.Count; i++)
                        {
                            if (edges[i] == connectorId)
                            {
                                if ((isRightSibling && edges.Count - 1 >= i + 1) || (!isRightSibling && i - 1 >= 0))
                                {
                                    altConnectorId = isRightSibling ? edges[i + 1] : edges[i - 1];
                                }
                            }
                        }
                        DiagramObjectCollection<IDiagramObject> sibling = this.GetNode(altConnectorId, false);
                        await this.SelectNode(sibling);
                    }
                }
            }
        }
    }
}