@page "/datagrid/data-annotation"
@using Syncfusion.Blazor.Grids;
@using System.ComponentModel.DataAnnotations;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor DataGrid Data Annotation Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Data Annotation in Blazor DataGrid Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p> This sample demonstrates the DataGrid component with data annotation feature.</p>
</SampleDescription>

<ActionDescription>
    <p>Blazor DataGrid is a generic component that can be strongly bound to any business object via data annotation. <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-annotation/'> Data annotation</a> is used to change the display format, validate fields by checking end-user input, and display messages to them by defining rules in model classes.</p>
    <p>The user must import the namespace <b>System.ComponentModel.DataAnnotations</b> before using the data annotation. Users can change the Display Format, Header text of the Column, Editable, and set any one of the columns should be defined as a primary key using the <code>GridColumn</code> component's <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Grids.GridColumn.html#Syncfusion_Blazor_Grids_GridColumn_IsPrimaryKey'>IsPrimaryKey</a> property for a specific field using the data annotation attributes.</p>
    <p>
        The DataGrid in this demo had been modified as follows.
        <ul>
            <li>The Grid's columns are generated automatically by a property in the model class.</li>
            <li>The <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayattribute?view=net-5.0'>DisplayAttribute</a> was used to change the column header text.</li>
            <li>The <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayformatattribute?view=net-5.0'>DisplayFormatAttribute</a> was used to change the display format of the Freight column.</li>
            <li>Disabled using the <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.editableattribute?view=net-5.0'>EditableAttribute</a>, you can make changes to the property ShipCity.</li>
            <li>Using the <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.keyattribute?view=net-5.0'>KeyAttribute</a>, the OrderID property's primary key has been set.</li>
            <li>The <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.requiredattribute?view=net-5.0'>RequiredAttribute</a> is used for validation of the property CustomerID.</li>
            <li>Validation <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.rangeattribute?view=net-5.0'>RangeAttribute</a> is applied to the Freight property via the Range attribute.</li>
            <li>The <a target='_blank' href='https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.stringlengthattribute?view=net-5.0'>StringLengthAttribute</a> is used for validation of the property CustomerID.</li>
          </ul>
    </p>
    <p> More information about the Data annotation feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-annotation/'>documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid TValue="OrderDetails" DataSource="@Orders" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" })">

                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>

            </SfGrid>
        </div>
    </div>
</div>

@code
{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    public List<OrderDetails> Orders { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Orders = Enumerable.Range(1, 100).Select(x => new OrderDetails()
        {
            OrderID = 10240 + x,
            CustomerName = new string[] { "VINET", "TOSMP", "HANAR", "VICTE" }[new Random().Next(4)],
            EmployeeID = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }[new Random().Next(10)],
            Freight = new float[] { 32.28f, 22.90f, 30.99f, 50.52f }[new Random().Next(4)],
            ShipCity = new string[] { "Reims", "Munster", "Rio de Janeir", "Lyon" }[new Random().Next(4)],            
        }).ToList();
    }

    public class OrderDetails
    {

        [Key]
        [Display(Name = "Order ID")]
        [Required(ErrorMessage = "Order ID is required")]
        public int? OrderID { get; set; }

        [Display(Name = "Customer ID")]
        [Required(ErrorMessage = "Customer ID is required")]
        [StringLength(8, MinimumLength = 3, ErrorMessage = "Customer ID length should between 3 and 8")]
        public string CustomerName { get; set; }

        [Display(Name = "Employee ID")]
        [Range(1, 10, ErrorMessage = "Employee ID should be between 1 and 10")]
        public int EmployeeID { get; set; }

        [DisplayFormat(DataFormatString = "c2")]
        [Range(1, 1000, ErrorMessage = "Freight should be between 1 and 1000")]
        public float Freight { get; set; }

        [Display(Name = "Ship City")]
        [Editable(false)]
        public string ShipCity { get; set; }     

    }
}