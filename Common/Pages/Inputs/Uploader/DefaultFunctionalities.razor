@page "/File-Upload/Default-Functionalities"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor File Upload Example of default functionalities - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Default Functionalities in Blazor File Upload Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-file-upload/'>Blazor File Upload</a> demonstrates the default functionalities of this component. Browse the files which you want to upload to the server. The selected files will be submitted to server on upload button click. If you click on the clear button, the selected/uploaded files will be cleared from list.</p>
</SampleDescription>
<ActionDescription>
    <p>The File Upload component is useful to upload images, documents, and other files. By default, the component allows to upload multiple files to browse and upload it to server. The selected files append to the file list that contains file details such as name, type, and size.</p>
    <p>You can manage the files in server after received the uploaded files. When the files are successfully uploaded to server, the remove button will be changed to bin button. The uploaded files can be removed by clicking on the bin button.</p>
    <p>The progress bar displays for each file upload to denote its upload progress. Once the file upload gets success, the progress bar will disappear and the corresponding upload status message will be displayed in the same place.</p>
    <p><b>See also</b></p>
    <ul>
        <li><a href='https://blazor.syncfusion.com/documentation/file-upload/getting-started/' target='_blank'>Getting started with Blazor File Upload</a></li>
    </ul>
</ActionDescription>

<div class="col-lg-12">
    <div class="col-lg-8 control-section sb-property-border">
        <div class="control-wrapper">
            <SfUploader @ref="UploadObj" AutoUpload="SetAutoUpload" SequentialUpload="SetSequentialUpload">
                <UploaderEvents OnRemove="OnFileRemove"></UploaderEvents>
                <UploaderAsyncSettings SaveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Save" RemoveUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove"></UploaderAsyncSettings>
            </SfUploader>
        </div>
    </div>
    <div class="col-lg-4">
        <div class='property-panel-section'>
            <div class="property-panel-header">Properties</div>
            <div class="property-panel-content">
                <SfCheckBox Label="Auto upload" ValueChange="OnAutoChange" TChecked="bool"></SfCheckBox>
            </div>
            <div class="property-panel-content">
                <SfCheckBox Label="Sequential upload" ValueChange="OnSequentialChange" TChecked="bool"></SfCheckBox>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section {
        min-height: 370px;
    }
    .control-wrapper {
        max-width: 350px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .property-panel-content {
        padding: 0px 0px 20px 0px;
    }

    .property-panel-content:last-child {
        padding: 0px 0px 40px 0px;
    }
</style>

@code {
    SfUploader UploadObj;
    private bool SetAutoUpload { get; set; } = false;
    private bool SetSequentialUpload { get; set; } = false;
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }
    public void OnAutoChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.UploadObj.ClearAllAsync();
        this.SetAutoUpload = args.Checked;
    }
    public void OnSequentialChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.UploadObj.ClearAllAsync();
        this.SetSequentialUpload = args.Checked;
    }
}