@page "/range-slider/custom-tooltip"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.DropDowns;
@using SFInputs = Syncfusion.Blazor.Inputs
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Range Slider Tooltip Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Tooltip in Blazor Range Slider Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>
        This sample demonstrates the customization of the <a href='https://www.syncfusion.com/blazor-components/blazor-range-slider' target='_blank'>Blazor Range Slider</a> <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Tooltip'>Tooltip</a>. Drag the thumb over the bar to select the values between <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Min'>Min</a> and <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Inputs.SfSlider-1.html#Syncfusion_Blazor_Inputs_SfSlider_1_Max'>Max</a>.
    </p>
</SampleDescription>
<ActionDescription>
    <p>
        In this demo sample, tooltip and its content have been customized with custom color to demonstrate the customization of tooltip using CSS.
    </p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="sliderwrap">
            <label>Custom color and text</label>
            @*Initialize the Slider component*@
            <SfSlider id='default' TValue="int[]" Min="MinValue()" Max="@MaxValue()" Type="SliderType.Range" @bind-Value="SliderValues">
                <SliderEvents TValue="int[]" OnTooltipChange="@TooltipChange" TicksRendering="@TickesRendering"></SliderEvents>
                <SliderTicks Placement="Placement.Before" LargeStep="7200000" SmallStep="3600000"></SliderTicks>
                <SliderTooltip Placement="TooltipPlacement.Before" IsVisible="true" ShowOn="TooltipShowOn.Always"></SliderTooltip>
            </SfSlider>
        </div>
    </div>
</div>

@code{
    // Specify the value for Slider component.
    int[] SliderValues = new int[] { 43200000, 54000000 };
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    // Specifies the event handler for the TicksRendering event in Slider component. It's used to convert the slider values into time format.
    public void TickesRendering(SliderTickEventArgs args)
    {
        double time = args.Value / 3600000;
        if (time > 11)
        {
            args.Text = time + ".00 PM";
        }
        else
        {
            args.Text = time + ".00 AM";
        }
    }
    // Specify the method to return the minimum value of Slider component.
    public double MinValue()
    {
        DateTime dt = new DateTime(2013, 6, 13, 11, 0, 0);
        return dt.TimeOfDay.TotalMilliseconds;
    }
    // Specify the method to return the maximum value of Slider component.
    public double MaxValue()
    {
        DateTime dt = new DateTime(2013, 6, 13, 23, 0, 0);
        return dt.TimeOfDay.TotalMilliseconds;
    }
    // Specifies the event handler for the TooltipChange event in Slider component. It's used to convert the tooltip values into time Format.
    public void TooltipChange(SliderTooltipEventArgs<int[]> args)
    {

        double FirstValue = args.Value[0] / 3600000;
        double SecondValue = args.Value[1] / 3600000;
        if (FirstValue <= 11 && SecondValue < 11)
        {
            args.Text = FirstValue + ".00 AM -" + SecondValue + ".00 AM";
        }
        else if (FirstValue <= 11 && SecondValue > 11)
        {
            args.Text = FirstValue + ".00 AM -" + SecondValue + ".00 PM";
        }
        else if (FirstValue > 11 && SecondValue > 11)
        {
            args.Text = FirstValue + ".00 PM -" + SecondValue + ".00 PM";
        }
    }
}

<style>
    /* Sample specific styles */
    .content-wrapper {
        width: 50%;
        margin: 0 auto;
        min-width: 185px;
    }

    .e-bigger .content-wrapper {
        width: 80%;
    }

    .sliderwrap {
        margin: 40px 0;
    }

    .sliderwrap label {
        padding-bottom: 50px;
        font-size: 13px;
        font-weight: 500;
        margin-top: 15px;
        text-align: center;
        width: 100%;
    }
    /* Customizing the Slider tooltip element  */
    .e-slider-tooltip.e-tooltip-wrap.e-popup .e-arrow-tip-outer.e-tip-bottom {
        border-top-color: #ffd939;
    }

    .e-arrow-tip-inner.e-tip-bottom::before {
        color: #ffd939;
        border: none;
        content:none;
    }
    .e-slider-tooltip.e-tooltip-wrap.e-popup {
        background-color: #ffd939;
        border: 0;
        border-radius: 8px;
        cursor: grab;
        opacity: 1;
    }
    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-slider-tooltip .e-tip-content,
    .e-slider-tooltip.e-tooltip-wrap.e-popup.e-material-range .e-tip-content.e-material-tooltip-show {
        color: #333;
    }
</style>
