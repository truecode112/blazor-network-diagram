@page "/TextBox/Forms-Validation"

@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor TextBox Validation Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Validation in Blazor TextBox Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This example is used to validate form using the Data Annotation. Type the value in the input element. If the input value is valid, then the given input will be ready to submit. Otherwise, an error message will be shown until you enter the valid value.</p>
</SampleDescription>
<ActionDescription>
    <p>The form enables the validation with data annotation attributes by clicking on the submit externally. All rules are validated by the DataAnnotationsValidator.</p>
    <p>The above name field is configured with the following rules.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td style="width:195px">Required</td>
            <td>The field must have a valid value.</td>
        </tr>
        <tr>
            <td>MinLength</td>
            <td>The field must have more than 3 characters in length.</td>
        </tr>
        <tr>
            <td>MaxLength</td>
            <td>The field should not have more than 10 characters in length.</td>
        </tr>
    </table>
    <p style="margin-top:10px">The above address field is configured with the following rule.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td style="width:195px">Required</td>
            <td>The field must have a valid value.</td>
        </tr>
    </table>
</ActionDescription>

<div class="control-section col-lg-12">
    <div class="control-wrapper">
        @if (string.IsNullOrEmpty(Message))
        {
            <EditForm Model="@annotation" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">                
                <DataAnnotationsValidator />
                <div class="form-group">
                    <div class="example-content">
                        <label for="Name" class="example-label">Name</label>
                        <SfTextBox @bind-Value="@annotation.Name" Placeholder="Enter a name"></SfTextBox>
                        <ValidationMessage For="@(() => annotation.Name)" />
                    </div>                    
                    <div class="example-content">
                        <label for="Address" class="example-label">Address</label>
                        <SfTextBox @bind-Value="@annotation.Address" Multiline="true" Placeholder="Enter an address"></SfTextBox>
                        <ValidationMessage For="@(() => annotation.Address)" />
                    </div>
                </div>
                <div class="submit-btn">
                    <SfButton type="submit" IsPrimary="true">Submit</SfButton>
                </div>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @Message
            </div>
        }
    </div>
</div>


<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 30px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .example-content {
        padding: 0px 0px 15px 0px;
    }

    .example-content:last-child {
        padding: 0px 0px 15px 0px;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
    }

    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }
</style>

@code {
    private string Message = string.Empty;
    private Annotation annotation = new Annotation();
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    async void OnValidSubmit()
    {
        Message = "Form Submitted Successfully!";
        await Task.Delay(2000);
        Message = string.Empty;
        annotation.Name = null;
        annotation.Address = null;
        StateHasChanged();
    }
    private void OnInvalidSubmit()
    {
        Message = string.Empty;
    }
    public class Annotation
    {
        [Required(ErrorMessage = "The address field is required.")]
        public string Address { get; set; }
        [Required(ErrorMessage = "The name field is required.")]
        [MaxLength(10, ErrorMessage = "The name field should not contain more than 10 characters.")]
        [MinLength(3, ErrorMessage = "The name field must contain at least 3 characters.")]
        public string Name { get; set; }
    }
}
