@page "/word/word-to-pdfua"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@inherits SampleBaseComponent;
@inject HttpClient Http
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Word (DocIO) Library - Word to PDF/UA Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample illustrates how to preserve document structured tags in the converted PDF using Essential DocIO and Essential PDF." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to convert a Word document to PDF/UA (Section 508 compliant) using .NET Word (DocIO) library and .NET PDF library.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">This feature is used for people who require assistive technologies when the electronic content is ready. The .NET Word (DocIO) library supports converting a Word document to a tagged PDF with Section 508 compliant. For more information about Word to PDF/UA, see this <a href="https://help.syncfusion.com/file-formats/docio/word-to-pdf#accessible-pdf-document">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view the generated PDF/UA document being converted from Word document using .NET Word (DocIO) library and .NET PDF library. Please note that PDF viewer is required to view the resultant PDF.</p>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="ViewTemplate">View Template</SfButton>&nbsp;
                    <SfButton @onclick="GenerateDocument">Convert to PDF</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        WordToPDFUAService service = new WordToPDFUAService(fileData);
        documentStream = service.WordToPDF("Generate Document");
        service.Close();
        await JS.SaveAs("WordToPDF_Pdf_UA.pdf", documentStream.ToArray());
    }
    /// <summary>
    /// Create and download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        WordToPDFUAService service = new WordToPDFUAService(fileData);
        documentStream = service.WordToPDF("View Template");
        service.Close();
        await JS.SaveAs("WordToPDF.docx", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/doc-to-pdf.docx");
            fileData.Add("doc-to-pdf.docx", new MemoryStream(data));
        }
    }
}