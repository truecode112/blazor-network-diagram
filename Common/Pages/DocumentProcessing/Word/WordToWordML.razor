@page "/word/word-to-wordml"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Word (DocIO) Library - Word to WordML Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to convert the Word document to Word processing XML using Essential DocIO." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to convert the Word document to Word processing XML using Essential DocIO.</p>
</SampleDescription>
<ActionDescription>
 <p style="font-size:16px">DocIO provides support to convert the Word document to Word processing XML document and vice versa.</p>
 <p style="font-size:16px">More information about WordML conversion can be found on this  <a href="https://help.syncfusion.com/file-formats/docio/word-file-formats#word-processing-xml-xml">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view the resultant WordML document generated by Essential DocIO.</p>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="ViewTemplate">View Template</SfButton>&nbsp;
                    <SfButton @onclick="ConvertToWordML">Convert to WordML</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Convert the Word document to Word processing XML
    /// </summary>
    public async Task ConvertToWordML(MouseEventArgs args)
    {
        await LoadTemplate(); 
        WordToWordMLService service = new WordToWordMLService(fileData);
        documentStream = service.WordToWordML("ConvertToWordML");
        service.Close();
        await JS.SaveAs("WordToWordML.xml", documentStream.ToArray());
    }
    /// <summary>
    /// Download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        WordToWordMLService service = new WordToWordMLService(fileData);
        documentStream = service.WordToWordML("View Template");
        service.Close();
        await JS.SaveAs("DocToWordML.doc", documentStream.ToArray());        
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/doc-to-wordml.doc");
            fileData.Add("doc-to-wordml.doc", new MemoryStream(data));
        }
    }
}