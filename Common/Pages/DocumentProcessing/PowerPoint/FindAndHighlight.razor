@page "/powerpoint/find-and-highlight"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@inject HttpClient Http
@using BlazorDemos.Data.DocumentProcessing.PowerPoint
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor PowerPoint (Presentation) Library - Find and Highlight Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to find a specific text and highlight it in an existing PowerPoint presentation using Find functionality of .NET PowerPoint library." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">
        This sample demonstrates how to find a specific text and highlight it in an existing PowerPoint presentation using Find functionality of .NET PowerPoint library.
    </p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">.NET PowerPoint library allows you to find the text in the PowerPoint presentation and then to manipulate it.</p>
    <p><ul style="font-size:16px"><li>You can find the first occurrence or all the occurrences of the text in the PowerPoint presentation.</li><li>You can find the text from specific slide, notes slide, master slide or layout slide.</li><li>You can find the text by matching case, whole word and all occurrence or first occurrence alone.</li><li>You can also find the content that spans across several lines.</li></ul></p>
    <p style="font-size:16px">More information about the Find functionality can be found in this <a href="https://help.syncfusion.com/file-formats/presentation/working-with-find-and-replace">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view a PowerPoint presentation generated by .NET PowerPoint library. Please note that Microsoft PowerPoint viewer or its equivalent is required to view the resultant document.</p>

    <div class="button-section">
        <div id="button-control">
		<div class="row">
                <div >
                    <p style="font-size:16px"> Text to Highlight : product </p>
                </div>
            </div>
            <div class="row">
                <div>
                    <SfButton @onclick="ViewTemplate">View Input Template</SfButton>&nbsp;
                    <SfButton @onclick="GenerateDocument">Highlight</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Create and download the Presentation document
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        FindAndHighlightService service = new FindAndHighlightService(fileData);
        documentStream = service.FindAndHighlightPresentation("Highlight");
        service.Close();
        await JS.SaveAs("FindandHighlight.pptx", documentStream.ToArray());
    }
    /// <summary>
    /// Download the template Presentation document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        FindAndHighlightService service = new FindAndHighlightService(fileData);
        documentStream = service.FindAndHighlightPresentation("View Input Template");
        service.Close();
        await JS.SaveAs("Input Template.pptx", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/powerpoint/input-template.pptx");
            fileData.Add("input-template.pptx", new MemoryStream(data));
        }
    }
}