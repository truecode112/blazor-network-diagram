@page "/powerpoint/find-and-replace"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@inject HttpClient Http
@using BlazorDemos.Data.DocumentProcessing.PowerPoint
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor PowerPoint (Presentation) Library - Find and Replace Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to replace a specific text in the PowerPoint presentation with another text using Find and Replace functionality of .NET PowerPoint  library." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">	
This sample demonstrates how to replace a specific text in the PowerPoint presentation with another text using Find and Replace functionality of .NET PowerPoint  library.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">.NET PowerPoint library allows you to replace a specific text in the PowerPoint presentation with another text.</p>
    <p><ul style="font-size:16px"><li>You can find and replace the text with another text in all PowerPoint slides and elements such as Shape, Textbox, Table, SmartArt, etc.</li><li>You can replace the text in specific slide, notes slide, master slide or layout slide.</li><li>You can replace the text by matching case, whole word and all occurrence or first occurrence alone.</li><li>You can also replace the content that spans across several lines.</li></ul></p>
    <p style="font-size:16px">More information about the Find and Replace functionality can be found in this <a href="https://help.syncfusion.com/file-formats/presentation/working-with-find-and-replace">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view a PowerPoint presentation generated by .NET PowerPoint library. Please note that Microsoft PowerPoint viewer or its equivalent is required to view the resultant document.</p>
    <div class="button-section">
        <div id="button-control">
		<div class="row">
            <div >
                <p style="font-size:16px"> Text to Find : product </p>
            </div>
        </div>
        <div class="row">
            <div>
                <p style="font-size:16px"> Text to Replace : Service </p>
            </div>
        </div>
        <div class="checkbox-control">
        <div>
            <SfCheckBox @bind-Checked="@matchCase" Label="Match case"></SfCheckBox>
        </div>
        <div>
            <SfCheckBox @bind-Checked="@matchWholeWord" Label="Match whole word"></SfCheckBox>
        </div>
        <div>
            <SfCheckBox @bind-Checked="@firstOccurrence" Label="Replace only the first occurrence"></SfCheckBox>
        </div>
        </div>
        <div class="row">
            <div>
                <SfButton @onclick="ViewTemplate">View Input Template</SfButton>&nbsp;
                <SfButton @onclick="GenerateDocument">Replace</SfButton>
            </div>
        </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    bool matchCase = false;
    bool matchWholeWord = false;
    bool firstOccurrence = false;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    /// <summary>
    /// Create and download the Presentation document.
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        FindAndReplaceService service = new FindAndReplaceService(fileData);
        documentStream = service.FindAndReplacePresentation("Replace", matchCase, matchWholeWord, firstOccurrence);
        service.Close();
        await JS.SaveAs("FindandReplace.pptx", documentStream.ToArray());
    }
    /// <summary>
    /// Download the template Presentation document.
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        FindAndReplaceService service = new FindAndReplaceService(fileData);
        documentStream = service.FindAndReplacePresentation("View Input Template", matchCase, matchWholeWord, firstOccurrence);
        service.Close();
        await JS.SaveAs("Input Template.pptx", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/powerpoint/input-template.pptx");
            fileData.Add("input-template.pptx", new MemoryStream(data));
        }
    }
}