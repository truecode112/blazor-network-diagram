@page "/powerpoint/pptx-to-pdfa"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.PowerPoint
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor PowerPoint (Presentation) Library - PPTX To PDF/A Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to set the PDF conformance level while converting PowerPoint presentation to PDF." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
  <p style="font-size:16px">This sample demonstrates how to convert a PowerPoint Presentation to PDF/A using .NET PowerPoint library and .NET PDF library.</p>  
</SampleDescription>
<ActionDescription>
    <div>
        This feature can be used for long term archiving and standardization. More information about converting PowerPoint Presentation to PDF with conformance can be found in this   
        <a href="https://help.syncfusion.com/file-formats/presentation/presentation-to-pdf#pdf-conformance">documentation</a>
        section.
    </div>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view the PDF/A document generated by .NET PowerPoint library and .NET PDF library. Please note that Adobe Reader or its equivalent is required to view the resultant document.</p>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="PPTXToPDFInput">Input Template</SfButton>
                    <SfButton @onclick="PresentationToPDF">Convert to PDF</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Create and download the Presentation document
    /// </summary>
    public async Task PresentationToPDF(MouseEventArgs args)
    {
        await LoadTemplate();
        PPTXToPDFAService service = new PPTXToPDFAService(fileData);
        documentStream = service.PDFConversion();
        service.Close();
        await JS.SaveAs("PPTXToPDF_Pdf_A3A.pdf", documentStream.ToArray());
    }

    /// <summary>
    /// Create and download the Presentation document
    /// </summary>
    public async Task PPTXToPDFInput(MouseEventArgs args)
    {
        await LoadTemplate();
        PPTXToPDFAService service = new PPTXToPDFAService(fileData);
        documentStream = service.PDFInput();
        service.Close();
        await JS.SaveAs("PPTXToPDF.pptx", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/powerpoint/template.pptx");
            fileData.Add("template.pptx", new MemoryStream(data));
        }
    }
}