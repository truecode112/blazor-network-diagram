@page "/pdf/find-pdf-corruption"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@

@using BlazorDemos.Data.FileFormats.PDF

@*End:Hidden*@
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor PDF Library - Find PDF Corruption Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates to find PDF document corruption by using Essential PDF." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to find PDF document corruption by using Essential PDF.</p>
</SampleDescription>
<ActionDescription>
   <p>This feature allows you to find only PDF syntax level corruptions.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view a PDF document validation result generated by Essential PDF. </p>

    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="FindPDFCorruptionPDF">Find Corruption</SfButton>
                </div>
            </div>
        </div>
    </div>
    <div style="margin-top: 10px">
        <text for="skills" style="font-weight:bold; font-size:16px">Validation Result</text><br><br>
        <textarea name="skills" cols="100" rows="5" readonly="readonly">@response</textarea>
    </div>
</div>

<style>
    .radio-control {
        margin: 0 0 5% 0;
    }

    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {   
    
	string response = null;
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    /// <summary>
    ///  Find the corruptions in PDF document.
    ///<summary>
    protected async void FindPDFCorruptionPDF(MouseEventArgs args)
    {	 
        Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/pdf/corrupted-document.pdf");
        fileData.Add("corrupted-document.pdf", new MemoryStream(data));
        FindPDFCorruptionService service = new FindPDFCorruptionService(fileData);
        response = service.FindPDFCorruptionPDF();
    }
}
