@page "/gantt-chart/overview"

@using BlazorDemos.Shared
@using Syncfusion.Blazor
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject NavigationManager Navigation
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@using ej2_blazor_ganttdata;
@using global::Overview.Pages;

@inherits SampleBaseComponent;

<SampleDescription>
    <p>This sample shows an overview of the <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-gantt-chart'>Blazor Gantt Chart</a> features that visualize the progress of each feature of the product towards its release and make it easier to monitor the scheduling of the dependent items.</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows the three-quarter release planning of product features rendered in the Blazor Gantt chart. It tracks the quarterly release planning of product status, resources, and task scheduling.</p>
    <p>Blazor Gantt Chart features such as <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/sorting'>Sorting</a>, <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/filtering'>Filtering</a>, <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/column-resizing'>Column resizing</a>, <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/column-menu'>Column menu</a>, <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/templates#taskbar-template'>Taskbar template</a>, and so on are used in this demo.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt @ref="Gantt" ID="GanttOverview" DataSource="TaskCollection" Height="450px" Width="100%"
                     RowHeight="36" TaskbarHeight="24" GridLines="@Syncfusion.Blazor.Gantt.GridLine.Vertical" WorkUnit="WorkUnit.Day"
                     ProjectStartDate=@(new DateTime(2021, 12, 17)) ProjectEndDate="@(new DateTime(2022,10,26))" AllowFiltering="true" AllowResizing="true" AllowSorting="true" ShowColumnMenu="true" ScrollToTaskbarOnClick="true" AllowUnscheduledTasks="true">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Work="Work"
                                 Duration="TimeLog" Dependency="Predecessor" Progress="Progress" ParentID="ParentId">
                </GanttTaskFields>
                <GanttEditSettings AllowEditing="false"></GanttEditSettings>
                <GanttColumns>
                    <GanttColumn Field="TaskName" Width="250" HeaderText="Product Release" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" IsFrozen="true" Freeze="FreezeDirection.Left"></GanttColumn>
                    <GanttColumn Field="Assignee" HeaderText="Assignee" AllowFiltering="false" AllowSorting="false" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" Width="130">
                        <Template>
                            @{
                                if ((context as OverviewData.TaskData).Assignee != null)
                                {
                                    var template = (context as OverviewData.TaskData).Assignee;
                                    <div class="image">
                                        <img style="height:25px; width:25px" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/gantt/{template.Trim().Replace(" ","").ToLower()}.png")" />
                                        <span>@template</span>
                                    </div>
                                }
                            }
                        </Template>
                    </GanttColumn>
                    <GanttColumn Field="Status" HeaderText="Status" MinWidth="100" Width="120" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                        <Template>
                            @{
                                string statusString = (context as OverviewData.TaskData).Status;
                                if (statusString != null)
                                {
                                    string statusStyle = this.GetStatusStyle(statusString);
                                    string statusContentstyle = this.GetStatusContentStyle(statusString);
                                    <div style="@statusStyle"><span style="@statusContentstyle">@statusString</span></div>
                                }
                            }
                        </Template>
                    </GanttColumn>
                    <GanttColumn Field="Priority" HeaderText="Priority" MinWidth="80" Width="100" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Left">
                        <Template>
                            @{
                                string priorityString = (context as OverviewData.TaskData).Priority;
                                if (priorityString != null)
                                {
                                    string priorityStyle = this.GetPriorityStyle(priorityString);
                                    string priorityContentStyle = this.GetPriorityContentStyle(priorityString);
                                    <div style="@priorityStyle"><span style="@priorityContentStyle">@priorityString</span></div>
                                }
                            }
                        </Template>
                    </GanttColumn>
                    <GanttColumn Field="Work" HeaderText="Planned Hours" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" Width="120"></GanttColumn>
                    <GanttColumn Field="TimeLog" HeaderText="Work Log" Width="120"></GanttColumn>
                </GanttColumns>
                <GanttLabelSettings RightLabel="Assignee" TValue="OverviewData.TaskData"></GanttLabelSettings>
                <GanttTemplates TValue="OverviewData.TaskData">
                    <TaskbarTemplate>
                        @{
                            var task = (context as OverviewData.TaskData);
                if (task.Progress < 100 && task.Progress != 0)
                            {
                                borderRadius = "0px";
                                <div class="e-gantt-child-taskbar-inner-div e-gantt-child-taskbar" style="border-radius:10px;color:@childTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="border-radius:@borderRadius;color:@childProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:white;font-size:12px;top:4px;position: relative;right:4px">@task.Progress%</span>
                                    </div>
                                </div>
                            }
                            else if (task.Progress == 100)
                            {
                                borderRadius = "10px";
                                <div class="e-gantt-child-taskbar-inner-div e-gantt-child-taskbar" style="border-radius:10px;color:@childTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="border-radius:@borderRadius;color:@childProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:white;font-size:12px;top:4px;position: relative;right:4px">@task.Progress%</span>
                                    </div>
                                </div>
                            }
                            if (task.Progress == 0)
                            {
                                borderRadius = "0px";
                                <div class="e-gantt-child-taskbar-inner-div e-gantt-child-taskbar" style="border-radius:10px;color:@childTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="border-radius:@borderRadius;color:@childProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:white;font-size:12px;top:4px;position: relative;left:4px;">@task.Progress%</span>
                                    </div>
                                </div>
                            }
                        }
                        
                    </TaskbarTemplate>
                    <ParentTaskbarTemplate>
                        @{
                            var task = (context as OverviewData.TaskData);
                            if (task.Progress < 100 && task.Progress != 0)
                            {
                                borderRadius = "0px";
                                <div class="e-gantt-parent-taskbar-inner-div e-gantt-parent-taskbar" style="border-radius:10px;color:@parentTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-parent-progressbar-inner-div e-gantt-parent-progressbar" style="border-radius:@borderRadius;color:@parentProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:@progressValue;font-size:12px;top:4px;position: relative;right:4px;">@task.Progress%</span>
                                    </div>
                                </div>
                            }else if (task.Progress == 100)
                            {
                                borderRadius = "10px";
                                <div class="e-gantt-parent-taskbar-inner-div e-gantt-parent-taskbar" style="border-radius:10px;color:@parentTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-parent-progressbar-inner-div e-gantt-parent-progressbar" style="border-radius:@borderRadius;color:@parentProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:@progressValue;font-size:12px;top:4px;position: relative;right:4px;">@task.Progress%</span>
                                    </div>
                                </div>
                            }
                            if (task.Progress == 0)
                            {
                                borderRadius = "0px";
                                <div class="e-gantt-parent-taskbar-inner-div e-gantt-parent-taskbar" style="border-radius:10px;color:@parentTrackColor;height:24px;width:100%">
                                    <div class="e-gantt-parent-progressbar-inner-div e-gantt-parent-progressbar" style="border-radius:@borderRadius;color:@parentProgressColor;height:24px;width:@task.Progress%;text-align: right;box-sizing: border-box;">
                                        <span style="color:@progressValue;font-size:12px;top:4px;position: relative;left:4px;">@task.Progress%</span>
                                    </div>
                                </div>
                            }
                        }
                        
                    </ParentTaskbarTemplate>
                </GanttTemplates>
                <SfToolbar ID="GanttOverview_Gantt_Toolbar">
                    <ToolbarItems>
                        <ToolbarItem Align="ItemAlign.Right" Text="View">
                            <Template>
                                <SfDropDownList TValue="string" TItem="SplitterView" DataSource="@SplitterViews" Width="90px" Placeholder="   View" CssClass="e-custom">
                                    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="string" TItem="SplitterView" ValueChange="OnChange"></DropDownListEvents>
                                </SfDropDownList>
                            </Template>
                        </ToolbarItem>
                        <ToolbarItem Id="GanttOverview_expandall" Text="Expand all" Align="ItemAlign.Left" OnClick="ToolbarAction" PrefixIcon="e-expandall"></ToolbarItem>
                        <ToolbarItem Id="GanttOverview_collapseall" Text="Collapse all" Align="ItemAlign.Left" OnClick="ToolbarAction" PrefixIcon="e-collapseall"></ToolbarItem>

                    </ToolbarItems>

                </SfToolbar>
                <GanttEventMarkers>
                    <GanttEventMarker Day="@VolumeOneRelease" Label="Q-1 Release"
                                      CssClass="e-custom-event-marker"></GanttEventMarker>
                    <GanttEventMarker Day="@VolumeTwoRelease" Label="Q-2 Release"
                                      CssClass="e-custom-event-marker"></GanttEventMarker>
                    <GanttEventMarker Day="@VolumeThreeRelease" Label="Q-3 Release"
                                      CssClass="e-custom-event-marker"></GanttEventMarker>
                </GanttEventMarkers>
                <GanttHolidays>
                    <GanttHoliday From="@Holiday1" To="@Holiday2" Label="Christmas holidays"></GanttHoliday>
                    <GanttHoliday From="@Holiday3" To="@Holiday4" Label="New year's' holiday"></GanttHoliday>
                </GanttHolidays>
                <GanttTimelineSettings TimelineUnitSize="40">
                    <GanttTopTierSettings Unit="TimelineViewMode.Month"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Day" Format="dd" Count="4"></GanttBottomTierSettings>
                </GanttTimelineSettings>
                <GanttSplitterSettings ColumnIndex="4"> </GanttSplitterSettings>
            </SfGantt>
        </div>
    </div>
</div>
@code {
    private SfGantt<OverviewData.TaskData> Gantt;
    public List<OverviewData.TaskData> TaskCollection { get; set; }
    private DateTime VolumeOneRelease = new DateTime(2022, 04, 04);
    private DateTime VolumeTwoRelease = new DateTime(2022, 06, 30);
    private DateTime VolumeThreeRelease = new DateTime(2022, 09, 29);
    private DateTime Holiday1 = new DateTime(2021, 12, 25);
    private DateTime Holiday2 = new DateTime(2021, 12, 26);
    private DateTime Holiday3 = new DateTime(2022, 01, 01);
    private DateTime Holiday4 = new DateTime(2022, 01, 01);
    public Theme CurrentTheme { get; set; }
    public string currentUri;
    public string style;
    public string childProgressColor;
    public string parentProgressColor;
    public string childTrackColor;
    public string parentTrackColor;
    public string progressValue { get; set; } = "white";
    private List<OverviewData.ResourceAlloacteData> ResourceCollection { get; set; }
    private List<string> Status = new List<string>() { "Open", "Inprogress", "On Hold", "Complete" };
    private List<string> Priority = new List<string>() { "Low", "Normal", "High", "Critical" };
    public string borderRadius = "10px";
    public string statusStyleColor;
    public string statusContentstyleColor;
    public string priorityContentStyle;
    public string priorityStyle;
    private List<Theme> ThemeCollection = new List<Theme>() { Theme.Fluent, Theme.Fabric, Theme.Bootstrap5, Theme.Bootstrap, Theme.Bootstrap4, Theme.Tailwind, Theme.Material };
    public string progressLeft = "0px";
    public class SplitterView
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    public List<SplitterView> SplitterViews = new List<SplitterView>
{
        new SplitterView() { ID= "Default", Text= "Default" },
        new SplitterView() { ID= "Grid", Text= "Grid" },
        new SplitterView() { ID= "Chart", Text= "Chart" },
    };
    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SplitterView> args)
    {
        if (args.Value == "Grid")
        {
            this.Gantt.SetSplitterPositionAsync(Syncfusion.Blazor.Gantt.SplitterView.Grid);
        }
        else if (args.Value == "Chart")
        {
            this.Gantt.SetSplitterPositionAsync(Syncfusion.Blazor.Gantt.SplitterView.Chart);
        }
        else
        {
            this.Gantt.SetSplitterPositionAsync(Syncfusion.Blazor.Gantt.SplitterView.Default);
        }
    }
    public void ToolbarAction(ClickEventArgs args)
    {
        switch (args.Item.Id)
        {
            case "GanttOverview_expandall":
                this.Gantt.ExpandAllAsync();
                break;
            case "GanttOverview_collapseall":
                this.Gantt.CollapseAllAsync();
                break;
            case "GanttOverview_zoomin":
                this.Gantt.ZoomInAsync();
                break;
            case "GanttOverview_zoomout":
                this.Gantt.ZoomOutAsync();
                break;
            case "GanttOverview_zoomtofit":
                this.Gantt.ZoomToFitAsync();
                break;
        }
    }
    protected override void OnInitialized()
    {
        this.TaskCollection = OverviewData.DataCollection();
        this.ResourceCollection = OverviewData.GetResources;
        currentUri = Navigation.Uri;
        if (currentUri.Contains("fluent-dark"))
        {
            CurrentTheme = Theme.FluentDark;
            parentProgressColor = "#3b3a39";
            parentTrackColor = "#323130";
            childProgressColor = "#0078d4";
            childTrackColor = "#6ec0ff";
            progressValue = "#f3f2f1";
        }
        else if (currentUri.Contains("fluent"))
        {
            CurrentTheme = Theme.Fluent;
            parentProgressColor = "#d2d0ce";
            parentTrackColor = "#e1dfdd";
            childProgressColor = "#0078d4";
            childTrackColor = "#6ec0ff";
            progressValue = "#201f1e";

        }
        else if (currentUri.Contains("fabric-dark"))
        {
            CurrentTheme = Theme.FabricDark;
            parentProgressColor = "#4cc7ba";
            parentTrackColor = "#029f90";
            childProgressColor = "#0063ad";
            childTrackColor = "#0074cc";
        }
        else if (currentUri.Contains("fabric"))
        {
            CurrentTheme = Theme.Fabric;
            parentProgressColor = "#505050";
            parentTrackColor = "#767676";
            childProgressColor = "#005ba3";
            childTrackColor = "#0078d6";
        }
        else if (currentUri.Contains("bootstrap5-dark"))
        {
            CurrentTheme = Theme.Bootstrap5Dark;
            parentProgressColor = "#adb5bd";
            parentTrackColor = "#6c757d";
            childProgressColor = "#0d6efd";
            childTrackColor = "#86b7fe";
            progressValue = "#212529";
        }
        else if (currentUri.Contains("bootstrap-dark"))
        {
            CurrentTheme = Theme.BootstrapDark;
            parentProgressColor = "#4cc7ba";
            parentTrackColor = "#029f90";
            childProgressColor = "#0070f0";
            childTrackColor = "#248aff";
        }
        else if (currentUri.Contains("bootstrap5"))
        {
            CurrentTheme = Theme.Bootstrap5;
            parentProgressColor = "#adb5bd";
            parentTrackColor = "#ced4da";
            childProgressColor = "#0d6efd";
            childTrackColor = "#86b7fe";
            progressValue = "#212529";
        }
        else if (currentUri.Contains("bootstrap4"))
        {
            CurrentTheme = Theme.Bootstrap4;
            parentProgressColor = "#495057";
            parentTrackColor = "#6c757d";
            childProgressColor = "#0056b3";
            childTrackColor = "#007bff";
        }
        else if (currentUri.Contains("bootstrap"))
        {
            CurrentTheme = Theme.Bootstrap;
            parentProgressColor = "#555";
            parentTrackColor = "#777";
            childProgressColor = "#21527d";
            childTrackColor = "#317ab9";
        }
        else if (currentUri.Contains("highcontrast"))
        {
            CurrentTheme = Theme.HighContrast;
            parentProgressColor = "#005201";
            parentTrackColor = "#007d01";
            childProgressColor = "#3e047d";
            childTrackColor = "#6e06f1";
        }
        else if (currentUri.Contains("tailwind-dark"))
        {
            CurrentTheme = Theme.TailwindDark;
            parentProgressColor = "#9ca3af";
            parentTrackColor = "#6b7280";
            childProgressColor = "#22d3ee";
            childTrackColor = "#0891b2";
            progressValue = "white";
        }
        else if (currentUri.Contains("tailwind"))
        {
            CurrentTheme = Theme.Tailwind;
            parentProgressColor = "#9ca3af";
            parentTrackColor = "#d1d5db";
            childProgressColor = "#4f46e5";
            childTrackColor = "#818cf8";
            progressValue = "#111827";
        }
        else if (currentUri.Contains("material-dark"))
        {
            CurrentTheme = Theme.MaterialDark;
            parentProgressColor = "#4cc7ba";
            parentTrackColor = "#029f90";
            childProgressColor = "#7280ce";
            childTrackColor = "#3f51b5";
        }
        else if (currentUri.Contains("material"))
        {
            CurrentTheme = Theme.Material;
            parentProgressColor = "#616161";
            parentTrackColor = "rgba(97, 97, 97, 0.87)";
            childProgressColor = "#3f51b5";
            childTrackColor = "#5869c5";
        }

    }
    private String GetStatusStyle(string status)
    {
        switch (status)
        {
            case "In Progress":
                statusStyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#DFECFF" : "#2D3E57";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 96px; height: 24px; border-radius: 24px; background:" + statusStyleColor;
                break;
            case "Open":
                style = "background-color: red; color: white; border-radius: 15px; padding:6px";
                break;
            case "On Hold":
                statusStyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#E4E4E7" : "#3C3B43";
                style = "display: flex; border-radius: 24px; padding: 1px 12px; gap: 10px; width: 78px; height: 24px; background:" + statusStyleColor;
                break;
            case "Completed":
                statusStyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#DFFFE2" : "#16501C";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 98px; height: 24px; border-radius: 24px;background:" + statusStyleColor;
                break;
            case "High":
                statusStyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#FFEBE9" : "#48211D";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 55px; height: 24px; border-radius: 24px; background:" + statusStyleColor;
                break;
        }
        return style;
    }
    private String GetStatusContentStyle(string status)
    {
        switch (status)
        {
            case "In Progress":
                statusContentstyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#006AA6" : "#34B6FF";
                style = "width: 72px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + statusContentstyleColor;
                break;
            case "Open":
                style = "background-color: red; color: white; border-radius: 15px; padding:6px";
                break;
            case "On Hold":
                statusContentstyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#766B7C" : "#CDCBD7";
                style = "width: 54px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + statusContentstyleColor;
                break;
            case "Completed":
                statusContentstyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#00A653" : "#92FFC8";
                style = "width: 74px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + statusContentstyleColor;
                break;
            case "High":
                statusContentstyleColor = ThemeCollection.Contains(this.CurrentTheme) ? "#FF3740" : "#FFB5B8";
                style = "width: 31px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + statusContentstyleColor;
                break;
        }
        return style;
    }
    private String GetPriorityStyle(string status)
    {
        switch (status)
        {
            case "Low":
                priorityStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#FFF6D1" : "#473F1E";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 52px; height: 24px; border-radius: 24px; background: " + priorityStyle;
                break;
            case "Normal":
                priorityStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#F5DFFF" : "#4D2F5A";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 73px; height: 24px; border-radius: 24px; background: " + @priorityStyle;
                break;
            case "Critical":
                priorityStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#FFEBE9" : "#48211D";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 72px; height: 24px; border-radius: 24px; background: " + priorityStyle;
                break;
            case "High":
                priorityStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#FFEBE9" : "#48211D";
                style = "display: flex; padding: 1px 12px; gap: 10px; width: 55px; height: 24px; border-radius: 24px; background: " + priorityStyle;
                break;
        }
        return style;
    }
    private String GetPriorityContentStyle(string status)
    {
        switch (status)
        {
            case "Low":
                priorityContentStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#70722B" : "#FDFF88";
                style = "width: 28px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + priorityContentStyle;
                break;
            case "Normal":
                priorityContentStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#7100A6" : "#E3A9FF";
                style = "width: 49px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + priorityContentStyle;
                break;
            case "Critical":
                priorityContentStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#FF3740" : "#FFB5B8";
                style = "width: 48px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + priorityContentStyle;
                break;
            case "High":
                priorityContentStyle = ThemeCollection.Contains(this.CurrentTheme) ? "#FF3740" : "#FFB5B8";
                style = "width: 31px; height: 22px; font-style: normal; font-weight: 500; font-size: 14px; line-height: 20px; text-align: center; color: " + @priorityContentStyle;
                break;
        }
        return style;
    }
}

<style>
    .e-custom.e-input-group, .e-custom.e-input-group.e-control-wrapper {
        border: none;
        background: none;
    }

    .e-ddl.e-input-group.e-control-wrapper .e-ddl-icon::before {
        content: '\e729';
        padding-top: 5px;
        padding-right: 10px;
    }

    .e-task-label {
        display: inline-block;
        width: 100%;
        padding: 0 6px;
    }

    .e-toolbar {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        border-style: solid;
        border-width: 1px 1px 0;
    }
</style>