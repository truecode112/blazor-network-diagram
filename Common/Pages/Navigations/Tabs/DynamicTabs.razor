@page "/tabs/dynamic-tabs"

@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor

@inherits SampleBaseComponent;

<SampleDescription>
    <p>  This sample demonstrates the options to customize tab items dynamically like browser tab.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this demo, floating button added to the right of existing tabs by adding button inside the <code>HeaderTemplate</code> of last TabItem. <br />
        The <code>Blazor Tabs</code> allows you to add new tab items when user clicks on the Button inside HeaderTemplate and close the Tab item by clicking the close icon in the tab header. By default, the close icon is not shown in the header which can be shown or hidden using <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Navigations.SfTab.html#Syncfusion_Blazor_Navigations_SfTab_ShowCloseButton">ShowCloseButton</a> property.
    </p>
    <p>More information about Blazor Tabs can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/tabs/getting-started/'> documentation </a> section. </p>
</ActionDescription>


<div class="col-lg-12 control-section">
    <div class="dynamic-tab-control-section">
        <SfTab CssClass="dynamic-tabs" @ref="Tab" ShowCloseButton=true OverflowMode="OverflowMode.MultiRow">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect=AnimationEffect.None></TabAnimationPrevious>
                <TabAnimationNext Effect=AnimationEffect.None></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                @if (TabItems != null && TabItems.Count > 0)
                {
                    @foreach (TabData Item in TabItems)
                    {
                        <TabItem CssClass=@(Item.CssClass)>
                            <HeaderTemplate>
                                @if (Item.Header == "+")
                                {
                                    <SfButton IconCss="e-icons e-plus" @onclick="onClick"></SfButton>
                                }
                                else
                                {
                                    <span>@(Item.Header)</span>
                                }
                            </HeaderTemplate>
                            <ContentTemplate>
                                <div>@(Item.TabContent)</div>
                            </ContentTemplate>
                        </TabItem>
                    }
                }
            </TabItems>
        </SfTab>
    </div>
</div>


@code {
    SfTab Tab;
    int i;
    public class TabData
    {
        public string Header { get; set; }
        public RenderFragment TabContent { get; set; }
        public string CssClass { get; set; }
    }
    RenderFragment FragmentContent(String fragmentString) => builder =>
    {
        builder.OpenElement(0, "div");
        if (fragmentString != "Plus")
        {
            builder.AddContent(1, fragmentString);
        }
        builder.CloseElement();
    };
    List<TabData> TabItems { get; set; }
    protected override void OnInitialized()
    {
        TabItems = new List<TabData>()
        {
            new TabData() { Header = "Tab Header 1", TabContent = FragmentContent("Tab Content: 1"), CssClass = "" },
            new TabData() { Header = "Tab Header 2", TabContent = FragmentContent("Tab Content: 2"), CssClass = "" },
            new TabData() { Header = "Tab Header 3", TabContent = FragmentContent("Tab Content: 3"), CssClass = "" },
            new TabData() { Header = "+", TabContent = FragmentContent("Plus"), CssClass = "tab-add-icon" }
        };
        i = TabItems.Count();
    }
    public void onClick()
    {
        int index = TabItems.FindIndex(x => x.Header.StartsWith("+"));
        TabItems.Insert(index, new TabData
            {
                Header = "Tab Header " + i.ToString(),
                TabContent = FragmentContent("Tab Content: " + i.ToString()),
                CssClass = ""
            });
        i++;
    }
}

<style>
    .dynamic-tabs {
        border: 1px solid #d7d7d7;
    }

    .dynamic-tabs .e-content .e-item {
        padding: 10px;
        text-align: justify;
    }

    .dynamic-tabs .e-tab-header.e-close-show .e-toolbar-item.tab-add-icon .e-icons.e-close-icon {
        display: none;
    }

    .dynamic-tabs .e-tab-header.e-close-show .e-toolbar-item.tab-add-icon .e-btn {
        border: none;
    }

    .dynamic-tabs .e-tab-header .e-toolbar-item.tab-add-icon:hover {
        background: none;
    }

    .dynamic-tab-control-section {
        margin: 20px 20% 20px 20%;
    }

    @@media screen and (max-width: 480px) {
        .dynamic-tab-control-section{
            margin: 20px 0 20px 0;
        }
    }

    .bootstrap5 .dynamic-tabs,
    .bootstrap5-dark .dynamic-tabs,
    .bootstrap .dynamic-tabs,
    .bootstrap-dark .dynamic-tabs,
    .bootstrap4 .dynamic-tabs {
        border: none;
    }
</style>
