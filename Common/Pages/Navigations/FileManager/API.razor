@page "/file-manager/api"

@using Syncfusion.Blazor.FileManager;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.DropDowns;

@inject IJSRuntime JsRuntime;

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor File Manager API Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the API in Blazor File Manager Component. Explore here for more details." />
	<link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>The File Manager component in the property pane displays its features in this sample. The visibility of the toolbar, multi-selection, file extensions, and image thumbnails can all be easily controlled by checking or unchecking the respective checkboxes. Additionally, specific toolbar items can be enabled or disabled by selecting values in the Dropdown List.</p>
</SampleDescription>
<ActionDescription>
    <p>In this demo, the above mentioned requirements are achieved by using the following API properties and method of the File Manager component. </p>
    <ul>
        <li><code>ToolbarSettings</code> defines the group of items in the toolbar that are aligned horizontally.</li>
        
        <li><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.FileManager.SfFileManager-1.html#Syncfusion_Blazor_FileManager_SfFileManager_1_AllowMultiSelection'>AllowMultiSelection</a> property enables or disables the File Manager's multiple folder or file selection.</li>

        <li><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.FileManager.SfFileManager-1.html#Syncfusion_Blazor_FileManager_SfFileManager_1_ShowThumbnail'>ShowThumbnail</a> property shows or hides thumbnail images in the large icons view.</li>

        <li><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.FileManager.SfFileManager-1.html#Syncfusion_Blazor_FileManager_SfFileManager_1_ShowFileExtension'>ShowFileExtension</a> property shows or hides the file extension in the File Manager.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="control_wrapper">
        @* Initialization of File Manager component with toolbar and navigation pane customization *@
        <SfFileManager @ref="File" TValue="FileManagerDirectoryContent" AllowMultiSelection="@allowMultiSelection" ShowFileExtension="@showFileExtension" ShowThumbnail="@showThumbnail">
            <FileManagerAjaxSettings Url="https://amazons3.azurewebsites.net/api/AmazonS3Provider/AmazonS3Fileoperations"
                                     UploadUrl="https://amazons3.azurewebsites.net/api/AmazonS3Provider/AmazonS3Upload"
                                     DownloadUrl="https://amazons3.azurewebsites.net/api/AmazonS3Provider/AmazonS3Download"
                                     GetImageUrl="https://amazons3.azurewebsites.net/api/AmazonS3Provider/AmazonS3GetImage">
            </FileManagerAjaxSettings>
            <FileManagerToolbarSettings Items="@Items" Visible="@visible" />
            <FileManagerNavigationPaneSettings Visible=false />
            <FileManagerContextMenuSettings Layout="@LayoutItems" Visible="true"></FileManagerContextMenuSettings>
        </SfFileManager>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table id="property" class="e-width-100">
                <tbody>
                    <tr class="e-height-50">
                        <td class="property-text e-width-55">Toolbar</td>
                        <td class="e-width-45">
                            @* Initialization of Checkbox component *@
                            <SfCheckBox @bind-Checked="@check" Name="toolbar" ValueChange="OnToolbarChange" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                   <tr class="e-height-50">
                        <td class="property-text e-width-55">Allow MultiSelection</td>
                        <td class="e-width-45">
                            @* Initialization of Checkbox component *@
                            <SfCheckBox @bind-Checked="@multiSelectionCheck" Name="multiselection" ValueChange="OnMultiSelectionChange" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr class="e-height-50">
                        <td class="property-text e-width-55">Show Thumbnail</td>
                        <td class="e-width-45">
                            @* Initialization of Checkbox component *@
                            <SfCheckBox @bind-Checked="@showThumbnailCheck" Name="multiselection" ValueChange="ShowThumbnailChange" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr class="e-height-50">
                        <td class="property-text e-width-55">Show File Extension</td>
                        <td class="e-width-45">
                            @* Initialization of Checkbox component *@
                            <SfCheckBox @bind-Checked="@fileExtensionCheck" Name="multiselection" ValueChange="FileExtensionChange" TChecked="bool"></SfCheckBox>
                        </td>
                    </tr>
                    <tr class="e-height-50">
                        <td class="property-text e-width-55">Disable Toolbar Item</td>
                        <td class="e-width-45"> 
                            <SfDropDownList TItem="Fields" TValue="string" PopupHeight="100px" Placeholder="Select Items" DataSource="@dropDownListItems">
                                <DropDownListEvents TItem="Fields" TValue="string" ValueChange="DisableSelectedItems" />
                                <DropDownListFieldSettings Text="Text" Value="ID"/>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr class="e-height-50">
                        <td class="property-text e-width-55">Enable Toolbar Item</td>
                        <td class="e-width-45">
                            <SfDropDownList TItem="Fields" TValue="string" PopupHeight="100px" Placeholder="Select Items" DataSource="@dropDownListItems">
                                <DropDownListEvents TItem="Fields" TValue="string" ValueChange="EnableSelectedItems" />
                                <DropDownListFieldSettings Text="Text" Value="ID" />
                            </SfDropDownList>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    SfFileManager<FileManagerDirectoryContent>? File;
    private bool check { get; set; } = true;
    private bool multiSelectionCheck { get; set; } = true;
    private bool fileExtensionCheck { get; set; } = false;
    private bool showThumbnailCheck { get; set; } = true;
    private bool visible { get; set; } = true;
    private bool allowMultiSelection { get; set; } = true;
    private bool showFileExtension { get; set; } = false;
    private bool showThumbnail { get; set; } = true;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    public string[] Items = new string[] { "NewFolder", "Cut", "Copy", "Paste", "Delete", "Download", "Rename", "SortBy", "Refresh", "Selection", "View", "Details" };
    public string[] LayoutItems = new string[] { "SortBy", "View", "Refresh", "|", "Paste", "|", "NewFolder", "|", "Details", "|", "SelectAll" };
    //End:Hidden
    // Specifies the event handler to show/hide the toolbar.
    private void OnCheckChanged(string property, bool args)
    {
        switch (property)
        {
            case "Visible":
                this.visible = args;
                break;
            case "AllowMultiSelection":
                this.allowMultiSelection = args;
                break;
            case "ShowFileExtension":
                this.showFileExtension = args;
                break;
            case "ShowThumbnail":
                this.showThumbnail = args;
                break;
        }
        this.StateHasChanged();
    }

    private void OnToolbarChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnCheckChanged("Visible", args.Checked);
    }

    private void OnMultiSelectionChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnCheckChanged("AllowMultiSelection", args.Checked);
    }

    private void FileExtensionChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnCheckChanged("ShowFileExtension", args.Checked);
    }

    private void ShowThumbnailChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        OnCheckChanged("ShowThumbnail", args.Checked);
    }
    public class Fields
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    private List<Fields> dropDownListItems = new List<Fields>()
    {
        new Fields(){ ID= "1", Text= "New Folder" },
        new Fields(){ ID= "2", Text= "Cut" },
        new Fields(){ ID= "3", Text= "Copy" },
        new Fields(){ ID= "4", Text= "Delete" },
        new Fields(){ ID= "5", Text= "Download" },
        new Fields(){ ID= "6", Text= "Rename" },
        new Fields(){ ID= "7", Text= "SortBy" },
        new Fields(){ ID= "8", Text= "Refresh"},
        new Fields(){ ID= "9", Text= "Selection" },
        new Fields(){ ID= "10", Text= "View"},
        new Fields(){ ID= "11", Text= "Details"}
     };
    private readonly Dictionary<string, string> toolbarItems = new Dictionary<string, string>
    {
        {"New Folder", "NewFolder"},
        {"Cut", "Cut"},
        {"Copy", "Copy"},
        {"Delete", "Delete"},
        {"Download", "Download"},
        {"Rename", "Rename"},
        {"SortBy", "SortBy"},
        {"Refresh", "Refresh"},
        {"Selection", "Selection"},
        {"View", "View"},
        {"Details", "Details"}
    };

    public void DisableEnableSelectedItems(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Fields> args, bool disable)
    {
        if (toolbarItems.TryGetValue(args.ItemData.Text, out var item))
        {
            if (disable)
            {
                this.File.DisableToolbarItems(new[] { item });
            }
            else
            {
                this.File.EnableToolbarItems(new[] { item });
            }
        }
    }
    public void DisableSelectedItems(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Fields> args)
    {
        DisableEnableSelectedItems(args, true);
    }

    public void EnableSelectedItems(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Fields> args)
    {
        DisableEnableSelectedItems(args, false);
    }
}

<style>
     /* Sample specific styles */
    .e-height-50 {
        height: 50%;
    }

    .e-width-45 {
        width: 45%;
        padding: 2px;
    }

    .e-width-55 {
        width: 55%;
    }

    .e-width-100 {
        width: 100%;
    }

    .bootstrap5 .e-filemanager .e-large-icons .e-list-img, .bootstrap5-dark .e-filemanager .e-large-icons .e-list-img,
    .bootstrap4 .e-filemanager .e-large-icons .e-list-img {
        border: none !important;
    }
    </style>
