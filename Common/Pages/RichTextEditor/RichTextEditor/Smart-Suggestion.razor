@page "/rich-text-editor/smart-suggestion"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.DropDowns
@inject IJSRuntime JS

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Rich Text Editor Smart Suggestion Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Smart Suggestion in Blazor Rich Text Editor Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
     <p>This example demonstrates how to easily apply formatting or insert media and tables in the Rich Text Editor content using the Mention component. To use it, simply type the slash (/) key in the editor and select the desired format from the suggestion list that appears.</p>
</SampleDescription>
<ActionDescription>
    <p>The @@mention component is integrated into the Rich Text Editor and shows the suggestion list when the slash (/) key is pressed in an editor and applies suggested formats. To achieve this, the sample is customized for the Mention and Rich Text Editor.</p>
    <ul>
        <li>Prevent the @@mention default selection action by setting the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs-1.html#Syncfusion_Blazor_DropDowns_MentionValueSelectingEventArgs_1_Cancel'>args.Cancel</a> as <code>true</code> at the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.DropDowns.SfMention-1.html#Syncfusion_Blazor_DropDowns_SfMention_1_ValueSelecting'>ValueSelecting</a> event.</li>
        <li>Get the command name from the Mention component, select an event, and pass it to the public method <a target='_blank' href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_ExecuteCommandAsync_Syncfusion_Blazor_RichTextEditor_CommandName_">ExecuteCommandAsync</a> to perform the specified formats on the selected text in an editor.</li>
    </ul>
    <p> The following formats are shown in the mention suggestion list; apply them in an editor.</p>
    <ul>
        <li><code>Basic blocks</code> - The Rich Text Editor supports basic text formatting blocks, including <code>paragraph</code>, <code>headings</code>, <code>code</code>,<code>quotation</code>, <code>lists</code>, and <code>table</code> making it easier for users to structure their content. When a user selects a basic block format, it will be applied to the next line or paragraph.</li>
        <li><code>Inline formats</code> - The Rich Text Editor supports inline formatting, allowing you to add <code>emojis</code> to the specific text within the content.</li>
        <li><code>Media formats</code> -  The Rich Text Editor also supports media formats, including <code>image</code>, <code>video</code>, and <code>audio</code> making it an efficient tool for the content creation.</li>
    </ul>
</ActionDescription>
<div class="control-section" id="mention-inline-integration">
    <SfRichTextEditor ID="mentionFormatIntegration" @ref="rteObj" Placeholder="Type '/' and choose format">
     <RichTextEditorToolbarSettings Items="@Tools" />
    </SfRichTextEditor>
   
</div>
        <SfMention TItem="FormatData" Opening="@OnOpeningHandler" Filtering="@OnFilteringHandler" MentionChar="@FormatChar" ValueSelecting="@OnValueSelectingHandler" Target="#mentionFormatIntegration .e-rte-content .e-content" DataSource="@EmailData" AllowSpaces="true" PopupHeight="290px" PopupWidth="330px">
            <ItemTemplate>
                <table class="format-table">
                    <tr>
                        <td>
                            <span class="@((context as FormatData).Icon)" id="icons"></span>
                        </td>
                        <td>
                            <span class="font">@((context as FormatData).FormatName)</span>
                            <span class="description">@((context as FormatData).Description)</span>
                        </td>
                    </tr>
                </table>
            </ItemTemplate>
            <ChildContent>
                <MentionFieldSettings Text="FormatName" GroupBy="FormatType"></MentionFieldSettings>
            </ChildContent>
        </SfMention>
    <SfDialog @bind-Visible="@dialogVisible" ZIndex="1000" ShowCloseIcon="false" IsModal="true" Width="50%" Target="#mention-inline-integration">
    <DialogTemplates>
        <Header> Insert Emoticons </Header>
        <Content>
            <div id="rteEmoticons-smiley">
                @for (int i = 0; i < this.smileyList.Count; i++)
                {
                    int index = i;
                    if (currentIndex == i)
                    {
                        <div class="char_block @activeClass" title="@this.smileyList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index , 0))">
                            @((MarkupString)this.smileyList.Keys.ToList()[index])
                        </div>
                    }
                    else
                    {
                    <div class="char_block" title="@this.smileyList.Values.ToList()[index]" @onclick="@(e => OnIconIconClick(index, 0))">
                        @((MarkupString)this.smileyList.Keys.ToList()[index])
                    </div>
                    }
                }
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Insert" IsPrimary="true" OnClick="OnInsert" Disabled="@disableInsertBtn" />
        <DialogButton Content="Cancel" OnClick="DialogOverlay" />
    </DialogButtons>
    <DialogEvents OnOverlayModalClick="DialogOverlay" Opened="OnOpen"/>
</SfDialog>

<style>

    .e-icons.block-view:before {
        content: open-quote;
        font-size: 30px;
        line-height: 20px;
    }

    .e-icons.e-text:before{
        content: 'T';
    }

    .e-icons.h1-view:before {
        content: 'H1';
    }

    .e-icons.h2-view:before {
        content: 'H2';
    }

    .e-icons.h3-view:before {
        content: 'H3';
    }

    .e-icons.h4-view:before {
        content: 'H4';
    }

    .e-icons.emoji:before {
        content: 'ðŸ™‚';
    }

    .format-table .description {
        display: block;
        line-height: 20px;
        font-size: 12px;
        padding: 1px 0px 5px 0px;
    }
    .format-table .font {
        font-size: 16px;
        display: block;
        line-height: 20px;
        padding: 5px 0px 1px 0px;
    }

    .format-table .e-icons.emoji {
        padding: 15px 12px !important;
    }

    .format-table #icons {
        padding: 15px 15px;
        display: inline-block;
        width: 55px;
        font-size: 20px;
        line-height: 0px;
    }

    .e-icons.e-image, .e-icons.e-audio, .e-icons.e-table, .e-icons.e-video,
    .e-icons.e-list-unordered, .e-icons.e-list-ordered{
        line-height: 10px !important;
    }

    #mentionFormatIntegration .e-mention-chip {
        cursor: pointer;
    }

    #rteEmoticons-smiley, #rteEmoticons-animal {
        padding: 15px 0 15px 15px;
    }

    .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material .char_block.e-active {
        outline: 1px solid #e3165b;
        border-color: #e3165b;
    }

    .material-dark .char_block.e-active {
        outline: 1px solid #56a4fd;
        border-color: #56a4fd;
    }

    .fabric .char_block.e-active,
    .fabric-dark .char_block.e-active {
        outline: 1px solid #0078d6;
        border-color: #0078d6;
    }

    .bootstrap4 .char_block.e-active {
        outline: 1px solid #007bff;
        border-color: #007bff;
    }
    
    .bootstrap .char_block.e-active,
    .bootstrap-dark .char_block.e-active {
        outline: 1px solid #317ab9;
        border-color: #317ab9;
    }

    .highcontrast .char_block.e-active {
        outline: 1px solid #ffd939;
        border-color: #ffd939;
    }

    .tailwind .char_block.e-active {
        outline: 1px solid #3730a3;
        border-color: #3730a3;
    }

    .tailwind-dark .char_block.e-active {
        outline: 1px solid #22d3ee;
        border-color: #22d3ee;
    }

    .bootstrap5 .char_block.e-active,
    .bootstrap5-dark .char_block.e-active {
        outline: 1px solid #0D6EFD;
        border-color: #0D6EFD;
    }
    .fluent .char_block.e-active,
    .fluent-dark .char_block.e-active {
        outline: 1px solid #0078DE;
        border-color: #0078DE;
    }
    .char_block {
        width: 30px;
        height: 30px;
        line-height: 30px;
        margin: 0 5px 5px 0;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #DDDDDD;
        font-size: 20px;
        cursor: pointer;
        user-select: none;
        display: inline-block;
    }

    #rteEmoticons-smiley{
        padding: 15px 0 15px 15px;
    }

    @@media (min-width: 320px) and (max-width: 480px) {
        #rteEmoticons-smiley, #rteEmoticons-animal {
            padding: 15px 0 15px 0px;
        }
        .e-dialog .e-footer-content {
            display: flex;
        }
    }

    .bootstrap4 #emotIcons.e-tab .e-tab-header .e-toolbar-item .e-text-wrap:not(.e-horizontal-bottom),
    .bootstrap4 #emotIcons.e-tab .e-tab-header .e-toolbar-item.e-active .e-text-wrap:not(.e-horizontal-bottom) {
        height: 32px;
    }
</style>

@code {
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    private char FormatChar { get; set; } = '/';
    SfRichTextEditor rteObj;
    string activeClass = "e-active";
    private bool dialogVisible { get; set; } = false;
    private bool disableInsertBtn { get; set; } = true;
    int currentIndex { get; set; } = -1;
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };


    public class FormatData{  
        public string FormatName { get; set; }
        public string Command { get; set; }
        public string FormatType { get; set;}
        public string Icon { get; set;}
        public string Description{ get; set; }
    }
    List<FormatData> EmailData = new List<FormatData> {
        new FormatData{ FormatName= "Text", Command= "P", FormatType= "Basic blocks", Icon= "e-btn-icon e-text e-icons", Description= "Writing with paragraphs"},
        new FormatData{ FormatName= "Quotation", Command= "BlockQuote", FormatType= "Basic blocks", Icon= "e-icons block-view", Description= "Insert a quote or citation"},
        new FormatData { FormatName= "Heading 1", Command= "H1", FormatType= "Basic blocks", Icon= "e-icons h1-view", Description= "Use this for a top level heading" },
        new FormatData { FormatName= "Heading 2", Command= "H2", FormatType= "Basic blocks", Icon= "e-icons h2-view", Description= "Use this for key sections" },
        new FormatData { FormatName= "Heading 3", Command= "H3", FormatType= "Basic blocks", Icon= "e-icons h3-view", Description= "Use this for sub sections and group headings" },
        new FormatData { FormatName= "Heading 4", Command= "H4", FormatType= "Basic blocks", Icon= "e-icons h4-view", Description= "Use this for deep headings" },
        new FormatData { FormatName= "Numbered list", Command= "OL", FormatType= "Basic blocks", Icon= "e-icons e-list-ordered icon", Description= "Create an ordered list" },
        new FormatData { FormatName= "Bulleted list", Command= "UL", FormatType= "Basic blocks", Icon= "e-icons e-list-unordered icon", Description= "Create an unordered list" },
        new FormatData { FormatName= "Table", Command= "CreateTable", FormatType= "Basic blocks", Icon= "e-icons e-table icon", Description= "Insert a table" },
        new FormatData { FormatName= "Emoji", Command= "Emoji", FormatType= "Inline", Icon= "e-icons emoji", Description= "Use emojis to express ideas and emoticons" },
        new FormatData { FormatName= "Image", Command= "Image", FormatType= "Media", Icon= "e-icons e-image icon", Description= "Add image to your page" },
        new FormatData { FormatName= "Audio", Command= "Audio", FormatType= "Media", Icon= "e-icons e-audio icon", Description= "Add audio to your page" },
        new FormatData { FormatName= "Video", Command= "Video", FormatType= "Media", Icon= "e-icons e-video icon", Description= "Add video to your page"}
      };

    private async Task OnValueSelectingHandler(MentionValueSelectingEventArgs<FormatData> args) {
        args.Cancel = true;
        await this.rteObj.FocusIn();
        await this.rteObj.RestoreSelectionAsync();
        if(args.ItemData.FormatType != "Inline"){
            beforeApplyFormat();
        }
        if (args.ItemData.Command == "OL")
        {
            await this.rteObj.ExecuteCommandAsync(CommandName.InsertOrderedList);
        }
        else if (args.ItemData.Command == "UL")
        {
            await this.rteObj.ExecuteCommandAsync(CommandName.InsertUnorderedList);
        }
        else if (args.ItemData.Command == "CreateTable")
        {
            await this.rteObj.ShowDialogAsync(DialogType.InsertTable);
        }
        else if (args.ItemData.Command == "Emoji")
        {
            this.dialogVisible = true;
            await this.rteObj.SaveSelectionAsync();
        }
        else if (args.ItemData.Command == "Image")
        {
            await this.rteObj.ShowDialogAsync(DialogType.InsertImage);
        }
        else if (args.ItemData.Command == "Audio")
        {
            await this.rteObj.ShowDialogAsync(DialogType.InsertAudio);
        }
        else if (args.ItemData.Command == "Video")
        {
            await this.rteObj.ShowDialogAsync(DialogType.InsertVideo);
        }
        else
        {
            await this.rteObj.ExecuteCommandAsync(CommandName.FormatBlock, args.ItemData.Command);
        }

    }

    private async Task OnOpen()
    {        
        this.currentIndex = 0;
        this.disableInsertBtn = false;
    }

    public async Task OnOpeningHandler(MentionOpeningEventArgs args) {
        await this.rteObj.SaveSelectionAsync();
    }

    public async Task beforeApplyFormat()
    {
        await JsRuntime.InvokeVoidAsync("beforeApplyFormat", "mentionFormatIntegration", true);
    }
    
    public async Task OnFilteringHandler(MentionFilteringEventArgs<FormatData> args){
Â Â Â Â Â Â Â  await this.rteObj.SaveSelectionAsync();
Â Â Â  }
    Dictionary<string, string> smileyList = new Dictionary<string, string>()
    {
        {"&#128512;" ,"Grinning face"},
        {"&#128513;","Grinning face with smiling eyes" },
        {"&#128514;" ,"Face with tears of joy"},
        {"&#128515;","Smiling face with open mouth"},
        {"&#128516;" ,"Smiling face with open mouth and smiling eyes"},
        {"&#128517;","Smiling face with open mouth and cold sweat" },
        {"&#128518;" ,"Smiling face with open mouth and tightly-closed eyes"},
        {"&#128519;","Smiling face with halo" },
        {"&#128520;" ,"Smiling face with hornsSmiling face with horns"},
        {"&#128521;","Winking face" },
        {"&#128522;" ,"Smiling face with smiling eyes"},
        {"&#128523;","Face savouring delicious food"},
        {"&#128524;" ,"Relieved face"},
        {"&#128525;","Smiling face with heart-shaped eyes" },
        {"&#128526;" ,"Smiling face with sunglasses"},
        {"&#128527;","Smirking face" },
        {"&#128528;" ,"Neutral face"},
        {"&#128529;","Expressionless face" },
        {"&#128530;" ,"Unamused face"},
        {"&#128531;","Face with cold sweat" },
        {"&#128532;" ,"Pensive face"},
        {"&#128533;","Confused face" },
        {"&#128534;" ,"Confounded face"},
        {"&#128535;","Kissing face" },
        {"&#128536;" ,"Face throwing a kiss"},
        {"&#128537;","Kissing face with smiling eyes" },
        {"&#128538;" ,"Kissing face with closed eyes"},
        {"&#128539;","Face with stuck-out tongue" },
        {"&#128540;" ,"Face with stuck-out tongue and winking eye"},
        {"&#128541;","Face with stuck-out tongue and tightly-closed eyes" },
        {"&#128053", "Monkey Face"},
        {"&#128018", "Monkey"},
        {"&#129421", "Gorilla"},
        {"&#128054", "Dog Face"},
        {"&#128021", "Dog"},
        {"&#128041", "Poodle"},
        {"&#128058", "Wolf Face"},
        {"&#129418", "Fox Face"},
        {"&#128049", "Cat Face"},
        {"&#128008", "Cat"},
        {"&#129409", "Lion Face"},
        {"&#128047", "Tiger Face"},
        {"&#128005", "Tiger"},
        {"&#128006", "Leopard"},
        {"&#128052", "Horse Face"},
        {"&#128014", "Horse"},
        {"&#129412", "Unicorn Face"},
        {"&#129420", "Deer"},
        {"&#128046", "Cow Face"},
        {"&#128002", "Ox"},
        {"&#128003", "Water Buffalo"},
        {"&#128004", "Cow"},
        {"&#128055", "Pig Face"},
        {"&#128022", "Pig"},
        {"&#128023", "Boar"},
        {"&#128061", "Pig Nose"},
        {"&#128015", "Ram"},
        {"&#128017", "Ewe"},
        {"&#128016", "Goat"},
        {"&#128042", "Camel"},

    };

    private async Task OnInsert()
    {
        if (this.currentIndex > -1)
        {
            string value = this.smileyList.Keys.ToList()[this.currentIndex];
            await this.rteObj.RestoreSelectionAsync();
            await JsRuntime.InvokeVoidAsync("onInsertEmotSlashRemove");
            await this.rteObj.ExecuteCommandAsync(CommandName.InsertHTML, value);
            this.dialogVisible = false;
            this.currentIndex = -1;
        }
        this.disableInsertBtn = true;
    }
    private void DialogOverlay()
    {
        this.dialogVisible = false;
        this.currentIndex = -1;
    }
    private void OnIconIconClick(int index, int tabIndex)
    {
        this.disableInsertBtn = false;
        this.currentIndex = index;
    }
}
