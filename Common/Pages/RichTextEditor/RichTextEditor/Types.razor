
@page "/rich-text-editor/types"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.RichTextEditor

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Rich Text Editor Toolbar Type Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Toolbar Type in Blazor Rich Text Editor Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the various display modes supported by the Rich Text Editor's Toolbar. Change the Toolbar type to see how the toolbar arranges items when they don't fit in the viewing area.</p>
</SampleDescription>
<ActionDescription>
    <p>The Rich Text Editor allows supports to set different display modes using <code>Type</code> property of <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.RichTextEditorToolbarSettings.html">RichTextEditorToolbarSettings</a>. The possible types are as follows,</p>
    <ul>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_Expand">Expand</a> - The Toolbar hides the overflowing items in the next row. Click the expand arrow to view the overflowing Toolbar items.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_MultiRow">MultiRow</a> - The Toolbar shows the overflowing items in the next row.</li>
        <li><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.ToolbarType.html#Syncfusion_Blazor_RichTextEditor_ToolbarType_Scrollable">Scrollable</a> -  The Toolbar displays all the items in a single line with horizontal scrolling enabled when commands overflow to available space.</li>
    </ul>
</ActionDescription>

<div class="col-lg-8 control-section">
    <div class="">
        <SfRichTextEditor>
            <p>The Rich Text Editor is a WYSIWYG ("what you see is what you get") editor useful to create and edit content and return the valid HTML markup or markdown of the content.</p>

            <p><b>Toolbar</b></p>

            <ol>
                <li>
                    <p>The Toolbar contains commands to align the text, insert a link, insert an image, insert list, undo/redo operations, HTML view, etc </p>
                </li>
                <li>
                    <p>The Toolbar is fully customizable. </p>
                </li>
            </ol>

            <p><b>Links</b></p>
            <ol>
                <li>
                    <p>You can insert a hyperlink with its corresponding dialog. </p>
                </li>
                <li>
                    <p>Attach a hyperlink to the displayed text. </p>
                </li>
                <li>
                    <p>Customize the quick toolbar based on the hyperlink. </p>
                </li>
            </ol>

            <p><b>Validation</b></p>
            <ul>
                <li>
                    <p>The editor’s content can be validated on form submission by applying validation rules and validation message.</p>
                </li>
            </ul>

            <p><b>Locale.</b></p>
            <ul>
                <li>
                    <p>The editor provides an option to localize its static strings to adapt the editor to a local language.</p>
                </li>
            </ul>

            <p><b>Image.</b></p>
            <ol>
                <li>
                    <p>Allows you to insert images from an online source as well as the local computer. </p>
                </li>
                <li>
                    <p>You can upload an image. </p>
                </li>
                <li>
                    <p>Provides an option to customize the quick toolbar for an image. </p>
                </li>
            </ol>
            <img alt="Logo" src="@(SampleService.WebAssetsPath + "images/rich-text-editor/rte-image-feather.png")" />
            <RichTextEditorToolbarSettings Type="@Tooltype" Items="@Tools" />
        </SfRichTextEditor>
    </div>
</div>

<div class="col-lg-4 property-section">
    <div id="property" title="Properties">
        <table id="property" title="Properties">
            <tbody>
                <tr>
                    <td>
                        <div> Toolbar Type </div>
                    </td>
                    <td>
                        <div style="width: 200px">
                            <SfDropDownList TItem="ToolbarOption" TValue="ToolbarType" PopupHeight="200px" @bind-Value="@DropValue" DataSource="@Options">
                                <DropDownListFieldSettings Text="text" Value="value" />
                                <DropDownListEvents TValue="ToolbarType" TItem="ToolbarOption" ValueChange="valueChange" />
                            </SfDropDownList>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<style>
    .property-section table td {
        width: 50%;
    }

    .property-section table div {
        padding-left: 10px;
        padding-top: 35px;
    }

    @@media print {
        a, a:visited {
            color: blue !important;
            text-decoration: underline;
        }

        a[href^="javascript:"]:after, a[href^="#"]:after {
            content: "";
        }

        a[href]:after {
            content: "";
        }
    }
</style>

@code{

    private ToolbarType Tooltype = ToolbarType.Expand;
    private ToolbarType DropValue { get; set; } = ToolbarType.Expand;
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private class ToolbarOption
    {
        public ToolbarType value { get; set; }
        public string text { get; set; }
    }

    private List<ToolbarOption> Options = new List<ToolbarOption>() 
    {
        new ToolbarOption(){ value= ToolbarType.Expand, text= "Expand" },
        new ToolbarOption(){ value= ToolbarType.MultiRow, text= "Multi Row" },
        new ToolbarOption(){ value= ToolbarType.Scrollable, text= "Scrollable" }
    };

    private void valueChange(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<ToolbarType, ToolbarOption> args) {
        this.Tooltype = args.ItemData.value;
        StateHasChanged();
    }
}
