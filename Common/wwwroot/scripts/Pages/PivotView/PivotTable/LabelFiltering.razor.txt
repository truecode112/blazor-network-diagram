@page "/pivot-table/label-filtering"

@using Syncfusion.Blazor.PivotView
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@inherits SampleBaseComponent;
@using BlazorDemos
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Pivot Table Label Filtering Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Label Filtering in Blazor Pivot Table Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates filtering row and column headers based on their text. The different conditions that can be applied to the text are equals, begins with, ends with, contains, etc.</p>
</SampleDescription>
<ActionDescription>
      <p>In this sample, any field can be selected from the <b>Fields</b> dropdown list. Further, choose an option from the <b>Conditions</b> dropdown list, enter the values in <b>Value1</b> and <b>Value2</b> input textbox and apply the same to view the field headers filtered based on the text.</p>
  
    <p>
        Label filtering can be applied either through code-behind or UI. To achieve this in code-behind, set the <a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotViewDataSourceSettings-1.html#Syncfusion_Blazor_PivotView_PivotViewDataSourceSettings_1_AllowLabelFilter'>AllowLabelFilter</a> property in <a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotViewDataSourceSettings-1.html'>PivotViewDataSourceSettings</a> to <b>true</b> and use the
        <a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotViewFilterSetting.html'>PivotViewFilterSetting</a> in the pivot table along with the following properties.
    </p>
    <table>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;width:100px'><a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFilterSetting.html#Syncfusion_Blazor_PivotView_PivotFilterSetting_Name'>Name :</a> </td>
            <td> Specifies the normal field.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'><a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFilterSetting.html#Syncfusion_Blazor_PivotView_PivotFilterSetting_Type'>Type :</a> </td>
            <td> Specifies the filter type and it should be "Label" in this scenario.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'><a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFilterSetting.html#Syncfusion_Blazor_PivotView_PivotFilterSetting_Condition'>Condition :</a> </td>
            <td> Specifies the operator type like equals, greater than, less than, etc.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'> <a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFilterSetting.html#Syncfusion_Blazor_PivotView_PivotFilterSetting_Value1'>Value1 :</a> </td>
            <td> Gets the text to view the filter result.  For example, select "DoesNotEquals" and enter "Germany" to exclude this country.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>  <a target='_blank' class='code' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PivotView.PivotFilterSetting.html#Syncfusion_Blazor_PivotView_PivotFilterSetting_Value2'>Value2 :</a></td>
            <td> For conditions like &#34;between&#34; and &#34;not between&#34;, this option will be enabled. Enter both start and end text to view the filter result. For example, enter "Germany" and "States" to filter the countries within this range.</td>
        </tr>
    </table>
    <br />
     <p>To achieve label filtering through UI, navigate to <b>"User Interaction > Field List"</b> sample and open the filter dialog to experience the same. For API details, refer to the <b>"Field List"</b> sample description.</p>



    <p>More information on the label filtering feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/pivot-table/filtering/#label-filtering'>documentation section</a>.</p>
</ActionDescription>

 <div class="col-lg-8 control-section sb-property-border">
    <div class="content-wrapper">
        <SfPivotView TValue="PivotProductDetails" @ref="pivot" Height="400" Width="100%" ShowGroupingBar=false EnableValueSorting=true ShowTooltip=false>
            <PivotViewDataSourceSettings DataSource="@data" ExpandAll=false EnableSorting=true AllowLabelFilter=true AllowMemberFilter=false >
                <PivotViewColumns>
                    <PivotViewColumn Name="Year"></PivotViewColumn>
                </PivotViewColumns>
                <PivotViewRows>
                    <PivotViewRow Name="Country"></PivotViewRow>
                    <PivotViewRow Name="Products"></PivotViewRow>
                </PivotViewRows>
                <PivotViewValues>
                    <PivotViewValue Name="In_Stock" Caption="In Stock"></PivotViewValue>
                    <PivotViewValue Name="Sold" Caption="Units Sold"></PivotViewValue>
                    <PivotViewValue Name="Amount" Caption="Sold Amount"></PivotViewValue>
                </PivotViewValues>
                <PivotViewFilters>
                    <PivotViewFilter Name="Product_Categories" Caption="Product Categories"></PivotViewFilter>
                </PivotViewFilters>               
                <PivotViewFormatSettings>
                    <PivotViewFormatSetting Name="Amount" Format="C0" UseGrouping=true></PivotViewFormatSetting>
                </PivotViewFormatSettings>
            </PivotViewDataSourceSettings>
            <PivotViewGridSettings ColumnWidth="120"></PivotViewGridSettings>            
        </SfPivotView>
    </div>
</div>
  <div class="col-lg-4 property-section pivottable-property-section">
        <div class="property-panel-section">
        <div class="property-panel-header" style="padding-bottom:0px; font-size:16px">Properties</div>
        <div class="property-panel-content">
            <table id="property" style="width: 100%;height:100%;" class="property-panel-table">
                <tbody>                    
                    <tr style="height: 50px">
                        <td style="padding-right: 10px;">
                            <div>
                                Fields:
                            </div>
                        </td>
                        <td>
                            <div>
                                <SfDropDownList TValue="string" Placeholder="Country" TItem="string" @bind-Value="selectedField" DataSource="@dropDownData" >
                                    <DropDownListEvents TValue="string" TItem="string" ValueChange="ChangeField"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                      <tr style="height: 50px">
                        <td style="padding-right: 10px;">
                            <div>
                                Condition:
                            </div>
                        </td>
                        <td>
                            <div>
                              <SfDropDownList TValue="Operators" Placeholder="Equals" TItem="OperatorData" @bind-Value="selectedCondition" DataSource="@conditionalData" >
                                    <DropDownListFieldSettings Value="Name" Text="ID"></DropDownListFieldSettings>
                                    <DropDownListEvents TValue="Operators" TItem="OperatorData" ValueChange="ChangeCondition"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr style="height: 50px">
                        <td style="padding-right: 10px;">
                            <div>
                                Value 1:
                            </div>
                        </td>
                        <td>                        
                           <div class="textcls">
                                <SfTextBox @bind-Value="@value1" Input="@InputHandler1"  Placeholder="Example: France">                                   
                                </SfTextBox>                                
                           </div>
                        </td>
                    </tr>
                    @if(showCondition2)
                    {
                         <tr style="height: 50px">
                        <td style="padding-right: 10px;">
                            <div>
                                Value 2:
                            </div>
                        </td>
                        <td>                        
                               <div class="textcls">
                                    <SfTextBox  @bind-Value="@value2" Input="@InputHandler2"  Placeholder="Example: United States"></SfTextBox>                                
                            </div>
                        </td>
                    </tr>
                    }
                    <tr style="height: 50px">
                        <td></td>
                        <td>
                            <div style="float:right">
                                <SfButton IsPrimary="true" Disabled="@disableButton"  OnClick="OnApply">Apply</SfButton>
                                <SfButton IsPrimary="false"  OnClick="@OnClear" >Clear</SfButton>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
            </div>
        </div>
    </div>

    <style>
        .e-pivotview {
            min-height: 200px;
        }

        .e-pivottable .e-static {
            width: 80% !important;
        }

        .property-panel-table td {
            width: auto;
        }

        .property-panel-table div {
            padding-left: unset;
        }
    </style>

@code{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private SfPivotView<PivotProductDetails> pivot;  
    private List<PivotProductDetails> data { get; set; }
    private int selectedIndex = 0;
    private string selectedField = "Country";
    private Operators selectedCondition = Operators.DoesNotEquals;   
    private bool showCondition2 = false;   
    private bool disableButton = true;
    private string value1 = string.Empty;
    private string value2 = string.Empty;    
    @*Hidden:Lines*@
#pragma warning disable BL0005
    @*End:Hidden*@
    private string[]  dropDownData = { "Country", "Products", "Year" };      
    private List<OperatorData> conditionalData = new List<OperatorData>()
    {
        new OperatorData() { ID = "Equals", Name = Operators.Equals },
        new OperatorData() { ID = "Not Equals", Name = Operators.DoesNotEquals },
        new OperatorData() { ID = "Greater Than", Name = Operators.GreaterThan },
        new OperatorData() { ID= "Greater Than Or Equal To", Name = Operators.GreaterThanOrEqualTo },
        new OperatorData() { ID = "Less Than", Name = Operators.LessThan },
        new OperatorData() { ID = "Less Than Or Equal To", Name = Operators.LessThanOrEqualTo },
        new OperatorData() { ID = "Between", Name = Operators.Between },
        new OperatorData() { ID = "Not Between", Name = Operators.NotBetween },
        new OperatorData() { ID = "Contains", Name = Operators.Contains },
        new OperatorData() { ID = "Does not Contain", Name = Operators.DoesNotContains },
        new OperatorData() { ID = "Begin With", Name = Operators.BeginWith },
        new OperatorData() { ID = "Does Not Begin With", Name = Operators.DoesNotBeginWith },
        new OperatorData() { ID = "Ends With", Name = Operators.EndsWith },
        new OperatorData() { ID = "Does Not Ends With", Name = Operators.DoesNotEndsWith }         
    };
    public List<PivotViewFilterSetting> FilterSettings = new List<PivotViewFilterSetting>()
    {
        new PivotViewFilterSetting(){Name = "Country",Type = Syncfusion.Blazor.PivotView.FilterType.Label ,Condition = Operators.DoesNotEquals, Value1 = string.Empty , Value2 = string.Empty },
        new PivotViewFilterSetting(){Name = "Products" , Type = Syncfusion.Blazor.PivotView.FilterType.Label, Condition = Operators.DoesNotEquals, Value1 = string.Empty , Value2 = string.Empty},
        new PivotViewFilterSetting (){Name = "Year" ,Type = Syncfusion.Blazor.PivotView.FilterType.Label, Condition = Operators.DoesNotEquals, Value1 = string.Empty , Value2 = string.Empty }
    }; 
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        data = PivotProductDetails.GetProductData();
    }
    private void ChangeField(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {        
        selectedIndex = args.Value == "Products" ? 1 : args.Value == "Year" ? 2 : 0;
        FilterSettings[selectedIndex].Condition = selectedCondition;
        value1 = FilterSettings[selectedIndex].Value1;
        value2 = FilterSettings[selectedIndex].Value2;       
    }
    private void ChangeCondition(Syncfusion.Blazor.DropDowns.ChangeEventArgs<Operators, OperatorData> args)
    {
        showCondition2 = args.Value == Operators.Between || args.Value == Operators.NotBetween ? true : false;
        FilterSettings[selectedIndex].Condition = selectedCondition;
    }
    private void InputHandler1(InputEventArgs args)
    {
        disableButton = string.IsNullOrEmpty(args.Value) ? true : showCondition2 ? string.IsNullOrEmpty(value2) : false;
        FilterSettings[selectedIndex].Value1 = args.Value;
    }
    private void InputHandler2(InputEventArgs args)
    {        
        disableButton = string.IsNullOrEmpty(args.Value) ? true : string.IsNullOrEmpty(value1);
        FilterSettings[selectedIndex].Value2 = args.Value;
    }
    private void OnApply(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {        
        pivot.DataSourceSettings.FilterSettings = FilterSettings;        
    }
    private void OnClear(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {        
        foreach(PivotViewFilterSetting Filter in FilterSettings)
        {            
            Filter.Value1 =  Filter.Value2 = string.Empty;           
        }
        value1 = value2 = string.Empty;
        pivot.DataSourceSettings.FilterSettings = new List<PivotViewFilterSetting>();
    }
@*Hidden:Lines*@
#pragma warning restore BL0005
@*End:Hidden*@    
    public class DataID
    {
        public string ID { get; set; }
        public string Name { get; set; }
    }
    public class OperatorData
    {
        public string ID { get; set; }
        public Operators Name { get; set; }
    }
}