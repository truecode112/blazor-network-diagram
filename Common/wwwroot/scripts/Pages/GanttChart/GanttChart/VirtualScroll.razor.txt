@page "/gantt-chart/virtual-scroll"
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.DropDowns
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Gantt Chart Virtual Scrolling Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Virtual Scrolling in Blazor Gantt Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the virtual scroll support in Gantt Chart. It allows users to load a large amount of data effectively and reduces the DOM element’s weight by virtually updating DOM.</p>
</SampleDescription>
<ActionDescription>
    <p>Virtualization support is used to render many tasks, columns, and larger timelines in Gantt Chart with an effective performance.</p>
    <p>In this mode, all the tasks are initially fetched from the data source, and only a few records and columns are rendered in DOM, which is compact to the current viewport area. While vertical scrolling, tasks are updated in the DOM as per the current viewport position. Similarly, the timeline rendered in DOM only thrice of the Gantt Chart width. While other timeline cells render on-demand during horizontal scrolling. Also, columns render on-demand, during horizontal scrolling on the grid side. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_EnableVirtualization'>EnableVirtualization</a> property to true to enable row and timeline virtualization. Set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_EnableColumnVirtualization'>EnableColumnVirtualization</a> property to true to enable column virtualization.</p>
    <p>In this demo, Gantt enabled row, column, and timeline virtualization. You can also perform the Edit action in this sample.</p>
    <p>More information on the virtual scroll can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/virtualization/'>documentation</a> section.</p>

</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div style="padding-bottom: 10px;">
                <span class="e-dddata">
                    <SfDropDownList TItem="DDData" TValue="string" PopupHeight="230px" Width="240px" @bind-Index="@index" DataSource="@DLData" Placeholder="e.g. 1000 Rows">
                        <DropDownListEvents TItem="DDData" TValue="string" ValueChange="Changedata" Closed="DropdownClose"></DropDownListEvents>
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </span>
                <span style="padding-left: 20px; font-size: 15px">
                    <b>Data initial load time: </b> @(runningTime.ToString() + " milliseconds")
                </span>
            </div>

            <SfGantt DataSource="@TaskCollection" Height="450px" Width="100%" AutoCalculateDateScheduling="@autoCalculateDateScheduling" TreeColumnIndex="1" EnableVirtualization="true" EnableColumnVirtualization="true" ProjectStartDate="ProjectStartDate" ProjectEndDate="ProjectEndDate"
                     Toolbar="@(new List<string>() { "Add", "Delete", "Edit", "ZoomIn", "ZoomOut" })" ScrollToTaskbarOnClick="true">
                <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
                <GanttTaskFields ParentID="ParentId" Work="Work" Id="ID" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress" TaskType="TaskType" Dependency="Predecessor">
                </GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="ID" HeaderText="TaskId" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="TaskName"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="Assignee" HeaderText="Assignee"></GanttColumn>
                    <GanttColumn Field="Reporter" HeaderText="Reporter"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="Priority" HeaderText="Priority"></GanttColumn>
                    <GanttColumn Field="Status" HeaderText="Status"></GanttColumn>
                    <GanttColumn Field="Work" HeaderText="Work"></GanttColumn>
                    <GanttColumn Field="TaskType" HeaderText="TaskType"></GanttColumn>
                    <GanttColumn Field="Shift" HeaderText="WorkShift"></GanttColumn>
                    <GanttColumn Field="StoryPoint" HeaderText="StoryPoint" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="ActualStartDate" HeaderText="ActualStartDate" Format="@DateFormat"></GanttColumn>
                    <GanttColumn Field="ActualEndDate" HeaderText="ActualEndDate" Format="@DateFormat"></GanttColumn>
                    <GanttColumn Field="WorkersCount" HeaderText="Resources Count" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="ApprovedBy" HeaderText="ApprovedBy"></GanttColumn>
                    <GanttColumn Field="FixVerison" HeaderText="FixVersion" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></GanttColumn>
                    <GanttColumn Field="PlatForm" HeaderText="PlatForm"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency"></GanttColumn>
                </GanttColumns>
                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Auto" ShowDeleteConfirmDialog="true">
                </GanttEditSettings>
                <GanttSplitterSettings Position="40%"></GanttSplitterSettings>
                <GanttEvents Created="OnGanttCreated" OnActionComplete="ActionCompleteHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>


@code {
    private SfGantt<TaskData> Obj { get; set; }
    private string DateFormat = "MM/dd/yyyy";
    private DateTime ProjectStartDate = new DateTime(2000, 1, 1);
    private DateTime ProjectEndDate = new DateTime(2025, 12, 31);
    private bool autoCalculateDateScheduling = false;
    public DateTime? StartAt { get; private set; }
    public DateTime? EndAt { get; private set; }
    public string runningTime = string.Empty;
    public int Value { get; set; } = 1000;
    private List<TaskData> TaskCollection { get; set; }
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        StartAt = DateTime.Now;
        this.TaskCollection = VirtualData.GetTreeVirtualData(1000);
    }
    private void OnGanttCreated(object sender)
    {
        autoCalculateDateScheduling = true;
        EndAt = DateTime.Now;
        TimeSpan ts = (TimeSpan)(EndAt - StartAt);
        runningTime = ts.TotalMilliseconds.ToString();
    }
    public void ActionCompleteHandler(GanttActionEventArgs<TaskData> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Gantt.Action.Refresh)
        {
            EndAt = DateTime.Now;
            TimeSpan ts = (TimeSpan)(EndAt - StartAt);
            runningTime = ts.TotalMilliseconds.ToString();
            autoCalculateDateScheduling = true;
        }
    }
    private int? index { get; set; } = 0;
    private int? PreviousIndex { get; set; } = 0;
    private void DropdownClose(@Syncfusion.Blazor.DropDowns.ClosedEventArgs args)
    {
        if (PreviousIndex != index)
        {
            StartAt = DateTime.Now;
            autoCalculateDateScheduling = false;
            this.TaskCollection = VirtualData.GetTreeVirtualData(Value);
            PreviousIndex = index;
        }
    }
    public void Changedata(@Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, DDData> args)
    {
        Value = Int32.Parse(args.Value);
    }
    public class DDData
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    public List<DDData> DLData = new List<DDData>() {
        new DDData(){ Text= "1,000 Rows", Value= "1000" },
        new DDData(){ Text= "2,500 Rows", Value= "2500" },
        new DDData(){ Text= "5,000 Rows", Value= "5000" },
    };
    public class VirtualData
    {
        public static List<TaskData> GetTreeVirtualData(int count)
        {
            List<TaskData> DataCollection = new List<TaskData>();
            Random rand = new Random();
            var x = 0;
            int duration = 0;
            DateTime startDate = new DateTime(2000, 1, 5);
            DateTime endDate = new DateTime(2000, 1, 12);
            string[] assignee = { "Allison Janney", "Bryan Fogel", "Richard King", "Alex Gibson" };
            string[] reporter = { "James Ivory", "Jordan Peele", "Guillermo del Toro", "Gary Oldman" };
            string[] priority = { "Normal", "High", "Low", "Ultra Critical" };
            string[] status = { "Validated", "InProgress", "Approved", "Completed" };
            string[] tasktype = { "FixedDuration", "FixedWork", "FixedUnit" };
            string[] shift = { "Noon Shift", "Night Shift", "Regular" };
            int[] storypoint = { 1, 2, 3, 4 };
            string[] fixversion = { "19.1", "19.2", "20.1", "20.2" };
            string[] approvedby = { "Margaret Buchanan", "Van Jack", "Fuller King", "Rose Fuller" };
            string[] platform = { "Blazor", "Angular", "EJ2", "EJ1" };
            for (var i = 1; i <= count / 5; i++)
            {
                var name = rand.Next(0, 100);
                TaskData Parent = new TaskData()
                    {
                        ID = ++x,
                        TaskName = "Task " + x,
                        StartDate = startDate,
                        EndDate = startDate.AddDays(26),
                        ActualStartDate = startDate,
                        ActualEndDate = endDate,
                        Duration = "20",
                        Assignee = "Mark Bridges",
                        Reporter = "Kobe Bryant",
                        Progress = rand.Next(100),
                        Priority = "High",
                        TaskType = "FixedWork",
                        Status = "Open",
                        Work = 16 + x,
                        Shift = "Regular",
                        StoryPoint = 5,
                        WorkersCount = 4,
                        FixVerison = "20.2",
                        ApprovedBy = "Van Jack",
                        PlatForm = "Blazor",
                        Predecessor = null
                    };
                DataCollection.Add(Parent);
                for (var j = 1; j <= 4; j++)
                {
                    startDate = startDate.AddDays(j == 1 ? 0 : duration + 2);
                    duration = 5;
                    DataCollection.Add(new TaskData()
                        {
                            ID = ++x,
                            TaskName = "Task " + x,
                            StartDate = startDate,
                            EndDate = startDate.AddDays(5),
                            ActualStartDate = startDate,
                            ActualEndDate = startDate.AddDays(5),
                            Duration = duration.ToString(),
                            Assignee = assignee[j - 1],
                            Reporter = reporter[j - 1],
                            Progress = rand.Next(100),
                            ParentId = Parent.ID,
                            Priority = priority[j - 1],
                            Status = status[j - 1],
                            Work = 96 + x,
                            TaskType = tasktype[(j - 1) % 3],
                            Shift = shift[(j - 1) % 3],
                            StoryPoint = storypoint[j - 1],
                            WorkersCount = 1,
                            FixVerison = fixversion[j - 1],
                            ApprovedBy = approvedby[j - 1],
                            PlatForm = platform[j - 1],
                            Predecessor = j > 1 ? (x - 1) + "FS" : ""
                        });
                }
            }
            return DataCollection;
        }
    }
    public class TaskData
    {
        public int ID { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public string Assignee { get; set; }
        public string Reporter { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public string Status { get; set; }
        public double? Work { get; set; }
        public int WorkersCount { get; set; }
        public string TaskType { get; set; }
        public string ApprovedBy { get; set; }
        public string Shift { get; set; }
        public string PlatForm { get; set; }
        public int StoryPoint { get; set; }
        public string Priority { get; set; }
        public string FixVerison { get; set; }
        public DateTime ActualStartDate { get; set; }
        public DateTime ActualEndDate { get; set; }
        public string Predecessor { get; set; }
    }
}
