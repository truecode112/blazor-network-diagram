@page "/gantt-chart/working-time-range"
@using Syncfusion.Blazor.Gantt
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Gantt Chart Work Time Range Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Work Time Range in Blazor Gantt Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample visualizes the support for changing the default timeline <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_DurationUnit'>DurationUnit</a> from day to hours. Tasks progress can be visualized in hourly basis.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to render a Gantt chart with the provided data source and customizable working hours in a day using <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttDayWorkingTime.html'>GanttDayWorkingTime</a>. Given duration in dataSource will be considered with this unit. Gantt chart supports following <code>DurationUnit</code> values:
        <ul>
            <li><code>Day</code></li>
            <li><code>Hour</code></li>
            <li><code>Minute</code></li>
        </ul>
    </p>
    <p>The working hours are different between organizations. This feature will be helpful to keep track of each task and resource task status based on the working time of the company.</p>
    <p>More information on the work time range can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/scheduling-tasks/#working-time-range'>documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt DataSource="@TaskCollection" Height="450px" Width="100%" HighlightWeekends="true" DurationUnit="DurationUnit.Hour"
                     AllowSelection="true" GridLines="GridLine.Both" TreeColumnIndex="1" ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 Dependency="Predecessor" ParentID="ParentId" Notes="Notes"></GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="TaskId" Width="100"></GanttColumn>
                    <GanttColumn Field="TaskName" Width="250" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date" MinWidth="120"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date" MinWidth="120"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration" MinWidth="120"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress" MinWidth="120"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency" MinWidth="200"></GanttColumn>
                    <GanttColumn Field="Notes" Width="100"></GanttColumn>
                </GanttColumns>
                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true" ShowDeleteConfirmDialog="true"></GanttEditSettings>
                <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
                <GanttSplitterSettings Position="28%"></GanttSplitterSettings>
                <GanttDayWorkingTimeCollection>
                    <GanttDayWorkingTime From="8" To="17"></GanttDayWorkingTime>
                </GanttDayWorkingTimeCollection>
                <GanttTimelineSettings TimelineUnitSize="40">
                    <GanttTopTierSettings Unit="TimelineViewMode.Day" Format="ddd"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Hour"></GanttBottomTierSettings>
                </GanttTimelineSettings>
            </SfGantt>
        </div>
    </div>
</div>
<style>
html, body {
    height:100%;
}
</style>

@code{
    private DateTime ProjectStart = new DateTime(2021, 04, 02);
    private DateTime ProjectEnd = new DateTime(2021, 04, 06);
    private List<TaskData> TaskCollection { get; set; }
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        this.TaskCollection = ProjectNewData();
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }

        public string Duration { get; set; }
        public int Progress { get; set; }
        public string Predecessor { get; set; }
        public string Notes { get; set; }
        public int? ParentId { get; set; }
    }

    public static List<TaskData> ProjectNewData()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Product concept ",
            StartDate = new DateTime(2021, 04, 02),
            Duration = "5"
        },
        new TaskData() {
            TaskId = 2,
            TaskName = "Defining the product usage",
            StartDate = new DateTime(2021, 04, 02),
            Duration = "3",
            Progress = 30,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 3,
            TaskName = "Defining the target audience",
            Progress = 40,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 4,
            TaskName = "Prepare product sketch and notes",
            StartDate = new DateTime(2021, 04, 03),
            Duration = "2",
            Progress = 30,
            ParentId = 1,
            Predecessor="2"
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Concept approval",
            StartDate = new DateTime(2021, 04, 04),
            EndDate = new DateTime(2021, 04, 04),
            Duration="0",
            Predecessor="3,4",
        },
        new TaskData() {
            TaskId = 6,
            TaskName = "Market research",
            StartDate = new DateTime(2021, 04, 05),
            Duration = "4",
            Progress = 30,
        },
        new TaskData() {
            TaskId = 7,
            TaskName = "Demand analysis",
            Duration = "4",
            Progress = 40,
            ParentId = 6
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Customer strength",
            StartDate = new DateTime(2021, 04, 05),
            Duration = "4",
            Progress = 30,
            ParentId = 7,
            Predecessor="5"
        }, new TaskData() {
            TaskId = 9,
            TaskName = "Market opportunity analysis",
            StartDate = new DateTime(2021, 04, 05),
            Duration="4",
            ParentId= 7,
            Predecessor="5"
        },
        new TaskData() {
            TaskId = 10,
            TaskName = "Competitor analysis",
            StartDate = new DateTime(2021, 04, 05),
            Duration = "4",
            Progress = 30,
            ParentId= 6,
            Predecessor="7,8"
        },
        new TaskData() {
            TaskId = 11,
            TaskName = "Product strength analysis",
            StartDate = new DateTime(2021, 04, 06),
            Duration = "4",
            Progress = 40,
            ParentId = 6,
            Predecessor="9"
        },
        new TaskData() {
            TaskId = 12,
            TaskName = "Research completed",
            StartDate = new DateTime(2021, 04, 06),
            Duration = "0",
            Progress = 30,
            ParentId = 6,
            Predecessor="10"
        }
    };
        return Tasks;
    }
}