@page "/gantt-chart/column-template"
@using Syncfusion.Blazor.Gantt
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Gantt Chart Column Template Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Column Template in Blazor Gantt Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>A column template is used to customize the column’s look and appearance. The following example explains how to define the template in Gantt Chart column.</p>
</SampleDescription>
<ActionDescription>
    <p>The Gantt Chart provides a way to use a custom layout for each cell using the column template feature. By using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttColumn.html#Syncfusion_Blazor_Gantt_GanttColumn_Template'>Template</a> component of <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttColumn.html'>GanttColumn</a> component, custom content can be placed. Inside the Template, you can access the data using the implicit named parameter <code>Context</code>.</p>
    <p>In this demo, using column template, resource column has been presented with employee photo.</p>
    <p>More information about Column Template feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/columns/#column-template'>documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <div class="row">
        <div class="col-md-12">
            <SfGantt DataSource="@TaskCollection" Height="450px" Width="100%" RowHeight=60 TreeColumnIndex="1" ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd" WorkUnit="WorkUnit.Hour">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 ParentID="ParentId" TaskType="TaskType">
                </GanttTaskFields>
                <GanttColumns>
                    <GanttColumn Field="TaskId" HeaderText="ID"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Task Name" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
                    <GanttColumn Field="ResourceName" HeaderText="Resources" Width="220px">
                             <Template>
                                @{
                                    if ((context as TaskData).ResourceName != null)
                                    {
                                        var template = (context as TaskData);
                                       <div class="image">
                                        <img role="presentation" src="@UriHelper.ToAbsoluteUri($"{SampleService.WebAssetsPath}images/gantt/{template. ResourceName.Trim().Replace(" ","").ToLower()}.png")" />
                                        <div style="display:inline-block;width:100%;position:relative;left:30px">@(template.ResourceName)</div>
                                       </div>
                                    }
                                  }
                            </Template>
                    </GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                    <GanttColumn Field="TaskType" HeaderText="Task Type"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date"></GanttColumn>
                </GanttColumns>
                <GanttLabelSettings LeftLabel="TaskName" TValue="TaskData"></GanttLabelSettings>
                <GanttSplitterSettings Position="50%"></GanttSplitterSettings>
            </SfGantt>
        </div>
    </div>
</div>

@code{
    private DateTime ProjectStart = new DateTime(2021, 3, 23);
    private DateTime ProjectEnd = new DateTime(2021, 7, 28);
    private List<TaskData> TaskCollection { get; set; }
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        this.TaskCollection = GetTaskCollection();
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public string TaskType { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public string ResourceName { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2021, 03, 28),
            EndDate = new DateTime(2021, 07, 28),
            TaskType ="FixedDuration",
            Duration="4",
        },
        new TaskData() {
            TaskId = 2,
            TaskName = "Identify site location",
            StartDate = new DateTime(2021, 03, 29),
            Progress = 30,
            ParentId = 1,
            Duration="2",
            ResourceName= "Rose Fuller"
        },
        new TaskData() {
            TaskId = 3,
            TaskName = "Perform soil test",
            StartDate = new DateTime(2021, 03, 29),
            ParentId = 1,
            Duration="4",
            TaskType="FixedWork",
            ResourceName="Margaret Buchanan"
        },
        new TaskData() {
            TaskId = 4,
            TaskName = "Soil test approval",
            StartDate = new DateTime(2021, 03, 29),
            Duration = "1",
            Progress = 30,
            ParentId = 1,
            ResourceName="Fuller King",
            TaskType="FixedWork"
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2021, 03, 29),
            EndDate = new DateTime(2021, 04, 2),
            TaskType="FixedDuration",
            Duration="4"
        },
        new TaskData() {
            TaskId = 6,
            TaskName = "Develop floor plan for estimation",
            StartDate = new DateTime(2021, 03, 29),
            Duration = "3",
            Progress = 30,
            ParentId = 5,
            ResourceName="Van Jack",
            TaskType="FixedWork"
        },
        new TaskData() {
            TaskId = 7,
            TaskName = "List materials",
            StartDate = new DateTime(2021, 04, 01),
            Duration = "3",
            Progress = 30,
            ParentId = 5,
            TaskType="FixedWork",
            ResourceName="Martin Tamer"
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Estimation approval",
            StartDate = new DateTime(2021, 04, 01),
            Duration = "2",
            ParentId = 5,
            TaskType="FixedWork",
            ResourceName="Jack Davolio"
        },
        new TaskData() {
            TaskId = 9,
            TaskName = "Sign contract",
            StartDate = new DateTime(2021, 03, 31),
            EndDate = new DateTime(2021, 04, 01),
            Duration="1",
            TaskType="FixedWork",
            ResourceName="Jack Davolio"
        },
    };
        return Tasks;
    }
}
