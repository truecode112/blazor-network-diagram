@page "/gantt-chart/frozen-column"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Gantt Chart Frozen Columns Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the ExpandoObject Binding in Blazor Gantt Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the frozen columns feature of the Gantt Chart. Scroll the movable content horizontally on the grid side to view the frozen columns with the content.</p>
</SampleDescription>
<ActionDescription>
    <p>Also, add or remove the frozen columns dynamically by dragging and dropping the column freeze line separator to the desired column or programmatically changing the freeze direction as shown in the sample above.</p>
    <p>The freezing feature allows the user to freeze specific columns in the right or left direction to scroll through the grid's remaining movable content. This can be accomplished by setting the Gantt Column <a target='_blank' href=''>Freeze</a> property.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div class="e-switch-control">
                <label class="showhide" style="padding: 10px 15px 10px 10px"> Left Frozen Column </label>
                <SfDropDownList Width="110px" TValue="string" TItem="string" DataSource="@LeftColumns" @bind-Value="DropdownLeftValue">
                    <DropDownListEvents TValue="string" ValueChange="LeftFreeze" TItem="string"></DropDownListEvents>
                </SfDropDownList>
                <label class="showhide" style="padding: 10px 15px 10px 25px"> Right Frozen Column </label>
                <SfDropDownList Width="120px" TValue="string" TItem="string" DataSource="@RightColumns" @bind-Value="DropdownRightValue">
                    <DropDownListEvents TValue="string" ValueChange="RightFreeze" TItem="string"></DropDownListEvents>
                </SfDropDownList>
            </div>
            <SfGantt @ref="Gantt" DataSource="@TaskCollection" Height="450px" Width="100%" HighlightWeekends="true"
             Toolbar="@(new List<string>(){ "Add", "Edit", "Update", "Delete", "Cancel", "ExpandAll", "CollapseAll","Indent","Outdent"})"
             AllowSelection="true" GridLines="Syncfusion.Blazor.Gantt.GridLine.Both" TreeColumnIndex="1"
                     ProjectStartDate="@ProjectStart" ProjectEndDate="@ProjectEnd" FrozenColumns="@FrozenColumns">
        <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                         Dependency="Predecessor" ParentID="ParentId"></GanttTaskFields>
        <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true" ShowDeleteConfirmDialog="true"></GanttEditSettings>
                <GanttColumns>
                    <GanttColumn Field="TaskId" HeaderText="Task Id" Width="100" Visible="false"></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Job Name" MinWidth="250" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip" IsFrozen="@TaskNameFreeze" Freeze="@TaskNameDirection"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date" Width="180" IsFrozen="@StartDateFreeze" Freeze="@StartDateDirection"></GanttColumn>
                    <GanttColumn Field="EndDate" HeaderText="End Date" Width="180"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration" Width="180" IsFrozen="@DurationFreeze" Freeze="@DurationDirection"></GanttColumn>
                    <GanttColumn Field="Progress" HeaderText="Progress" Width="150" IsFrozen="@ProgressFreeze" Freeze="@ProgressDirection"></GanttColumn>
                    <GanttColumn Field="Predecessor" HeaderText="Dependency" Width="150" IsFrozen="@DependencyFreeze" Freeze="@DependencyDirection"></GanttColumn>
                </GanttColumns>
        <GanttLabelSettings LeftLabel="TaskName" TValue="GanttData.TaskData">
        </GanttLabelSettings>
        <GanttSplitterSettings Position="90%"> </GanttSplitterSettings>
    </SfGantt>
        </div>
    </div>
</div>
@code {
    private SfGantt<GanttData.TaskData> Gantt;
    private DateTime ProjectStart = new DateTime(2021, 3, 25);
    private DateTime ProjectEnd = new DateTime(2021, 7, 28);
    private List<GanttData.TaskData> TaskCollection { get; set; }
    private int FrozenColumns { get; set; } = 1;
    private bool TaskNameFreeze { get; set; } = true;
    private FreezeDirection TaskNameDirection { get; set; } = FreezeDirection.Left;
    private bool StartDateFreeze { get; set; } = false;
    private FreezeDirection StartDateDirection { get; set; }
    private bool DurationFreeze { get; set; } = false;
    private FreezeDirection DurationDirection { get; set; }
    private bool ProgressFreeze { get; set; } = true;
    private FreezeDirection ProgressDirection { get; set; } = FreezeDirection.Right;
    private bool DependencyFreeze { get; set; } = true;
    private FreezeDirection DependencyDirection { get; set; } = FreezeDirection.Right;
    private static List<string> RightColumns = new List<string>() { "Duration", "Progress", "Dependency" };
    private static List<string> LeftColumns = new List<string>() { "Job Name", "Start Date" };
    private string DropdownLeftValue = LeftColumns[0];
    private string DropdownRightValue = RightColumns[1];
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        this.TaskCollection = GanttData.EditingData().ToList();
    }

    public void RightFreeze(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        if (args.Value == "Dependency")
        {
            this.DependencyFreeze=true;
            this.ProgressFreeze = false;
            this.DurationFreeze = false;
        }
        else if (args.Value == "Progress")
        {
            this.DependencyFreeze = true;
            this.ProgressFreeze = true;
            this.DurationFreeze = false;
        }
        else
        {
            this.DependencyFreeze = true;
            this.ProgressFreeze = true;
            this.DurationFreeze = true;
            this.DurationDirection = FreezeDirection.Right;
        }

    }
    public void LeftFreeze(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args)
    {
        if(args.Value=="Job Name")
        {
            this.TaskNameFreeze = true;
            this.StartDateFreeze = false;
        }
        else
        {
            this.TaskNameFreeze = true;
            this.StartDateFreeze = true;
            this.StartDateDirection = FreezeDirection.Left;
        }
    }
    public class GanttData
    {
        public class TaskData
        {
            public int TaskId { get; set; }
            public string TaskName { get; set; }
            public DateTime? StartDate { get; set; }
            public DateTime? EndDate { get; set; }
            public string Duration { get; set; }
            public int Progress { get; set; }
            public string Predecessor { get; set; }
            public string Notes { get; set; }
            public int? ParentId { get; set; }
        }
        public static List<TaskData> EditingData()
        {
            List<TaskData> Tasks = new List<TaskData>() {
        new TaskData() {
            TaskId = 1,
            TaskName = "Product concept",
            StartDate = new DateTime(2021, 04, 02),
            EndDate = new DateTime(2021, 04, 08),
            Duration = "5 days"
        },
        new TaskData() {
            TaskId = 2,
            TaskName = "Defining the product usage",
            StartDate = new DateTime(2021, 04, 02),
            EndDate = new DateTime(2021, 04, 08),
            Duration = "3",
            Progress = 30,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 3,
            TaskName = "Defining the target audience",
            StartDate = new DateTime(2021, 04, 02),
            EndDate = new DateTime(2021, 04, 04),
            Duration = "3",
            Progress = 40,
            ParentId = 1
        },
        new TaskData() {
            TaskId = 4,
            TaskName = "Prepare product sketch and notes",
            StartDate = new DateTime(2021, 04, 05),
            EndDate = new DateTime(2021, 04, 08),
            Duration = "2",
            Progress = 30,
            ParentId = 1,
            Predecessor="2"
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Concept approval",
            StartDate = new DateTime(2021, 04, 08),
            EndDate = new DateTime(2021, 04, 08),
            Duration="0",
            Predecessor="3,4"
        },
        new TaskData() {
            TaskId = 6,
            TaskName = "Market research",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 18),
            Predecessor="2",
            Duration = "4",
            Progress = 30
        },
        new TaskData() {
            TaskId = 7,
            TaskName = "Demand analysis",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 12),
            Duration = "4",
            Progress = 40,
            ParentId = 6
        },
        new TaskData() {
            TaskId = 8,
            TaskName = "Customer strength",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 12),
            Duration = "4",
            Progress = 30,
            ParentId = 7,
            Predecessor="5"
        }, new TaskData() {
            TaskId = 9,
            TaskName = "Market opportunity analysis",
            StartDate = new DateTime(2021, 04, 09),
            EndDate = new DateTime(2021, 04, 012),
            Duration="4",
            ParentId= 7,
            Predecessor="5"
        },
        new TaskData() {
            TaskId = 10,
            TaskName = "Competitor analysis",
            StartDate = new DateTime(2021, 04, 15),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "4",
            Progress = 30,
            ParentId= 6,
            Predecessor="7,8"
        },
        new TaskData() {
            TaskId = 11,
            TaskName = "Product strength analysis",
            StartDate = new DateTime(2021, 04, 15),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "4",
            Progress = 40,
            ParentId = 6,
            Predecessor="9"
        },
        new TaskData() {
            TaskId = 12,
            TaskName = "Research completed",
            StartDate = new DateTime(2021, 04, 18),
            EndDate = new DateTime(2021, 04, 18),
            Duration = "0",
            Progress = 30,
            ParentId = 6,
            Predecessor="10"
        },
         new TaskData() {
            TaskId = 13,
            TaskName = "Product design and development",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 05, 16),
            Duration="20",
            Predecessor="6"
         },
        new TaskData() {
            TaskId = 14,
            TaskName = "Functionality design",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 04, 23),
            Duration = "3",
            Progress = 30,
            ParentId = 13,
            Predecessor="12"
        },
        new TaskData() {
            TaskId = 15,
            TaskName = "Quality design",
            StartDate = new DateTime(2021, 04, 19),
            EndDate = new DateTime(2021, 04, 23),
            Duration = "3",
            Progress = 40,
            ParentId = 13,
            Predecessor="12"
        },
        new TaskData() {
            TaskId = 16,
            TaskName = "Define reliability",
            StartDate = new DateTime(2021, 04, 24),
            EndDate = new DateTime(2021, 04, 25),
            Duration = "2",
            Progress = 30,
            ParentId = 13,
            Predecessor="15"
        },
         new TaskData() {
            TaskId = 17,
            TaskName = "Identifying raw materials",
            StartDate = new DateTime(2021, 04, 24),
            EndDate = new DateTime(2021, 04, 25),
            Duration="2",
            ParentId=13,
            Predecessor="15"
        },
        new TaskData() {
            TaskId = 18,
            TaskName = "Define cost plan",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 30,
            ParentId=13,
            Predecessor="17"
        },
        new TaskData() {
            TaskId = 19,
            TaskName = "Manufacturing cost",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 40,
            ParentId = 18,
            Predecessor="17"
        },
        new TaskData() {
            TaskId = 20,
            TaskName = "Selling cost",
            StartDate = new DateTime(2021, 04, 26),
            EndDate = new DateTime(2021, 04, 29),
            Duration = "2",
            Progress = 30,
            ParentId = 18,
            Predecessor="17"
        },
         new TaskData() {
            TaskId = 21,
            TaskName = "Development of final design",
            StartDate = new DateTime(2021, 04, 30),
            EndDate = new DateTime(2021, 05, 08),
            Duration="7",
            ParentId=13
        },
        new TaskData() {
            TaskId = 22,
            TaskName = "Develop dimensions and design",
            StartDate = new DateTime(2021, 04, 30),
            EndDate = new DateTime(2021, 05, 01),
            Duration = "2",
            Progress = 30,
            ParentId=21,
            Predecessor="19,20"
        },
        new TaskData() {
            TaskId = 23,
            TaskName = "Develop designs to meet industry",
            StartDate = new DateTime(2021, 05, 02),
            EndDate = new DateTime(2021, 05, 03),
            Duration = "2",
            Progress = 40,
            ParentId = 21,
            Predecessor="22"
        },
        new TaskData() {
            TaskId = 24,
            TaskName = "Include all the details",
            StartDate = new DateTime(2021, 05, 06),
            EndDate = new DateTime(2021, 05, 08),
            Duration = "3",
            Progress = 30,
            ParentId = 21,
            Predecessor="23"
        },
         new TaskData() {
            TaskId = 25,
            TaskName = "CAD - Computer Aided Design",
            StartDate = new DateTime(2021, 05, 09),
            EndDate = new DateTime(2021, 05, 13),
            Duration="3",
            Predecessor="24"
        },
        new TaskData() {
            TaskId = 26,
            TaskName = "CAM - Computer Aided Manufacturing",
            StartDate = new DateTime(2021, 05, 14),
            EndDate = new DateTime(2021, 05, 16),
            Duration = "3",
            Progress = 30,
            Predecessor="25"
        },
        new TaskData() {
            TaskId = 27,
            TaskName = "Finalize the design",
            StartDate = new DateTime(2021, 04, 16),
            EndDate = new DateTime(2021, 04, 16),
            Duration = "0",
            Progress = 40,
            Predecessor="26"
        },
        new TaskData() {
            TaskId = 28,
            TaskName = "Prototype testing",
            StartDate = new DateTime(2021, 05, 17),
            EndDate = new DateTime(2021, 05, 22),
            Duration = "4",
            Progress = 30,
            Predecessor="27"
        },
        new TaskData() {
            TaskId = 29,
            TaskName = "Include feedback",
            StartDate = new DateTime(2021, 05, 17),
            EndDate = new DateTime(2021, 05, 22),
            Duration="4",
            Predecessor="28ss"
        },
        new TaskData() {
            TaskId = 30,
            TaskName = "Manufacturing",
            StartDate = new DateTime(2021, 05, 23),
            EndDate = new DateTime(2021, 05, 29),
            Duration = "5",
            Progress = 30,
            Predecessor="28,29"
        },
        new TaskData() {
            TaskId = 31,
            TaskName = "Assembling material to finished goods",
            StartDate = new DateTime(2021, 05, 30),
            EndDate = new DateTime(2021, 06, 05),
            Duration = "5",
            Progress = 40,
            Predecessor="30"
        },
        new TaskData() {
            TaskId = 32,
            TaskName = "Final product development",
            StartDate = new DateTime(2021, 06, 06),
            EndDate = new DateTime(2021, 06, 13),
            Duration = "6",
            Progress = 30
        }, new TaskData() {
            TaskId =33,
            TaskName = "Important improvement",
            StartDate = new DateTime(2021, 06, 06),
            EndDate = new DateTime(2021, 06, 10),
            Duration="3",
            ParentId=32,
            Predecessor="31"
        },
        new TaskData() {
            TaskId = 34,
            TaskName = "Customer testing and feedback",
            StartDate = new DateTime(2021, 06, 11),
            EndDate = new DateTime(2021, 06, 13),
            Duration = "3",
            Progress = 30,
            ParentId=32,
            Predecessor="33"
        },
        new TaskData() {
            TaskId = 35,
            TaskName = "Final product development",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 40
        },
        new TaskData() {
            TaskId = 36,
            TaskName = "Important improvement",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 30,
            ParentId = 35,
            Predecessor="34"
        },
         new TaskData() {
            TaskId = 37,
            TaskName = "Address any unforeseen issue",
            StartDate = new DateTime(2021, 06, 14),
            EndDate = new DateTime(2021, 06, 19),
            Duration = "4",
            Progress = 30,
            Predecessor="36ss",
            ParentId=35
        },
        new TaskData() {
            TaskId = 38,
            TaskName = "Final product",
            StartDate = new DateTime(2021, 06, 20),
            EndDate = new DateTime(2021, 07, 01),
            Duration = "8",
            Progress = 40
        },
        new TaskData() {
            TaskId = 39,
            TaskName = "Branding product",
            StartDate = new DateTime(2021, 06, 20),
            EndDate = new DateTime(2021, 06, 25),
            Duration = "4",
            Progress = 30,
            ParentId = 38,
            Predecessor="37"
        },
        new TaskData()
        {
            TaskId=40,
            TaskName="Marketing and Presales",
            StartDate=new DateTime(2021,06,26),
            EndDate=new DateTime(2021,07,01),
            ParentId=38,
            Duration="4",
            Predecessor="39"
        }
    };
            return Tasks;
        }
    }
}
<style>
   
    .showhide {
        font-size: 15px;
        font-weight: 400;
        margin-bottom: 1px;
    }

    .e-switch-control {
        display: flex;
        align-items: center;
    }

    .e-mastertext {
        font-size: 15px;
        font-family: Roboto;
        font-weight: bolder;
        opacity: 0.87;
        padding: 0.7em;
    }
    </style>
