@page "/stock-chart/stock-chart-spline"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@using ThemeHelper
@using System.Net.Http.Json
@inject HttpClient Http
@*Hidden:Lines*@
<PageTitle>Blazor Stock Chart Spline Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Spline in Blazor Stock Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample uses spline series to visualize stock data. The tooltip and crosshair display information about the data and period.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure stock chart to visualize the stock data with spline series. Use series <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.StockChartSeries.html#Syncfusion_Blazor_Charts_StockChartSeries_Type">Type</a> as <b>Spline</b> to render a spline series. </p>
    <p>
        <code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover the chart or tap on it in touch enabled devices.
    </p>
    <p>
        More information about the series type can be found in this
        <a target="_blank" href="https://blazor.syncfusion.com/documentation/stock-chart/series-types">documentation section</a>.
    </p>
</ActionDescription>

@if (DataSource == null)
{
    <div class="stockchartloader"></div> }
else
{
    <div class="@loadClass"></div>
    <div class="@loadDiv">
        <SfStockChart Title="AAPL Stock Price" IndicatorType="@Indicators" Theme="@theme" TrendlineType="@TrendLines">
            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
            <StockChartPrimaryXAxis>
                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
            </StockChartPrimaryXAxis>
            <StockChartPrimaryYAxis>
                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
            </StockChartPrimaryYAxis>
            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>
            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
            <StockChartSeriesCollection>
                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.Spline"></StockChartSeries>
            </StockChartSeriesCollection>
            <StockChartChartArea>
                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
            </StockChartChartArea>
        </SfStockChart>
    </div>
    <style>
        .stockchartloader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #7a0fff;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 46%;
            left: 46%;
            border-radius: 50%;
            -webkit-animation: loader 2s linear infinite;
            animation: loader 2s linear infinite;
        }

        .stockchartdiv {
            visibility: hidden;
        }
    </style>
}
@code{ 
    
    List<TechnicalIndicators> Indicators = new List<TechnicalIndicators>() { };
    List<TrendlineTypes> TrendLines = new List<TrendlineTypes>() { };
    private ChartData[] DataSource;
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    protected override async Task OnInitializedAsync()
    {
        BeforeRender();
        DataSource = await Http.GetFromJsonAsync<ChartData[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/stock-chart/chart-data.json");
    }

    public class ChartData
    {
        public DateTime date { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";
    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    Theme theme = Theme.Bootstrap4;
    void BeforeRender()
    {
        theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    } 
}