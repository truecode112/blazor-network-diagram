@page "/chart/pie-empty-points"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.DropDowns

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts Empty Points Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Empty Points in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample illustrates the annual product-wise profit analysis of an organization with empty point functionality in the pie series.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure the pie series with empty points. The empty point in the chart can be handled using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.AccumulationChartSeries.html#Syncfusion_Blazor_Charts_AccumulationChartSeries_EmptyPointSettings'>EmptyPointSettings</a> property.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the empty points can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/accumulation-chart/empty-points/'>documentation section</a>.</p>
</ActionDescription>
 
<div class="col-lg-8 control-section sb-property-border">
    <SfAccumulationChart EnableSmartLabels="false" EnableBorderOnMouseMove="false" Title="Annual Product-Wise Profit Analysis" Theme="@Theme">
            <AccumulationChartEvents OnDataLabelRender="DataLabelRenderEvent"></AccumulationChartEvents>
        <AccumulationChartTooltipSettings Header="" Enable="true" Format="<b>${point.x}</b><br> Profit: <b>$${point.y}K</b>"></AccumulationChartTooltipSettings>
        <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
        <AccumulationChartSeriesCollection>
            <AccumulationChartSeries DataSource="@PieChartPoints" Radius="80%" Name="Profit" XName="Product" YName="ProfitPercentage" Type="AccumulationType.Pie">
                <AccumulationChartEmptyPointSettings Mode="@Mode" Fill="#e6e6e6"></AccumulationChartEmptyPointSettings>
                <AccumulationDataLabelSettings Visible="true" EnableRotation="true" Position="AccumulationLabelPosition.Inside">
                    <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                </AccumulationDataLabelSettings>
            </AccumulationChartSeries>
        </AccumulationChartSeriesCollection>
    </SfAccumulationChart>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div>
        <div class="property-panel-content">
            <table style="width: 100%">
                <tr style="height:50px">
                    <td style="width: 50%">
                        Empty Point Mode:
                    </td>
                    <td style="width: 50%">
                        <SfDropDownList TValue="string" Placeholder="Drop" TItem="SelectionTypes" DataSource="@EmptyPointModeData">
                            <DropDownListEvents TValue="string" TItem="SelectionTypes" ValueChange="ChangeEmptyPointMode"></DropDownListEvents>
                            <DropDownListFieldSettings Value="Type"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    private EmptyPointMode Mode { get; set; } = EmptyPointMode.Drop;
    public List<PieData> PieChartPoints { get; set; } = new List<PieData>
    {
        new PieData { Product = "Rice", ProfitPercentage = 80},
        new PieData { Product = "Wheat", ProfitPercentage = null},
        new PieData { Product = "Oil", ProfitPercentage = 70},
        new PieData { Product = "Corn", ProfitPercentage = 60},
        new PieData { Product = "Gram", ProfitPercentage = null},
        new PieData { Product = "Milk", ProfitPercentage = 70},
        new PieData { Product = "Peas", ProfitPercentage = 80},
        new PieData { Product = "Fruit", ProfitPercentage = 60},
        new PieData { Product = "Butter", ProfitPercentage = null}
    };
    public List<SelectionTypes> EmptyPointModeData { get; set; } = new List<SelectionTypes>
    {
        new SelectionTypes() { Type = EmptyPointMode.Drop.ToString() },
        new SelectionTypes() { Type = EmptyPointMode.Average.ToString() },
        new SelectionTypes() { Type = EmptyPointMode.Zero.ToString() }
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    private void ChangeEmptyPointMode(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, SelectionTypes> args)
    {
        if (args.Value.ToString().Equals(EmptyPointModeData[1].Type))
        {
            Mode = EmptyPointMode.Average;
        }
        else if (args.Value.ToString().Equals(EmptyPointModeData[2].Type))
        {
            Mode = EmptyPointMode.Zero;
        }
        else
        {
            Mode = EmptyPointMode.Drop;
        }
    }

    public void DataLabelRenderEvent(AccumulationTextRenderEventArgs args)
    {
        args.Text = args.Point.X + ": $" + args.Point.Y + "K";
    }

    public class SelectionTypes
    {
        public string Type { get; set; }
    }

    public class PieData
    {
        public string Product { get; set; }
        public double? ProfitPercentage { get; set; }
        public string DataLabelMapping{ get; set; }
    }
}
