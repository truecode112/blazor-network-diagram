@page "/chart/spline"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Spline Chart Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the default functionalities of Blazor Spline Chart. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-charts/chart-types/spline-chart'>Blazor Spline Chart</a> example represents the North Carolina weather report for the year 2016 with default spline series in the chart.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a spline chart. The Spline chart uses a curved line to connect points in a data series. <code>Markers </code> are used to represent individual data and its values.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the spline series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/spline'>documentation section</a>.</p>
</ActionDescription>

<style>
    #chart_Series_0_Point_2_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    #chart_Series_2_Point_0_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-in-out infinite;
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }

        100% {
            stroke-opacity: 0.4;
            stroke-width: 10px;
        }
    }
</style>

<div class="control-section" align='center'>
    <SfChart ID="chart" Title="NC Weather Report - 2016" Width="@Width" Theme="@Theme">
        <ChartEvents Loaded="ChartLoaded" OnLegendClick="OnChartLegendClick"></ChartEvents>
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate90">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}°C">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartLegendSettings EnableHighlight="true"></ChartLegendSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@SplineData" Name="Max Temp" XName="Days" Width="2"
                         Opacity="1" YName="MaxTemp" Type="ChartSeriesType.Spline">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@SplineData" Name="Avg Temp" XName="Days" Width="2"
                         Opacity="1" YName="AvgTemp" Type="ChartSeriesType.Spline">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@SplineData" Name="Min Temp" XName="Days" Width="2"
                         Opacity="1" YName="MinTemp" Type="ChartSeriesType.Spline">
                <ChartMarker Visible="true" Width="7" Height="7">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartAnnotations>
            @foreach (AnnotationData annotationData in SplineAnnotations)
            {
                @if (@annotationData.Visible)
                {
                    <ChartAnnotation X=@annotationData.X Y=@annotationData.Y CoordinateUnits="Units.Point">
                        <ContentTemplate><div><img src="@(SampleService.WebAssetsPath + @annotationData.Url)" style="width: 41px; height: 41px" /></div></ContentTemplate>
                    </ChartAnnotation>
                }
            }
        </ChartAnnotations>
    </SfChart>
</div>

@code{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<SplineChartData> SplineData = new List<SplineChartData>
{
        new SplineChartData { Days = "Sun", MaxTemp = 15, AvgTemp = 10, MinTemp = 2 },
        new SplineChartData { Days = "Mon", MaxTemp = 22, AvgTemp = 18, MinTemp = 12 },
        new SplineChartData { Days = "Tue", MaxTemp = 32, AvgTemp = 28, MinTemp = 22 },
        new SplineChartData { Days = "Wed", MaxTemp = 31, AvgTemp = 28, MinTemp = 23 },
        new SplineChartData { Days = "Thu", MaxTemp = 29, AvgTemp = 26, MinTemp = 19 },
        new SplineChartData { Days = "Fri", MaxTemp = 24, AvgTemp = 20, MinTemp = 13 },
        new SplineChartData { Days = "Sat", MaxTemp = 18, AvgTemp = 15, MinTemp = 8 }
    };
    public List<AnnotationData> SplineAnnotations = new List<AnnotationData> {
        new AnnotationData() { Visible = false, Url = "images/chart/cloud.png", X = "Sun", Y = "5" },
        new AnnotationData() { Visible = false, Url = "images/chart/sunny.png", X = "Tue", Y = "35" },
    };
    public async void ChartLoaded(LoadedEventArgs args)
    {
        SplineAnnotations.ForEach(item => item.Visible = true);
        await Task.Delay(1500);
        StateHasChanged();
    }
    public void OnChartLegendClick(LegendClickEventArgs args)
    {
        if (args.LegendText == "Max Temp")
        {
            SplineAnnotations[1].Visible = !SplineAnnotations[1].Visible;
        } else if (args.LegendText == "Min Temp")
        {
            SplineAnnotations[0].Visible = !SplineAnnotations[0].Visible;
        }
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Width = "100%";
        }
    }
    public class SplineChartData
    {
        public string Days { get; set; }
        public double MaxTemp { get; set; }
        public double AvgTemp { get; set; }
        public double MinTemp { get; set; }
    }
    public class AnnotationData
    {
        public string X { get; set; }
        public string Y { get; set; }
        public string Url { get; set; }
        public bool Visible { get; set; }
    }
}
