@page "/chart/date-time-category-axis"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts

@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts DateTime Category Axis Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the DateTime Category Axis in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows the date-time category axis with sample data about the sales of a product on different business days.</p>
</SampleDescription>
<ActionDescription>
    <p>The date-time category axis is used to display date-time values with nonlinear intervals. For example, business days alone can be depicted here in a week. To use a date-time category axis, set the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartAxis.html#Syncfusion_Blazor_Charts_ChartAxis_ValueType'>ValueType</a> in axis to <b>DateTimeCategory</b>.</p>
     <p>More information about the DateTime Category Axis can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/date-time-axis#datetime-category-axis'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <SfChart Title="Sales comparison of a Product" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis Title="Business Days" IntervalType="IntervalType.Days" Format="d ddd" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTimeCategory" LabelIntersectAction="@Label" LabelRotation="@Rotation">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartStriplines>
                <ChartStripline Visible="true" Start="new DateTime(2017, 12, 20)" End="new DateTime(2017, 12, 27)" Color="skyblue" Opacity="0.5"></ChartStripline>
                <ChartStripline Visible="true" Start="new DateTime(2018, 1, 2)" End="new DateTime(2018, 1, 8)" Color="pink" Opacity="0.5"></ChartStripline>
            </ChartStriplines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Minimum="0" Maximum="100" Interval="20" LabelFormat="{value}M" RangePadding="ChartRangePadding.None">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartPoints" XName="Period" YName="Sales" Opacity="1" Name="Product" Width="2" Type="ChartSeriesType.Column">
                <ChartMarker>
                    <ChartDataLabel Visible="true" EnableRotation="@Rotate" Angle="@AngleRotate" Name="DataLabelMappingName" Position="LabelPosition.Top"></ChartDataLabel>
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
        <ChartAnnotations>
            <ChartAnnotation X="new DateTime(2017,12,22)" Y="90" CoordinateUnits="Units.Point">
                <ContentTemplate><div style="color: #0000ff; font-family: bold; font-weight: 600">Christmas Offer<br> Dec 2017</div></ContentTemplate>
            </ChartAnnotation>
            <ChartAnnotation X="new DateTime(2018,01,04)" Y="90" CoordinateUnits="Units.Point">
                <ContentTemplate><div style="color: #0000ff; font-family: bold; font-weight: 600 ">New Year Offer<br> Jan 2018</div></ContentTemplate>
            </ChartAnnotation>
        </ChartAnnotations>
        <ChartLegendSettings Visible="false"></ChartLegendSettings>
    </SfChart>
</div>

@code{

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public double Rotation { get; set; } = 0;
    public double AngleRotate { get; set; } = 0;
    public bool Rotate { get; set; } = false;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Rotate45;
    public List<DateTimeData> ChartPoints { get; set; } = new List<DateTimeData>
    {
        new DateTimeData { Period = new DateTime(2017, 12, 20), Sales = 21, DataLabelMappingName="21M"},
        new DateTimeData { Period = new DateTime(2017, 12, 21), Sales = 24, DataLabelMappingName="24M" },
        new DateTimeData { Period = new DateTime(2017, 12, 22), Sales = 24, DataLabelMappingName="24M"},
        new DateTimeData { Period = new DateTime(2017, 12, 26), Sales = 70, DataLabelMappingName="70M"},
        new DateTimeData { Period = new DateTime(2017, 12, 27), Sales = 75, DataLabelMappingName="75M"},
        new DateTimeData { Period = new DateTime(2018, 1, 2), Sales = 82, DataLabelMappingName="82M"},
        new DateTimeData { Period = new DateTime(2018, 1, 3), Sales = 53, DataLabelMappingName="53M"},
        new DateTimeData { Period = new DateTime(2018, 1, 4), Sales = 54, DataLabelMappingName="54M"},
        new DateTimeData { Period = new DateTime(2018, 1, 5), Sales = 53, DataLabelMappingName="53M"},
        new DateTimeData { Period = new DateTime(2018, 1, 8), Sales = 45, DataLabelMappingName="45M"}
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        if (SampleService.IsDevice)
        {
            Label = LabelIntersectAction.None;
            AngleRotate = -90;
            Rotate = true;
            Width = "100%";
            Rotation = -45;
        }
    }

    public class DateTimeData
    {
        public DateTime Period { get; set; }
        public double Sales { get; set; }
        public string DataLabelMappingName{ get; set; }
    }
}
