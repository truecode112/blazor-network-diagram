@page "/chart/multi-colored-line"

@using Syncfusion.Blazor
@using ThemeHelper
@using Syncfusion.Blazor.Charts
@using System.Net.Http.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Charts Multi Colored Line Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Multi Colored Line in Blazor Charts Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample shows the particulate levels in rainfall with multi-colored line series in the chart. Data points are enhanced with individual colors and tooltips. </p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure each point in line type series. Multicolored line charts are used to represent time-dependent data to show the trends at equal intervals with their individual colors by using <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Charts.ChartSeries.html#Syncfusion_Blazor_Charts_ChartSeries_PointColorMapping'>PointColorMapping</a>.</p>
    <p><code>Tooltip</code> is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
    <p>More information about the multi-colored line series can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/chart/chart-types/line/#multicolored-line'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section" align='center'>
    <div align="center">
        <SfChart Title="Particulate Levels in Rainfall" Width="@Width" Theme="@Theme">
            <ChartArea>
                <ChartAreaBorder Width="0"></ChartAreaBorder>
            </ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis RangePadding="ChartRangePadding.None" Title="Particulate Matter (PM)" Minimum="4" Maximum="10">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Header="<b>Rainfall</b>" Enable="true" Shared="true" EnableMarker="false" Format="${point.x} : <b>${point.y}</b>"></ChartTooltipSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartPoints" XName="Period" YName="RainfallInfo" PointColorMapping="PointColor" Width="1.5" Type="ChartSeriesType.MultiColoredLine">
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
</div>
<style>
    ellipse[id*=_Trackball_0] {
        stroke-opacity: 1;
    }
    ellipse[id*=_Trackball_1] {
        stroke-width: 1.2 !important;
        stroke: white !important;
    }
</style>
@code{

    private string[] colors = {"red", "green", "deeppink", "crimson", "blue", "darkorange", "deepskyblue",
                             "mediumvioletred", "violet", "peru", "gray", "deeppink", "navy" };
    private Double[] chartJsonPoints = new Double[150];
    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<LineChartData> ChartPoints { get; set; } = new List<LineChartData>();
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    protected override async Task OnInitializedAsync()
    {
        if (SampleService.IsDevice)
        {
            Width = "100%";
        }
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        chartJsonPoints = await Http.GetFromJsonAsync<Double[]>(NavigationManager.BaseUri + SampleService.WebAssetsPath + "data/chart/rainfall-data.json");
        
        for (int i = 0; i < chartJsonPoints.Length; i++)
        {
            ChartPoints.Add(new LineChartData
            {
                Period = new DateTime(2004, 1, 1).AddMonths(i),
                RainfallInfo = chartJsonPoints[i],
                PointColor = colors[(i / 16)]
            });
        }
    }

    public class LineChartData
    {
        public DateTime Period { get; set; }
        public double RainfallInfo { get; set; }
        public string PointColor { get; set; }
    }
}
