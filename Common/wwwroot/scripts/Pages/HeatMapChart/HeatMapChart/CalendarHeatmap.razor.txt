@page "/heatmap-chart/calendar-heatmap"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.HeatMap
@using System.Globalization
@using SFHeatMap = Syncfusion.Blazor.HeatMap
@using sf_blazor_heatmapdata
@inherits SampleBaseComponent;
@inject NavigationManager NavigationManager
@*Hidden:Lines*@
<PageTitle>Blazor HeatMap Chart Calendar Heatmap Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Calendar Heatmap in Blazor HeatMap Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p> This sample visualizes the summary of user activities in the GitLab account such as merge requests, push events, and comments across 52 weeks in a year.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to display Calendar data using Heatmap. You can make the axis labels to display at specific time intervals along the DateTime axis using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.HeatMap.AxisModel.html#Syncfusion_Blazor_HeatMap_AxisModel_ShowLabelOn'>ShowLabelOn</a> property in both axis directives.</p>
    <p>The Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch-enabled devices.</p>
</ActionDescription>

<div class="control-section">
    <div class="row">
        <div class="col-md-12">
            <SfHeatMap DataSource="@DataSource" Height="240px" Theme="@theme">
                <HeatMapEvents TooltipRendering="@TooltipRendering"></HeatMapEvents>
                <HeatMapTitleSettings Text="Annual Summary of User Activities in GitLab">
                    <HeatMapTitleTextStyle Size="15px" FontWeight="500" FontStyle="Normal"></HeatMapTitleTextStyle>
                </HeatMapTitleSettings>
                <HeatMapXAxis OpposedPosition="true"
                              Minimum="@XMinimum"
                              Maximum="@XMaximum"
                              IntervalType="@SFHeatMap.IntervalType.Days"
                              ValueType="@SFHeatMap.ValueType.DateTime"
                              LabelFormat="MMM"
                              ShowLabelOn="@SFHeatMap.LabelType.Months"
                              Increment="7"
                              LabelIntersectAction="@SFHeatMap.LabelIntersectAction.Rotate45">
                </HeatMapXAxis>
                <HeatMapYAxis Labels="@YLabels" IsInversed="true"></HeatMapYAxis>
                <HeatMapPaletteSettings Type="@SFHeatMap.PaletteType.Gradient" EmptyPointColor="white">
                </HeatMapPaletteSettings>
                <HeatMapCellSettings ShowLabel="false">
                    <HeatMapCellBorder Color = "White" Width="7"></HeatMapCellBorder>
                </HeatMapCellSettings>
                <HeatMapLegendSettings Visible="true">
                </HeatMapLegendSettings>
            </SfHeatMap>
        </div>
    </div>
</div>

@code{
    private Theme theme { get; set; }
    string[] YLabels = new string[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    DateTime XMinimum = new DateTime(2017, 6, 23);
    DateTime XMaximum = new DateTime(2018, 6, 30);
    int?[,] DataSource = HeatMapData.GetCalendarData();
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        theme = HeatmapThemeHelper.GetCurrentHeatmapTheme(NavigationManager.Uri);
    }
    public void TooltipRendering(TooltipEventArgs args)
    {
        List<string> Ylabels = YLabels.ToList();
        DateTime heatmapdate = DateTime.ParseExact(args.XValue, "dd-MMM-yyyy", CultureInfo.InvariantCulture);
        heatmapdate = heatmapdate.AddDays(Ylabels.IndexOf(args.YLabel)).ToLocalTime();
        args.Content = new string[] { args.Value + " contributions on " + heatmapdate.ToString("MMM") + " " + heatmapdate.ToString("dd") + ", " + heatmapdate.ToString("yyyy") };
    }
}
