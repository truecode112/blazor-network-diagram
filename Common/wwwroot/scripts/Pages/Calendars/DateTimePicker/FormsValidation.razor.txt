@page "/DateTime-Picker/Forms-Validation"

@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Buttons;
@using System.ComponentModel.DataAnnotations;


@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager

<PageTitle>Blazor DateTime Picker Validation Example - Syncfusion Demos</PageTitle>

<HeadContent>
    <meta name="description" content="This example demonstrates the Validation in Blazor DateTime Picker Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@
<SampleDescription>
    <p>This example is used to validate form using the Data Annotation. Type the date and time in the input element or choose a date from the calendar popup and time from the timepicker popup. If the input value is a valid date time value, then the given input will be ready to submit. Otherwise, an error message will be shown until you enter or choose the valid date time.</p>
</SampleDescription>
<ActionDescription>
    <p>The form enables the validation with data annotation attributes by clicking on the submit externally. All rules are validated by the DataAnnotationsValidator.</p>
    <p>The above date time field is configured with the following rules.</p>
    <table style='width:100%'>
        <tr>
            <th>Field</th>
            <th>Rule</th>
        </tr>
        <tr>
            <td style="padding-right:20px">Required</td>
            <td>The field must have a valid date time value.</td>
        </tr>
        <tr>
            <td style="vertical-align: top">Range</td>
            <td>The field must have a date time value within the given range. The date time should be between 5 March 2021, 9 AM and 25 March 2021, 6 PM.</td>
        </tr>
    </table>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        @if (string.IsNullOrEmpty(Message))
        {
        <EditForm Model="@annotation" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="example-label">Select Date and Time</label>
                <SfDateTimePicker id='DateTimePick' CssClass="@CssClass" @bind-Value="@annotation.StartDateTime" Min="@MinDate" Max="@MaxDate" ShowClearButton="true"></SfDateTimePicker>
                <ValidationMessage For="@(() => annotation.StartDateTime)" />
            </div>
            <div class="submit-btn">
                <SfButton type="submit" IsPrimary="true">Submit</SfButton>
            </div>
        </EditForm>
        }
        else
        {
            <div class="alert alert-success">
                @Message
            </div>
        }
    </div>
</div>
<style>
    .control-wrapper {
        max-width: 275px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        padding: 10px 0px 0px;
    }

    .validation-message {
        color: red;
        padding: 5px 0px 0px;
    }
</style>
@code {
    private string Message = string.Empty;
    public string CssClass { get; set; } = "e-popup-expand";
    
    //Hidden:Lines
    private string canonicalURL { get; set; }
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    async void OnValidSubmit()
    {
        Message = "Form Submitted Successfully!";
        await Task.Delay(2000);
        Message = string.Empty;
        annotation.StartDateTime = null;
        StateHasChanged();
    }
    private void OnInvalidSubmit()
    {
        Message = string.Empty;
    }
    private Annotation annotation = new Annotation();
    private DateTime MinDate { get; set; } = new DateTime(2021,3,1,10,00,00);
    private DateTime MaxDate { get; set; } = new DateTime(2021, 3, 31, 10, 00, 00);
    public class Annotation
    {
        [Required(ErrorMessage = "The Date field is required.")]
        [Range(typeof(DateTime), "3/5/2021 9:00:00", "3/25/2021 18:00:00", ParseLimitsInInvariantCulture = true, ErrorMessage = "The date should be between 5 March 2021, 9 AM and 25 March 2021, 6 PM.")]
        public DateTime? StartDateTime { get; set; } = null;
    }
}