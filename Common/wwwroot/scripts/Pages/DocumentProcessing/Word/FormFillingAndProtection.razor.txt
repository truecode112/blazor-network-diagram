@page "/word/formfillingandprotection"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Word (DocIO) Library - Form filling and Protection Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to fill a form and protect the content controls in an existing Word document using Essential DocIO." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to fill a form and protect the content controls in an existing Word document using Essential DocIO.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">DocIO allows you to create and edit content controls in the Word Open XML Format document (DOCX, DOTX, DOCM, DOTM). With the content control support, you can create a more functional form which gives built-in form filling experience.
        <ul style="font-size:16px"><li>Content controls has several types plain text, rich text, picture, check box, combo box, drop down list, date picker, etc.</li>
        <li>You can lock/unlock the content controls from deleting or content editing by the users. It helps in creating fillable form without using document protection functionality.</li>
        <li>You can also set editing restriction that does not allow the users to edit the Word document, except filling the content controls and form fields in the Word document.</li></ul></p><p style="font-size:16px">More information about the content controls can be found in this <a href="https://help.syncfusion.com/file-formats/docio/working-with-content-controls">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view the generated Word document. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document.</p>
    <table>
        <tr>
            <td colspan="4">
                <div class="button-section">
                    <div id="button-control">
                        <div class="row">
                            <div>
                                <SfButton @onclick="ViewTemplate">View Input Template</SfButton>&nbsp;
                                <SfButton @onclick="GenerateDocument">Generate Document</SfButton>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    </table>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        FormFillingAndProtectionService service = new FormFillingAndProtectionService(fileData);
        documentStream = service.FormFillingAndProtection("Generate Document");
        service.Close();
        await JS.SaveAs("FormFillingAndProtection.docx", documentStream.ToArray());
    }
    /// <summary>
    /// Create and download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        FormFillingAndProtectionService service = new FormFillingAndProtectionService(fileData);
        documentStream = service.FormFillingAndProtection("View Input Template");
        service.Close();
        await JS.SaveAs("content-control-template.docx", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/content-control-template.docx");
            fileData.Add("content-control-template.docx", new MemoryStream(data));
        }
    }
}