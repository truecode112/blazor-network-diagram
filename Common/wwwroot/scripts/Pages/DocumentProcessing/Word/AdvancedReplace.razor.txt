@page "/word/advanced-replace"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Word (DocIO) Library - Advanced Replace Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to replace a specific content in the Word document with another document using the Find and Replace functionality of Essential DocIO." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to replace a specific content in the Word document with another document using the Find and Replace functionality of Essential DocIO.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">DocIO allows you to find and replace a specific content in the Word document with another document.</p><p style="font-size:16px"><ul style="font-size:16px"><li>You can replace a specific content with another part of the document or another Word document.</li><li>
                You can replace the content by retaining the same formatting for the new content.</li><li>
                You can also replace it with any document elements like image, paragraph, table, etc.,</li></ul></p><p style="font-size:16px">More information about the basics of DocIO can be found in this <a href="https://help.syncfusion.com/file-formats/docio/working-with-find-and-replace">documentation</a> section.</p>
</ActionDescription>

    <div class="control-section">
        <p style="font-size:16px">Click the button to view the generated Word document. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document.</p>
        <table>
            <tr>
                <td>
                    <h5 class="row" style="font-size:16px">Save As:</h5>
                </td>
                <td>
                    <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                        <SfRadioButton Label="DOC" Name="DOC" Value=@("DOC") @bind-Checked="@documentType"></SfRadioButton>
                    </div>
                </td>
                <td>
                    <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                        <SfRadioButton Label="DOCX" Name="DOCX" Value=@("DOCX") @bind-Checked="@documentType"></SfRadioButton>
                    </div>
                </td>
                <td>
                    <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                        <SfRadioButton Label="WordML" Name="WordML" Value=@("WordML") @bind-Checked="@documentType"></SfRadioButton>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="4">
                    <div class="button-section">
                        <div id="button-control">
                            <div class="row">
                                <div>
                                    <SfButton @onclick="ViewTemplate">View Template</SfButton>&nbsp;
                                    <SfButton @onclick="GenerateDocument">Generate Document</SfButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    string documentType = "DOCX";
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    
    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async Task GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        AdvancedReplaceService service = new AdvancedReplaceService(fileData);
        documentStream = service.AdvancedReplace(documentType, "Generate Document");
        service.Close();
        if (documentType == "DOC")
            await JS.SaveAs("Sample.doc", documentStream.ToArray());
        else if (documentType == "WordML")
            await JS.SaveAs("Sample.xml", documentStream.ToArray());
        else
            await JS.SaveAs("Sample.docx", documentStream.ToArray());
    }
    /// <summary>
    /// Create and download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        AdvancedReplaceService service = new AdvancedReplaceService(fileData);
        documentStream = service.AdvancedReplace(documentType, "View Template");
        service.Close();
        await JS.SaveAs("MasterTemplate.doc", documentStream.ToArray());
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/source-template1.doc");
            fileData.Add("source-template1.doc", new MemoryStream(data));
            data = await Http.GetByteArrayAsync(fileDataPath + "data/word/source-template2.doc");
            fileData.Add("source-template2.doc", new MemoryStream(data));
            data = await Http.GetByteArrayAsync(fileDataPath + "data/word/master-template.doc");
            fileData.Add("master-template.doc", new MemoryStream(data));
        }
    }
}