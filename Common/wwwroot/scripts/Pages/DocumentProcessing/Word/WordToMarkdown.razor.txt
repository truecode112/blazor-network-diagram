@page "/word/word-to-markdown"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@inject HttpClient Http
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Word (DocIO) Library - Word to Markdown Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This sample demonstrates how to convert the Word document to Markdown using .NET Word (DocIO) library." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to convert the Word document to Markdown using .NET Word (DocIO) library.</p>
</SampleDescription>
<ActionDescription>
 <p style="font-size:16px">.NET Word (DocIO) library provides support to convert Word document to Markdown.</p>
 <p><ul style="font-size:16px"><li>You can convert existing Word document or created using .NET Word (DocIO) library to Markdown.</li><li>You can convert headings, tables, hyperlinks, list, and images from Word document to Markdown.</li><li>You can customize the image path while exporting as Markdown.</li></ul></p>
 <p style="font-size:16px">More information about Word to Markdown conversion can be found in this <a href="https://help.syncfusion.com/file-formats/docio/convert-word-document-to-markdown-in-csharp">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view the generated Markdown document generated by .NET Word (DocIO) library.</p>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="ViewTemplate">View Template</SfButton>&nbsp;
                    <SfButton @onclick="ConvertToMarkdown">Convert to Markdown</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    /// <summary>
    /// Convert the Word document to Markdown
    /// </summary>
    public async Task ConvertToMarkdown(MouseEventArgs args)
    {
        await LoadTemplate();
        WordToMarkdownService service = new WordToMarkdownService(fileData);
        documentStream = service.WordToMarkdown("ConvertToMarkdown");
        service.Close();
        await JS.SaveAs("WordtoMD.md", documentStream.ToArray());
    }
    /// <summary>
    /// Download the template Word document
    /// </summary>
    public async Task ViewTemplate(MouseEventArgs args)
    {
        await LoadTemplate();
        WordToMarkdownService service = new WordToMarkdownService(fileData);
        documentStream = service.WordToMarkdown("View Template");
        service.Close();
        await JS.SaveAs("WordToMarkdown.docx", documentStream.ToArray());        
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/word-to-md.docx");
            fileData.Add("word-to-md.docx", new MemoryStream(data));
        }
    }
}