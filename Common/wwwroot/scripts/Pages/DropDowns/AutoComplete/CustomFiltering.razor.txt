@page "/AutoComplete/Custom-Filtering"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor AutoComplete Custom Filtering Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Custom Filtering in Blazor AutoComplete Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This example demonstrates the custom filtering functionalities of the AutoComplete. You can choose an item from the suggestion list that filters items based on the approximate string matching technique.</p>
</SampleDescription>
<ActionDescription>
    <p>The AutoComplete can be customized to showcase the suggestion list by using the Filtering event and Filter method. You can also use your own filter libraries to filter data.</p>.
    <p><b>See also</b></p>
    <ul>
        <li><a href='https://blazor.syncfusion.com/documentation/autocomplete/filtering#custom-filtering' target='_blank'>Blazor AutoComplete - Filtering</a></li>
    </ul>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="control-wrapper">
        <label class="example-label">Select a country</label>
        <SfAutoComplete TValue="string" @ref="AutocompleteObj" TItem="Countries" Placeholder="e.g. Australia" DataSource="@Country">
            <AutoCompleteFieldSettings Value="Name"/>
            <AutoCompleteEvents TValue="string" TItem="Countries" Filtering="OnFilter"/>
        </SfAutoComplete>
    </div>
</div>

@code{
    SfAutoComplete<string, Countries> AutocompleteObj { get; set; }
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden

    public class Countries
    {
        public string Name { get; set; }
        public string Code { get; set; }
    }

    List<Countries> Country = new List<Countries>
    {
        new Countries() { Name = "Australia", Code = "AU" },
        new Countries() { Name = "Bermuda", Code = "BM" },
        new Countries() { Name = "Canada", Code = "CA" },
        new Countries() { Name = "Cameroon", Code = "CM" },
        new Countries() { Name = "Denmark", Code = "DK" }
    };

    private async Task OnFilter(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var query = new Query().Where(new WhereFilter() { Field = "Name", Operator = "contains", value = args.Text, IgnoreCase = true });
        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();
        await AutocompleteObj.FilterAsync(Country, query);
    }
}

<style>
    .control-wrapper {
        max-width: 250px;
        margin: 0 auto;
        padding: 50px 0px 0px;
    }

    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>
