@page "/tooltip/api"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Tooltip API Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the API in Blazor Tooltip Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to customize the <a href='https://www.syncfusion.com/blazor-components/blazor-tooltip' target='_blank'>Blazor Tooltip</a> component by using its properties from the property pane. Select any combination of properties from the property pane to customize the tooltip.</p>
</SampleDescription>
<ActionDescription>
   <p>In this demo, the default <code>Tooltip</code> is rendered with minimal configuration. This sample can be customized further with the combination of tooltip properties from the property pane. For example,
      <ul>
        <li>Any change made to a textbox in the property pane will be reflected in the tooltip content.</li>
        <li>StickyMode can be enabled by checking the <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Popups.SfTooltip.html#Syncfusion_Blazor_Popups_SfTooltip_IsSticky' target='_blank'>Sticky</a> mode option in the property pane.</li>
        <li>Tooltip <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Popups.OpenMode.html' target='_blank'>OpenMode</a> can be changed from the property pane.</li>
      </ul>
   </p>
</ActionDescription>

<div class="col-lg-8 control-section sb-property-border">
    <div class="tooltip_style">
        @*Initialize Tooltip Component*@
        <SfTooltip Content="@TooltipContent" OpensOn="@OpensOn" IsSticky="@IsSticky">
            <SfButton Content="Show Tooltip"></SfButton>
        </SfTooltip>
    </div>
</div>
<div class="col-lg-4 property-section">
    <div class="property-panel-section">
        <div class="property-panel-header">Properties</div><div class="property-panel-content">
            <table id="property" title="Properties" class="property-panel-table">
                <tbody>
                    <tr>
                        <td>
                            <div class="select">Content:</div>
                        </td>
                        <td>
                            <div>
                                @*Initialize Textbox Component*@
                                <SfTextBox Type="InputType.Text" Placeholder="Tooltip Content" @bind-Value="@TooltipContent"></SfTextBox>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="select">Open Mode:</div>
                        </td>
                        <td>
                            <div>
                                @*Initialize DropdownList Component*@
                                <SfDropDownList TValue="string" TItem="DropDownModel" DataSource="@TooltipMode" @bind-Value="OpensOn">
                                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                    <DropDownListEvents TItem="DropDownModel" TValue="string" ValueChange="@TooltipOpenMode"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div class="select">Sticky Mode:</div>
                        </td>
                        <td>
                            <div>
                                @*Initialize CheckBox Component*@
                                <SfCheckBox @bind-Checked="@IsSticky" Label="IsSticky"></SfCheckBox>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>


@code {
    // Specifies the tooltip's IsSticky option.
    bool IsSticky = false;
    // Specifies the tooltip's open mode option.
    string OpensOn = "Auto";
    // Specifies the tooltip's content.
    string TooltipContent = "Tooltip Content";
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    // Specifies the event handler for changing the tooltip open mode.
    public void TooltipOpenMode(ChangeEventArgs<string, DropDownModel> args)
    {
        OpensOn = args.Value;
    }
    // Specifies the different types of the tooltip open mode.
    List<DropDownModel> TooltipMode = new List<DropDownModel>()
    {
        new DropDownModel { Text = "Auto", Value = "Auto" },
        new DropDownModel { Text = "Click", Value = "Click" },
        new DropDownModel { Text = "Hover", Value = "Hover" }
    };

    public class DropDownModel
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
}

<style>
    /* Sample specific styles */
    .tooltip_style {
        position: absolute;
        left: calc( 50% - 60px);
        top: 45%;
    }

    .property-panel-table div {
        padding-left: 0px;
    }
</style>