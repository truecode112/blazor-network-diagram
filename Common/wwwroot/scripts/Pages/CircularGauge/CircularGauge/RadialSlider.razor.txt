@page "/circular-gauge/radial-slider"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Circular Gauge Radial Slider Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Radial Slider in Blazor Circular Gauge Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to create a range slider component by utilizing the functions available in the circular gauge.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, you can see how to render and configure a new range slider component in the circular gauge. It is possible to achieve this by combining ranges and a marker pointer. The marker pointer has been made interactive, so the value changes as you drag it.</p>
    <p>More information on the circular gauge can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/circular-gauge/getting-started'>documentation section</a>.</p>
</ActionDescription>

<style>
    .templateAlign {
        font-style: oblique;
        margin-left: -20px;
        font-size: 20px;
        margin-top: -10px;
    }
</style>

<div class="control-section">
    <SfCircularGauge Theme="@Theme" @ref="@Gauge" EnablePointerDrag="true" EnableRangeDrag="true" Background="transparent">
        <CircularGaugeEvents OnDrag="OnDrag" />
        <CircularGaugeAxes>
            <CircularGaugeAxis Radius="80%" StartAngle="0" EndAngle="0">
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="180" ZIndex="1" Radius="0%">
                        <ContentTemplate>
                            <div class="templateAlign"><span>@TemplateValue %</span></div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
                <CircularGaugeAxisLabelStyle Offset="-1">
                    <CircularGaugeAxisLabelFont Size="0" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisLineStyle Width="0" />
                <CircularGaugeAxisMajorTicks Height="0" />
                <CircularGaugeAxisMinorTicks Height="0" />
                <CircularGaugeRanges>
                    <CircularGaugeRange Start="0" End="@PointerValue" StartWidth="12" EndWidth="12" Radius="100%" Color="#2C75DC" />
                    <CircularGaugeRange Start="@PointerValue" End="100" StartWidth="12" EndWidth="12" Radius="100%" Color="#BFD6F5" />
                </CircularGaugeRanges>
                <CircularGaugePointers>
                    <CircularGaugePointer Type="PointerType.Marker" Value="@PointerValue" MarkerShape="GaugeShape.Circle" Color="#2C75DC" Radius="97%" MarkerWidth="25" MarkerHeight="25">
                        <CircularGaugePointerAnimation Enable="false" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>

@code {
    public Theme Theme { get; set; }
    public SfCircularGauge Gauge;
    public double PointerValue = 30;
    public string TemplateValue = "30";
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    private void OnDrag(PointerDragEventArgs args)
    {
        PointerValue = args.CurrentValue;
        TemplateValue = (Math.Ceiling(args.CurrentValue)).ToString();
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }
}
