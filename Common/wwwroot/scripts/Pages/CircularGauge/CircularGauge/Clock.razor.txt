@page "/circular-gauge/clock"

@using System.Timers
@using Syncfusion.Blazor
@using Syncfusion.Blazor.CircularGauge
@using ThemeHelper
@inject NavigationManager NavigationManager
@inherits SampleBaseComponent;
@*Hidden:Lines*@
<PageTitle>Blazor Circular Gauge Clock Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Clock in Blazor Circular Gauge Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to create an analog clock that displays the time.</p>
</SampleDescription>
<ActionDescription>
    <p>In this example, a clock has been created by adding axis, minor ticks, major ticks, and needles in a circular gauge and customizing it accordingly. In addition, the clock ticks, displaying the time in a lively manner.</p>
    <p>More information on the circular gauge can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/circular-gauge/getting-started'>documentation section</a>.</p>
</ActionDescription>

<div class="control-section">
    <SfCircularGauge Theme="@Theme" @ref="NeedleRef" Background="transparent">
        <CircularGaugeAxes>
            <CircularGaugeAxis Radius="90%" StartAngle="0" EndAngle="0" Minimum="0" Maximum="12">
                <CircularGaugeAxisLabelStyle HiddenLabel="HiddenLabel.First" Offset="10">
                    <CircularGaugeAxisLabelFont FontFamily="inherit" />
                </CircularGaugeAxisLabelStyle>
                <CircularGaugeAxisLineStyle Width="2" />
                <CircularGaugeAxisMajorTicks Height="15" Interval="1" Width="2" Offset="5" />
                <CircularGaugeAxisMinorTicks Height="10" Width="1" Interval="0.2" Offset="5" />
                <CircularGaugePointers>
                    <CircularGaugePointer Value="10.2" Radius="70%" PointerWidth="3" NeedleStartWidth="2">
                        <CircularGaugePointerAnimation Enable="false" />
                        <CircularGaugeCap Radius="5" Color="white">
                            <CircularGaugeCapBorder Width="1" Color="#00A8B5" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="0%" />
                    </CircularGaugePointer>
                    <CircularGaugePointer Value="2" Radius="100%" PointerWidth="3" NeedleStartWidth="1">
                        <CircularGaugePointerAnimation Enable="false" />
                        <CircularGaugeCap Radius="5" Color="white">
                            <CircularGaugeCapBorder Width="1" Color="#00A8B5" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="0%" />
                    </CircularGaugePointer>
                    <CircularGaugePointer Value="@NeedlePointer" Radius="90%" PointerWidth="3" NeedleStartWidth="1" Color="#00A8B5">
                        <CircularGaugePointerAnimation Enable="false" />
                        <CircularGaugeCap Radius="5" Color="white">
                            <CircularGaugeCapBorder Width="1" Color="#00A8B5" />
                        </CircularGaugeCap>
                        <CircularGaugeNeedleTail Length="25%" Color="#00A8B5" />
                    </CircularGaugePointer>
                </CircularGaugePointers>
                <CircularGaugeAnnotations>
                    <CircularGaugeAnnotation Angle="290" Radius="0%" ZIndex="1">
                        <ContentTemplate>
                            <div style="margin-left: -50%;">
                                <SfCircularGauge Theme="@Theme" Height="150px" Width="150px" Background="transparent">
                                    <CircularGaugeAxes>
                                        <CircularGaugeAxis Radius="70%" StartAngle="0" EndAngle="0" Minimum="0" Maximum="12">
                                            <CircularGaugeAxisLabelStyle HiddenLabel="HiddenLabel.First" Offset="-5">
                                                <CircularGaugeAxisLabelFont FontFamily="inherit" Size="7px" />
                                            </CircularGaugeAxisLabelStyle>
                                            <CircularGaugeAxisLineStyle Width="2" />
                                            <CircularGaugeAxisMajorTicks Interval="2" Offset="2" />
                                            <CircularGaugeAxisMinorTicks Interval="0.4" Offset="2" />
                                            <CircularGaugePointers>
                                                <CircularGaugePointer Value="5" Radius="50%" PointerWidth="2" Color="#00A8B5">
                                                    <CircularGaugePointerAnimation Enable="false" />
                                                    <CircularGaugeCap Radius="0" />
                                                    <CircularGaugeNeedleTail Length="0%" />
                                                </CircularGaugePointer>
                                            </CircularGaugePointers>
                                        </CircularGaugeAxis>
                                    </CircularGaugeAxes>
                                </SfCircularGauge>
                            </div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                    <CircularGaugeAnnotation Angle="90" Radius="0%" ZIndex="1">
                        <ContentTemplate>
                            <div style="margin-left: -110%;margin-top: -50%;">
                                <SfCircularGauge Theme="@Theme" Height="150px" Width="150px" Background="transparent">
                                    <CircularGaugeAxes>
                                        <CircularGaugeAxis Radius="70%" StartAngle="0" EndAngle="0" Minimum="0" Maximum="12">
                                            <CircularGaugeAxisLabelStyle HiddenLabel="HiddenLabel.First" Offset="-5">
                                                <CircularGaugeAxisLabelFont FontFamily="inherit" Size="7px" />
                                            </CircularGaugeAxisLabelStyle>
                                            <CircularGaugeAxisLineStyle Width="2" />
                                            <CircularGaugeAxisMajorTicks Interval="2" Offset="2" />
                                            <CircularGaugeAxisMinorTicks Interval="0.4" Offset="2" />
                                            <CircularGaugePointers>
                                                <CircularGaugePointer Value="8" Radius="50%" PointerWidth="2" Color="#00A8B5">
                                                    <CircularGaugePointerAnimation Enable="false" />
                                                    <CircularGaugeCap Radius="0" />
                                                    <CircularGaugeNeedleTail Length="0%" />
                                                </CircularGaugePointer>
                                            </CircularGaugePointers>
                                        </CircularGaugeAxis>
                                    </CircularGaugeAxes>
                                </SfCircularGauge>
                            </div>
                        </ContentTemplate>
                    </CircularGaugeAnnotation>
                </CircularGaugeAnnotations>
            </CircularGaugeAxis>
        </CircularGaugeAxes>
    </SfCircularGauge>
</div>


@code{
    public Theme Theme { get; set; }
    public SfCircularGauge NeedleRef;
    public double NeedlePointer = 0.2;
    private Timer syncTimer = null;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        syncTimer = new Timer(1000);
        syncTimer.Elapsed += this.NeedlePointerUpdate;
        syncTimer.AutoReset = true;
        syncTimer.Enabled = true;
        Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
    }

    private void NeedlePointerUpdate(Object source, ElapsedEventArgs e)
    {
        NeedlePointer += 0.2;
        NeedleRef.SetPointerValueAsync(0, 2, NeedlePointer);
    }
}