@page "/rich-text-editor/markdown-overview"

@using Syncfusion.Blazor.RichTextEditor
@using Markdig;

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor Rich Text Editor Overview Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Overview in Blazor Rich Text Editor Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates markdown editing in the <a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor">Blazor Rich Text Editor</a> with complete features.</p>
</SampleDescription>
<ActionDescription>
    <p>The <a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor">Blazor Rich Text Editor</a> supports <a href=" https://www.syncfusion.com/blazor-components/blazor-wysiwyg-rich-text-editor/wysiwyg-markdown-editor">markdown editing</a> when the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.RichTextEditor.SfRichTextEditor.html#Syncfusion_Blazor_RichTextEditor_SfRichTextEditor_EditorMode">EditorMode</a> property is set to <code>Markdown</code>. </p>
    <ul>
        <li><code>Format Text</code> – Options to apply inline styles to the selected content like bold, italic, strikethrough and more.</li>
        <li><code>Sentence Style</code> – Options to format the sentence style in different ways such as heading level, quotation, and code snippet</li>
        <li><code>Undo and Redo</code> - Options to undo and redo operations.</li>
        <li><code>Lists</code> - Option to create numbered lists and bulleted lists.</li>
        <li><code>Links</code> - A Hyperlink can be inserted into the editor for quick access to related information.</li>
        <li><code>Image</code> - Inserts and manages images.</li>
        <li><code>Table</code> - Inserts and manages Tables.</li>
        <li><code>Preview</code> - Custom command which shows the preview of markdown syntax using a third-party plugin.</li>
    </ul>
</ActionDescription>

<div class="control-section">
    @if (!IsPreview)
    {
        <SfRichTextEditor Height="250px" EditorMode="EditorMode.Markdown" SaveInterval="1" @bind-Value="@MarkdownValue">
            <RichTextEditorToolbarSettings Items="@Tools">
                <RichTextEditorCustomToolbarItems>
                    <RichTextEditorCustomToolbarItem Name="Preview">
                        <Template>
                            <button id="preview-code" class="e-tbar-btn e-control e-btn e-icon-btn" @onclick="PreviewClick">
                                <span class="e-btn-icon e-md-preview e-icons"></span>
                            </button>
                        </Template>
                    </RichTextEditorCustomToolbarItem>
                </RichTextEditorCustomToolbarItems>
            </RichTextEditorToolbarSettings>
            <RichTextEditorMarkdownOptions ListSyntax="@ListSyntax" />
            <RichTextEditorEvents ValueChange="@OnValueChange" />
        </SfRichTextEditor>
    }
    else
    {
        <SfRichTextEditor Readonly="true" @bind-Value="@HtmlValue">
            <RichTextEditorToolbarSettings Items="@Items">
                <RichTextEditorCustomToolbarItems>
                    <RichTextEditorCustomToolbarItem Name="code">
                        <Template>
                            <button id="MD_Preview" class="e-tbar-btn e-control e-btn e-icon-btn" @onclick="CodeClick">
                                <span class="e-btn-icon e-preview e-icons"></span>
                            </button>
                        </Template>
                    </RichTextEditorCustomToolbarItem>
                </RichTextEditorCustomToolbarItems>
            </RichTextEditorToolbarSettings>
        </SfRichTextEditor>
    }
</div>

@code{
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    private bool IsPreview { get; set; }
    private string HtmlValue { get; set; }
    private MarkdownPipeline Pipeline { get; set; }

    private string MarkdownValue { get; set; } = @"The sample is added to showcase **markdown editing**.

Type or edit the content and apply formatting to view markdown formatted content.

We can add our own custom formation syntax for the Markdown formation, [sample link](https://blazor.syncfusion.com/demos/rich-text-editor/markdown-custom-format).

The third-party library **Marked** is used in this sample to convert markdown into HTML content.";

    private List<ToolbarItemModel> Items = new List<ToolbarItemModel>() 
    {
        new ToolbarItemModel() { Name = "code", TooltipText = "Code View" },
    };

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Name = "Preview", TooltipText = "Preview" },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    private Dictionary<string, string> ListSyntax { get; set; } = new Dictionary<string, string>()
    {
        { "OL", "1., 2., 3." }
    };

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        Pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        this.HtmlValue = Markdig.Markdown.ToHtml(MarkdownValue, Pipeline);
        base.OnInitialized();
    }

    private void OnValueChange(Syncfusion.Blazor.RichTextEditor.ChangeEventArgs args)
    {
        if (args.Value == null)
        {
            this.HtmlValue = null;
        }
        else
        {
            this.HtmlValue = Markdig.Markdown.ToHtml(args.Value, Pipeline);
        }
    }

    private void PreviewClick()
    {
        this.IsPreview = true;
    }

    private void CodeClick()
    {
        this.IsPreview = false;
    }
}

<style>
    .e-content td,
    .e-content th {
        border: 1px solid #bdbdbd;
        padding: 0 5px;
    }

    .e-icon-btn .e-md-preview::before {
        content: '\e345';
    }

    .e-icon-btn .e-preview::before {
        content: '\e350';
    }

    .bootstrap4 .e-icon-btn .e-md-preview::before {
        content: '\e787';
    }

    .bootstrap4 .e-icon-btn .e-preview::before {
        content: '\e790';
    }

    .tailwind .e-icon-btn .e-md-preview::before,
    .tailwind-dark .e-icon-btn .e-md-preview::before,
    .bootstrap5 .e-icon-btn .e-md-preview::before,
    .bootstrap5-dark .e-icon-btn .e-md-preview::before,
    .fluent .e-icon-btn .e-md-preview::before,
    .fluent-dark .e-icon-btn .e-md-preview::before {
        content: '\e7de';
    }

    .tailwind .e-icon-btn .e-preview::before,
    .tailwind-dark .e-icon-btn .e-preview::before,
    .fluent .e-icon-btn .e-preview::before,
    .fluent-dark .e-icon-btn .e-preview::before,
    .bootstrap5 .e-icon-btn .e-preview::before,
    .bootstrap5-dark .e-icon-btn .e-preview::before {
        content: '\e80e';
    }
</style>
