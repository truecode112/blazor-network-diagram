@page "/diagramcomponent/annotations"

@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using shapes = Syncfusion.Blazor.Diagram.NodeShapes
@using SelectionChangedEventArgs = Syncfusion.Blazor.Diagram.SelectionChangedEventArgs

@inherits SampleBaseComponent;
@*Hidden:Lines*@
@implements IDisposable
@inject NavigationManager NavigationManager
<PageTitle>Blazor Diagram Annotations Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Annotations in Blazor Diagram Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

@*Hidden:Lines*@
<SampleDescription>
   <p>This sample illustrates how to add textual descriptions to shapes and customize the position and appearance of the annotation .</p>
</SampleDescription>
<ActionDescription>
    <p>This example shows how to add textual descriptions to shapes, how to position the mover the shapes and customize the description's position and appearance. To change the position of the description, select a node and choose the template in the property panel. The <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Node.html#Syncfusion_Blazor_Diagram_Node_Annotations'>annotations</a></code> property can be used to add descriptions.</p><p>The <code><a target='_blank'href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.ShapeAnnotation.html#Syncfusion_Blazor_Diagram_ShapeAnnotation_Offset'>offset</a></code>,<code><a target='_blank'href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Annotation.html#Syncfusion_Blazor_Diagram_Annotation_HorizontalAlignment'>horizontal alignment</a></code>, and <code><a target='_blank'href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.Annotation.html#Syncfusion_Blazor_Diagram_Annotation_VerticalAlignment'>vertical alignment</a></code> properties are e used to customize the position of the descriptions. The<code><a target='_blank'href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.TextStyle.html#Syncfusion_Blazor_Diagram_TextStyle_Bold'>bold</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.TextStyle.html#Syncfusion_Blazor_Diagram_TextStyle_Italic'>italic</a></code>, <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.TextStyle.html#Syncfusion_Blazor_Diagram_TextStyle_FontSize'>font size</a></code>, and <code><a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Diagram.TextStyle.html#Syncfusion_Blazor_Diagram_TextStyle_FontFamily'>font family</a></code>properties are used to customize the appearance of the descriptions.</p>
</ActionDescription>
@*End:Hidden*@

@*Hidden:Lines*@
<div class="col-lg-9 control-section sb-property-border">
    <style>
        .image-pattern-style {
            background-color: white;
            background-size: contain;
            background-repeat: no-repeat;
            height: 60px;
            width: calc((100% - 18px) / 3);
            cursor: pointer;
            border: 1px solid #D5D5D5;
            background-position: center;
            float: left;
        }

        .sb-property-border {
            border-right: 1px solid #D7D7D7;
        }

        .property-panel-header {
            padding-top: 15px;
            padding-bottom: 5px;
            font-weight: 600;
            font-size: 15px;
        }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

        .e-remove-selection .property-section-content {
            pointer-events: none;
        }

        .column-style {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: calc((100% - 12px) / 3);
        }

        .row {
            margin-left: 0px;
            margin-right: 0px;
            display: block;
        }

        .row-header {
            font-size: 13px;
            font-weight: 600;
        }

        .e-checkbox-wrapper .e-label {
            font-size: 12px;
        }

        .e-selected-style {
            border-color: #006CE6;
            border-width: 2px;
        }

        .col-xs-6 {
            padding-left: 0px;
            padding-right: 0px;
            padding-top: 5px;
        }

        .buttonstyle {
            display: table;
            height: 35px;
            padding-right: 0px;
            padding-left: 20px;
            width: 30px;
            float: left;
        }

        .column-style custom {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 70px;
        }

        .e-btn .e-btn-icon, .e-css.e-btn .e-btn-icon {
            display: inline-block;
            font-size: 14px;
            margin-top: -2px;
            vertical-align: middle;
            width: 1em;
        }


        @@font-face {
            font-family: 'e-bg-icons';
            src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
            font-weight: normal;
            font-style: normal;
        }

        #bold, #italic, #underline {
            width: 100%;
        }

        .bg-icons {
            font-family: 'e-bg-icons' !important;
            speak: none;
            font-size: 14px;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .e-btngrp-bold::before {
            content: '\e71a'
        }

        .e-btngrp-italic::before {
            content: '\e708';
        }

        .e-btngrp-underline::before {
            content: '\e703';
        }

        .texstyle {
            display: table;
            height: 35px;
            padding-right: 4px;
            padding-left: 0px;
            width: 50%;
            padding-top: 15px;
            float: left;
            position: relative;
            min-height: 1px;
        }
    </style>
    @*End:Hidden*@

    <div id="diagram-space" class="content-wrapper">
        <SfDiagramComponent Height="640px" Constraints="@constraints" @ref="@diagram" Created="OnCreated" SelectionChanged="@SelectionChanged" Nodes="@nodes" Connectors="@connectors">
            <SnapSettings Constraints=SnapConstraints.ShowLines>
            </SnapSettings>
        </SfDiagramComponent>
    </div>
    @*Hidden:Lines*@
</div>
@*End:Hidden*@
@*Hidden:Lines*@
<div class="col-lg-3 property-section">
    <div class="property-panel-header">
        Properties
    </div>
    <fieldset>
        <div class="@appearance">
            <div class="row property-panel-content" id="appearance">
                <div class="row row-header" style="padding-top: 10px">
                    Alignment
                </div>
                <div class="row">
                    <div class="row" style="padding-top: 8px">
                        <div class="@dictionary["left"]" id="left" @onclick="@(() => UpdatePosition("left"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/top-left.png")); margin-right: 4px;pointer-events:@nodeSelect">
                        </div>
                        <div class="@dictionary["right"]" id="right" @onclick="@(() => UpdatePosition("right"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/top-right.png")); margin: 0px 4px;pointer-events:@nodeSelect">
                        </div>
                        <div class="@dictionary["bottoml"]" id="bottoml" @onclick="@(() => UpdatePosition("bottoml"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/bottom-left.png"));margin-left: 4px;pointer-events:@nodeSelect">
                        </div>
                    </div>
                    <div class="row" style="padding-top: 8px">
                        <div class="@dictionary["bottomr"]" id="bottomr" @onclick="@(() => UpdatePosition("bottomr"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/bottom-right.png")); margin-right: 4px;pointer-events:@nodeSelect">
                        </div>
                        <div class="@dictionary["center"]" id="center" @onclick="@(() => UpdatePosition("center"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/center.png")); margin: 0px 4px;pointer-events:@nodeSelect">
                        </div>
                        <div class="@dictionary["bottomcenter_top"]" id="bottomcenter_top" @onclick="@(() => UpdatePosition("bottomcenter_top"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/bottom-center.png"));margin-left: 4px;pointer-events:@nodeSelect">
                        </div>
                    </div>
                    <div class="row" style="padding-top: 8px">
                        <div class="@dictionary["sourcetext"]" id="bottomr" @onclick="@(() => UpdatePosition("sourcetext"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/sourcetext.png")); margin-right: 4px ;pointer-events:@connectorSelect">
                        </div>
                        <div class="@dictionary["targettext"]" id="center" @onclick="@(() => UpdatePosition("targettext"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/targettext.png")); margin: 0px 4px;pointer-events:@connectorSelect">
                        </div>
                        <div class="@dictionary["abovecenter"]" id="bottomcenter_top" @onclick="@(() => UpdatePosition("abovecenter"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/abovecenter.png")); margin-left: 4px;pointer-events:@connectorSelect">
                        </div>
                    </div>
                    <div class="row" style="padding-top: 8px">
                        <div class="@dictionary["belowcenter"]" id="bottomr" @onclick="@(() => UpdatePosition("belowcenter"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/belowcenter.png")); margin-right: 4px;pointer-events:@connectorSelect">
                        </div>
                        <div class="@dictionary["centertext"]" id="center" @onclick="@(() => UpdatePosition("centertext"))" style="background-image: url(@(SampleService.WebAssetsPath + "images/diagram/annotation/centertext.png")); margin: 0px 4px;pointer-events:@connectorSelect">
                        </div>

                    </div>
                </div>
            </div>

            <div class="row property-panel-content" style="padding-top: 10px">
                <div class="row row-header" style="padding-top: 10px">
                    Appearance
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="buttonstyle">
                        <SfButton @ref="@boldButton" @bind-Disabled="bold" ID="bold" OnClick="FontBold" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-bold e-icons"></SfButton>
                    </div>
                    <div class="buttonstyle ">
                        <SfButton @ref="@italicButton" ID="italic" @bind-Disabled="italic" OnClick="FontItalic" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-italic e-icons"></SfButton>
                    </div>
                    <div class="buttonstyle">
                        <SfButton @ref="@underLineButton" ID="underline" @bind-Disabled="underLine" OnClick="FontUnderLine" CssClass="boldwidth button" iconCss="e-btn-icon e-de-ctnr-underline e-icons"></SfButton>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Font Size
                    </div>
                    <div class="col-xs-6">
                        <SfNumericTextBox @ref="@fontSize" ID="fontSize" TValue="int" @bind-Value="@fontSizeValue" Min="10" Max="50" @bind-Enabled="font" Format="##.##" Step="1" Width="100px" CssClass="textboxstyle">
                            <NumericTextBoxEvents TValue="int" ValueChange="@FontSizeChange"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Font Style
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="@string" Width="100px" TItem="@FontFamily" @bind-Value="@fontStyle" ID="fontFamily" @bind-Enabled="@fontfamily" PopupHeight="120" Placeholder="Select a font type" CssClass="textboxstyle" PopupWidth="150" DataSource="@FontFamilyLists">
                            <DropDownListEvents TItem="FontFamily" TValue="string" ValueChange="FontChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Text Wrapping
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="@string" Width="100px" TItem="@TextWrapping" @bind-Value="@textWrappingValue" @bind-Enabled="textwrapping" ID="TextWrapping" Placeholder="NoWrap" CssClass="textboxstyle" PopupWidth="150" DataSource="@TextWrappingList">
                            <DropDownListEvents TItem="TextWrapping" TValue="string" ValueChange="TextWrappingChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Text Overflow
                    </div>
                    <div class="col-xs-6">
                        <SfDropDownList TValue="@string" Width="100px" TItem="@TextOverFlow" @bind-Value="@textOverFlowValue" ID="TextOverFlow" @bind-Enabled="textoverflow" Placeholder="Wrap" CssClass="textboxstyle" PopupWidth="150" DataSource="@TextOverFlowList">
                            <DropDownListEvents TItem="TextOverFlow" TValue="string" ValueChange="TextOverFlowChange"></DropDownListEvents>
                            <DropDownListFieldSettings Text="Name" Value="Name"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
                <div class="row" style="padding-top: 8px">
                    <div class="texstyle">
                        Font Color
                    </div>
                    <div class="col-xs-6">
                        <SfColorPicker @bind-Disabled="colorPicker" ValueChange="OnFillColorChange" @bind-Value="@fillColor"></SfColorPicker>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
</div>
@*End:Hidden*@
@code
{
    @*Hidden:Lines*@
    private string canonicalURL { get; set; }
    bool bold = false;
    string nodeSelect = "";
    string connectorSelect = "none";
    bool italic = false;
    bool underLine = false;
    bool fontfamily = true;
    bool textwrapping = true;
    bool textoverflow = true;
    bool font = true;
    bool colorPicker = false;
    string selectedPanel = "center";
    private bool isUpdatePanelOnly = false;
    string appearance = "e-remove-selection";
    const string selectedItem = "image-pattern-style e-selected-style";
    int fontSizeValue = 12;
    string fillColor = "#000";
    string textWrappingValue = "NoWrap";
    string fontStyle = "Arial";
    string textOverFlowValue = "Wrap";
    const string unSelectedItem = "image-pattern-style";

    private string styleValue = "background-color:#008000";

    //Define bold, italic, underline button
    SfButton boldButton;
    SfButton italicButton;
    SfButton underLineButton;
    SfNumericTextBox<int> fontSize;

    //Define selected item/unselected item dictionary
    Dictionary<string, string> dictionary = new Dictionary<string, string>() { { "left", unSelectedItem }, { "centertext", unSelectedItem }, { "belowcenter", unSelectedItem }, { "abovecenter", unSelectedItem }, { "targettext", unSelectedItem }, { "sourcetext", unSelectedItem }, { "right", unSelectedItem }, { "center", unSelectedItem }, { "bottomr", unSelectedItem }, { "bottoml", unSelectedItem }, { "bottomcenter_top", unSelectedItem } };

    @*End:Hidden*@

    //Define sfdiagramComponent
    SfDiagramComponent diagram;

    public DiagramConstraints constraints { get; set; }

    //Defines diagrams's nodes collection
    public DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();

    //Defines diagrams's connectors collection
    public DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    private void OnCreated()
    {
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[2] });
    }

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        constraints = DiagramConstraints.Default;

        Node newProject = CreateNode(130, 40, 430, 80, NodeFlowShapes.Terminator, "New project", "newProject");
        Node design = CreateNode(170, 40, 430, 160, NodeFlowShapes.Process, "Project planning and designing", "design");
        Node coding = CreateNode(130, 40, 430, 250, NodeFlowShapes.Process, "Development", "coding");
        Node testing = CreateNode(130, 40, 430, 360, NodeFlowShapes.Process, "Testing", "testing");
        Node errors = CreateNode(200, 50, 430, 470, NodeFlowShapes.Decision, "Is errors?", "errors");
        Node completed = CreateNode(130, 40, 430, 570, NodeFlowShapes.Terminator, "Project completed", "completed");

        CreateNodePort(design, "designPort", 0, 0.5);
        CreateNodePort(coding, "codingPort", 1, 0.5);
        CreateNodePort(errors, "errorsPort2", 1, 0.5);
        CreateNodePort(errors, "errorsPort1", 0, 0.5);
        OrthogonalSegment designOrthogonalSegment = new OrthogonalSegment()
        {
            Type = ConnectorSegmentType.Orthogonal,
            Direction = Direction.Left,
            Length = 120,
        };
        OrthogonalSegment codingOrthogonalSegment = new OrthogonalSegment
        {
            Type = ConnectorSegmentType.Orthogonal,
            Length = 100,
            Direction = Direction.Right,
        };
        DiagramObjectCollection<ConnectorSegment> designSegment = new DiagramObjectCollection<ConnectorSegment>() { designOrthogonalSegment };

        DiagramObjectCollection<ConnectorSegment> codingSegment = new DiagramObjectCollection<ConnectorSegment>() { codingOrthogonalSegment };

        CreateConnector("newProject", "design", "", null, null, null);
        CreateConnector("design", "coding", "", null, null, null);
        CreateConnector("coding", "testing", "Coding completed", null, null, null);
        CreateConnector("testing", "errors", "Testing completed", null, null, null);
        CreateConnector("errors", "completed", "No errors", null, null, null);
        CreateConnector("errors", "coding", "Production issues", "errorsPort2", "codingPort", codingSegment);
        CreateConnector("errors", "design", "Design errors", "errorsPort1", "designPort", designSegment);
    }

    //Create nodes
    private Node CreateNode(double unitWidth, double unitHeight, double offsetx, double offsety, NodeFlowShapes shape, string text, string id)
    {
        TextStyle textStyle = new TextStyle() { FontSize = 13, TextWrapping = TextWrap.WrapWithOverflow, Bold = true };
        ShapeAnnotation shapeAnnotation = new ShapeAnnotation() { Content = text, Style = textStyle };
        Node node = new Node()
        {
            Width = unitWidth,
            Height = unitHeight,
            OffsetX = offsetx,
            OffsetY = offsety,
            ID = id,
            Style = new ShapeStyle() { Fill = "#98FB98", StrokeColor = "#008000" },
            Shape = new FlowShape() { Shape = shape, Type = shapes.Flow },
            Annotations = new DiagramObjectCollection<ShapeAnnotation>() { shapeAnnotation }
        };
        nodes.Add(node);
        return node;
    }

    //Create ports
    private void CreateNodePort(Node node, string id, double nodeoffsetx, double nodeoffsety)
    {
        PointPort nodePort = new PointPort()
        {
            ID = id,
            Offset = new DiagramPoint() { X = nodeoffsetx, Y = nodeoffsety },
        };

        node.Ports.Add(nodePort);
    }

    //Create connectors
    private void CreateConnector(string sourceNode, string targetNode, string text,
      string sourcePort, string targetPort, DiagramObjectCollection<ConnectorSegment> segment = null)
    {
        TextStyle textStyle = new TextStyle() { FontSize = 13, TextWrapping = TextWrap.WrapWithOverflow, Bold = true };
        PathAnnotation pathAnnotation = new PathAnnotation() { Content = text, Style = textStyle };
        Connector connector = new Connector()
        {
            SourceID = sourceNode,
            TargetID = targetNode,
            SourcePortID = sourcePort,
            TargetPortID = targetPort,
            Style = new ShapeStyle() { Fill = "#008000", StrokeWidth = 1 },
            Annotations = new DiagramObjectCollection<PathAnnotation>() { pathAnnotation },
        };
        if (segment != null)
        {
            connector.Type = ConnectorSegmentType.Orthogonal;
            connector.Segments = segment;
        }
        connectors.Add(connector);
    }

    //Update annotation bold property
    private void FontBold()
    {
        UpdateAnnotation("bold", true);
    }

    //Update annotation italic property
    private void FontItalic()
    {
        UpdateAnnotation("italic", true);
    }

    //Update annotation underline property
    private void FontUnderLine()
    {
        UpdateAnnotation("underline", true);
    }

    //Update annotation fontfamily
    private void FontChange(ChangeEventArgs<string, FontFamily> args)
    {
        UpdateAnnotation("fontfamily", args.Value);
    }

    //Update annotation textwrap property
    private void TextWrappingChange(ChangeEventArgs<string, TextWrapping> args)
    {
        UpdateAnnotation("textwrapping", args.Value);
    }

    //Update annotation textoverflow property
    private void TextOverFlowChange(ChangeEventArgs<string, TextOverFlow> args)
    {
        UpdateAnnotation("textoverflow", args.Value);
    }
    //Update annotation fontsize value
    private void FontSizeChange(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        fontSizeValue = int.Parse(args.Value.ToString());
        UpdateAnnotation("fontsize", fontSizeValue);
    }
    private void SelectionChanged(SelectionChangedEventArgs args)
    {
        if (args.NewValue.Count > 0)
        {
            if (args.NewValue[0] is Node)
            {
                nodeSelect = "";
                connectorSelect = "none";
                ShapeAnnotation shapeAnnotation = (args.NewValue[0] as Node).Annotations[0];
                HorizontalAlignment horizontalAlignment = shapeAnnotation.HorizontalAlignment;
                VerticalAlignment verticalAlignment = shapeAnnotation.VerticalAlignment;
                if (horizontalAlignment == HorizontalAlignment.Center && verticalAlignment == VerticalAlignment.Center)
                {
                    UpdateSelection("center");
                }
                else if (horizontalAlignment == HorizontalAlignment.Left && verticalAlignment == VerticalAlignment.Top)
                {
                    UpdateSelection("bottomr");
                }
                else if (horizontalAlignment == HorizontalAlignment.Right && verticalAlignment == VerticalAlignment.Top)
                {
                    UpdateSelection("bottoml");
                }
                else if (horizontalAlignment == HorizontalAlignment.Left && verticalAlignment == VerticalAlignment.Bottom)
                {
                    UpdateSelection("right");
                }
                else if (horizontalAlignment == HorizontalAlignment.Right && verticalAlignment == VerticalAlignment.Bottom)
                {
                    UpdateSelection("left");
                }
                else if (horizontalAlignment == HorizontalAlignment.Center && verticalAlignment == VerticalAlignment.Bottom)
                {
                    UpdateSelection("bottomcenter_top");
                }
                if (shapeAnnotation.Style.Color == "black")
                {
                    shapeAnnotation.Style.Color = "#000";
                }
                fillColor = shapeAnnotation.Style.Color;
                textWrappingValue = shapeAnnotation.Style.TextWrapping.ToString();
                textOverFlowValue = shapeAnnotation.Style.TextOverflow.ToString();
                fontStyle = shapeAnnotation.Style.FontFamily;
                fontSizeValue = ((int)shapeAnnotation.Style.FontSize);
            }
            if (args.NewValue[0] is Connector)
            {
                connectorSelect = "";
                nodeSelect = "none";
                PathAnnotation pathAnnotation = (args.NewValue[0] as Connector).Annotations[0];
                if (pathAnnotation.Offset == 0)
                {
                    UpdateSelection("sourcetext");
                }
                else if (pathAnnotation.Offset == 1)
                {
                    UpdateSelection("targettext");
                }
                else if (pathAnnotation.Offset == 0.5 && pathAnnotation.Alignment == AnnotationAlignment.After)
                {
                    UpdateSelection("abovecenter");
                }
                else if (pathAnnotation.Offset == 0.5 && pathAnnotation.Alignment == AnnotationAlignment.Before)
                {
                    UpdateSelection("belowcenter");
                }
                else if (pathAnnotation.Offset == 0.5 && pathAnnotation.Alignment == AnnotationAlignment.Center)
                {
                    UpdateSelection("centertext");
                }
                if (pathAnnotation.Style.Color == "black")
                {
                    pathAnnotation.Style.Color = "#000";
                }
                fillColor = pathAnnotation.Style.Color;
                textWrappingValue = pathAnnotation.Style.TextWrapping.ToString();
                textOverFlowValue = pathAnnotation.Style.TextOverflow.ToString();
                fontStyle = pathAnnotation.Style.FontFamily;
                fontSizeValue = ((int)pathAnnotation.Style.FontSize);
            }
        }
        if (args.NewValue != null && args.NewValue.Count > 0)
        {
            dictionary[selectedPanel] = selectedItem;
            if (args.NewValue[0] is Node)
            {
                nodeSelect = "";
                connectorSelect = "none";
            }
            else if (args.NewValue[0] is Connector)
            {
                nodeSelect = "none";
                connectorSelect = "";
            }
        }
        else
        {
            dictionary = new Dictionary<string, string>() { { "left", unSelectedItem }, { "centertext", unSelectedItem }, { "belowcenter", unSelectedItem }, { "abovecenter", unSelectedItem }, { "targettext", unSelectedItem }, { "sourcetext", unSelectedItem }, { "right", unSelectedItem }, { "center", unSelectedItem }, { "bottomr", unSelectedItem }, { "bottoml", unSelectedItem }, { "bottomcenter_top", unSelectedItem } };
            nodeSelect = "none";
            connectorSelect = "none";
        }
        if (diagram.SelectionSettings.Nodes.Count > 0 || diagram.SelectionSettings.Connectors.Count > 0)
        {
            bold = false;
            italic = false;
            underLine = false;
            fontfamily = true;
            textoverflow = true;
            textwrapping = true;
            colorPicker = false;
            font = true;
        }
        else
        {
            bold = true;
            italic = true;
            underLine = true;
            fontfamily = false;
            textoverflow = false;
            textwrapping = false;
            colorPicker = true;
            font = false;
        }
    }

    //Update fill color for annotations
    public void OnFillColorChange(ColorPickerEventArgs args)
    {
        this.styleValue = "background-color:" + args.CurrentValue.Hex;
        UpdateAnnotation("fontcolor", args.CurrentValue.Hex);
    }

    //Update annotation
    private void UpdateAnnotation(string name, object value)
    {
        if (diagram.SelectionSettings.Connectors.Count > 0)
        {
            for (var i = 0; i < diagram.SelectionSettings.Connectors.Count; i++)
            {
                var connector = diagram.SelectionSettings.Connectors[i];
                for (var j = 0; j < connector.Annotations.Count; j++)
                {
                    TextStyle annotationStyle = connector.Annotations[j].Style;
                    UpdateAnnotationStyle(name, annotationStyle, value);

                }
            }
        }
        if (diagram.SelectionSettings.Nodes.Count > 0)
        {
            for (var i = 0; i < diagram.SelectionSettings.Nodes.Count; i++)
            {
                var node = diagram.SelectionSettings.Nodes[i];
                for (var j = 0; j < node.Annotations.Count; j++)
                {
                    TextStyle annotationStyle = node.Annotations[j].Style;
                    UpdateAnnotationStyle(name, annotationStyle, value);
                }
            }
        }
    }

    //Update annotation style
    private void UpdateAnnotationStyle(string option, TextStyle textStyle, object value)
    {
        switch (option)
        {
            case "fontsize":
                textStyle.FontSize = Double.Parse(value.ToString());
                break;
            case "underline":
                textStyle.TextDecoration = textStyle.TextDecoration == TextDecoration.Underline ? TextDecoration.None : TextDecoration.Underline;
                break;
            case "fontfamily":
                textStyle.FontFamily = value.ToString();
                break;
            case "bold":
                if (textStyle.Bold)
                    textStyle.Bold = false;
                else
                    textStyle.Bold = true;
                break;
            case "italic":
                if (textStyle.Italic)
                    textStyle.Italic = false;
                else
                    textStyle.Italic = true;
                break;
            case "fontcolor":
                textStyle.Color = value.ToString();
                break;
            case "textwrapping":
                string textwrap = value.ToString();
                if (textwrap == "NoWrap")
                {
                    textStyle.TextWrapping = TextWrap.NoWrap;
                }
                else if (textwrap == "Wrap")
                {
                    textStyle.TextWrapping = TextWrap.Wrap;
                }
                else if (textwrap == "WrapWithOverflow")
                {
                    textStyle.TextWrapping = TextWrap.WrapWithOverflow;
                }
                break;
            case "textoverflow":
                string textOverFlow = value.ToString();
                if (textOverFlow == "Ellipsis")
                {
                    textStyle.TextOverflow = TextOverflow.Ellipsis;
                }
                else if (textOverFlow == "Clip")
                {
                    textStyle.TextOverflow = TextOverflow.Clip;
                }
                else if (textOverFlow == "Wrap")
                {
                    textStyle.TextOverflow = TextOverflow.Wrap;
                }
                break;
        }
    }

    //Update annotaion position
    private void UpdatePosition(string id, ObservableCollection<Node> Nodes)
    {
        for (int i = 0; i < Nodes.Count; i++)
        {
            Node node1 = Nodes[i] as Node;
            IDiagramObject node2 = diagram.GetObject(node1.ID) as IDiagramObject;
            Node node = node2 as Node;
            for (int j = 0; j < node.Annotations.Count; j++)
            {
                ShapeAnnotation annotation = node.Annotations[j] as ShapeAnnotation;
                UpdateAnnotation(id, annotation);
            }
        }
    }

    //Update annotation position
    private void UpdatePosition(string id)
    {
        for (int i = 0; i < diagram.SelectionSettings.Nodes.Count; i++)
        {
            Node node = diagram.SelectionSettings.Nodes[i] as Node;
            for (int j = 0; j < node.Annotations.Count; j++)
            {
                ShapeAnnotation annotation = node.Annotations[j] as ShapeAnnotation;
                UpdateAnnotation(id, annotation);
            }
        }
        for (int i = 0; i < diagram.SelectionSettings.Connectors.Count; i++)
        {
            Connector node = diagram.SelectionSettings.Connectors[i] as Connector;
            for (int j = 0; j < node.Annotations.Count; j++)
            {
                PathAnnotation annotation = node.Annotations[j] as PathAnnotation;
                UpdateAnnotationValue(id, annotation);
            }
        }
    }

    //Update path annotation
    private void UpdateAnnotationValue(string id, PathAnnotation annotation)
    {
        diagram.BeginUpdate();
        if (!isUpdatePanelOnly)
        {
            switch (id)
            {
                case "sourcetext":
                    annotation.Offset = 0;
                    break;
                case "targettext":
                    annotation.Offset = 1;
                    break;
                case "abovecenter":
                    annotation.Offset = 0.5;
                    annotation.Alignment = AnnotationAlignment.After;
                    break;
                case "belowcenter":
                    annotation.Offset = 0.5;
                    annotation.Alignment = AnnotationAlignment.Before;
                    break;
                case "centertext":
                    annotation.Offset = 0.5;
                    annotation.Alignment = AnnotationAlignment.Center;
                    break;
            }
        }
        UpdateSelection(id);
        UpateProprtyPanelValue(annotation);
        _ = diagram.EndUpdate();
    }

    //Update pathannotation property panel value
    private void UpateProprtyPanelValue(PathAnnotation annotation)
    {
        fontSizeValue = int.Parse(annotation.Style.FontSize.ToString());
        fontStyle = annotation.Style.FontFamily;
        fillColor = annotation.Style.Color;
    }

    //Update shapeannotation alignment
    private void UpdateAnnotation(string id, ShapeAnnotation annotation)
    {
        diagram.BeginUpdate();
        if (!isUpdatePanelOnly)
        {
            switch (id)
            {
                case "left":
                    SetAnnotationPosition(annotation, 0, 0, VerticalAlignment.Top, HorizontalAlignment.Left);
                    break;
                case "right":
                    SetAnnotationPosition(annotation, 1, 0, VerticalAlignment.Top, HorizontalAlignment.Right);
                    break;
                case "bottoml":
                    SetAnnotationPosition(annotation, 0, 1, VerticalAlignment.Bottom, HorizontalAlignment.Left);
                    break;
                case "bottomr":
                    SetAnnotationPosition(annotation, 1, 1, VerticalAlignment.Bottom, HorizontalAlignment.Right);
                    break;
                case "center":
                    SetAnnotationPosition(annotation, 0.5f, 0.5f, VerticalAlignment.Center, HorizontalAlignment.Center);
                    break;
                case "bottomcenter_top":
                    SetAnnotationPosition(annotation, 0.5f, 1, VerticalAlignment.Top, HorizontalAlignment.Center);
                    break;
            }
        }
        UpdateSelection(id);
        UpateProprtyPanel(annotation);
        _ = diagram.EndUpdate();
    }

    //Update shapeannotation property panel
    private void UpateProprtyPanel(ShapeAnnotation annotation)
    {
        fontSizeValue = int.Parse(annotation.Style.FontSize.ToString());
        fontStyle = annotation.Style.FontFamily;
        fillColor = annotation.Style.Color;
    }

    //Update selection
    private void UpdateSelection(string id)
    {
        for (int i = 0; i < dictionary.Count; i++)
        {
            var value = dictionary.Values.ElementAt(i);
            var key = dictionary.Keys.ElementAt(i);
            if (dictionary.ContainsKey(id) && key == id)
            {
                value = selectedItem;
            }
            else
            {
                value = unSelectedItem;
            }
            dictionary.Remove(key);
            dictionary.Add(key, value);
        }
        dictionary[selectedPanel] = unSelectedItem;
        selectedPanel = id;
        dictionary[id] = selectedItem;
    }

    //Set annotation position
    private void SetAnnotationPosition(ShapeAnnotation annotation, float offsetX, float offsetY, VerticalAlignment vAlignment, HorizontalAlignment hAlignment)
    {
        if (annotation.Offset.X != offsetX)
            annotation.Offset.X = offsetX;
        if (annotation.Offset.Y != offsetY)
            annotation.Offset.Y = offsetY;
        annotation.VerticalAlignment = vAlignment;
        annotation.HorizontalAlignment = hAlignment;
        annotation.Margin = new DiagramThickness();
        if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Left)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Right;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
            annotation.Margin = new DiagramThickness() { Left = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Right)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Left;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
            annotation.Margin = new DiagramThickness() { Right = 3, Top = 3 };
        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Left)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Right;
            annotation.VerticalAlignment = VerticalAlignment.Top;
            annotation.Margin = new DiagramThickness() { Left = 3, Bottom = 3 };

        }
        else if (vAlignment == VerticalAlignment.Bottom && hAlignment == HorizontalAlignment.Right)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Left;
            annotation.VerticalAlignment = VerticalAlignment.Top;
            annotation.Margin = new DiagramThickness() { Right = 3, Bottom = 3 };
        }
        else if (vAlignment == VerticalAlignment.Top && hAlignment == HorizontalAlignment.Center)
        {
            annotation.HorizontalAlignment = HorizontalAlignment.Center;
            annotation.VerticalAlignment = VerticalAlignment.Bottom;
        }
    }
    @*Hidden:Lines*@
    public class FontFamily
    {
        public string Name { get; set; }
    }
    private List<FontFamily> FontFamilyLists = new List<FontFamily>() {
        new FontFamily() { Name ="Arial"},
        new FontFamily() { Name ="Aharoni" },
        new FontFamily() { Name ="Bell MT"},
        new FontFamily() { Name = "Fantasy" },
        new FontFamily() { Name ="Times New Roman" },
        new FontFamily() { Name ="Segoe UI" },
        new FontFamily() { Name ="Verdana" },
    };
    public class TextWrapping
    {
        public string Name { get; set; }
    }
    private List<TextWrapping> TextWrappingList = new List<TextWrapping>() {
        new TextWrapping() { Name ="NoWrap"},
        new TextWrapping() { Name ="Wrap" },
        new TextWrapping() { Name ="WrapWithOverflow"},
    };
    public class TextOverFlow
    {
        public string Name { get; set; }
    }
    private List<TextOverFlow> TextOverFlowList = new List<TextOverFlow>() {
        new TextOverFlow() { Name ="Ellipsis"},
        new TextOverFlow() { Name ="Wrap" },
        new TextOverFlow() { Name ="Clip"},
    };
    public void Dispose()
    {
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
    }
    @*End:Hidden*@
}
