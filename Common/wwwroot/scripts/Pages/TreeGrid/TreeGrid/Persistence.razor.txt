@page "/tree-grid/persistence"

@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject IJSRuntime JsInterop
@*Hidden:Lines*@
@inherits SampleBaseComponent;
@using BlazorDemos
@using ej2_blazor_wrapdata
@inject NavigationManager NavigationManager
<PageTitle>Blazor Tree Grid Persist State Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Persist State in Blazor Tree Grid Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
  <p>This example demonstrates the Persist State in Blazor Tree Grid Component. Explore <a target='_blank' href='https://www.syncfusion.com/blazor-components/blazor-tree-grid'>here </a>for more details.</p>
</SampleDescription>
<ActionDescription>
    <p>
        In this example, you can see how to save Tree Grid state, reset the current state and refresh Tree Grid with original state, load Tree Grid with already saved state.
        Following are the Tree Grid properties persisted in local storage.
        <ul>
            <li>Sorting </li>
            <li>Filtering </li>
            <li>Column (resizing, reorder, show/hide columns) </li>
            <li>Searching </li>
            <li>TreeColumnIndex </li>
        </ul>
    </p>
    <p>More information on the state management can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/treegrid/state-management/'>documentation</a> section.</p>
</ActionDescription>

<style>
    .bootstrap4 .e-savestate::before {
       content: '\e74d';
    }
    .bootstrap4 .e-setstate::before {
       content: '\e75d';
    }
    .bootstrap4 .e-reloadpage::before {
       content: '\e716';
    }
    .bootstrap5 .e-savestate::before,
    .bootstrap5-dark .e-savestate::before,
    .tailwind .e-savestate::before,
    .fluent .e-savestate::before,
    .fluent-dark .e-savestate::before,
    .tailwind-dark .e-savestate::before {
       content: '\e7c8';
    }
    .bootstrap5 .e-setstate::before,
    .bootstrap5-dark .e-setstate::before,
    .tailwind-dark .e-setstate::before,
    .tailwind .e-setstate::before,
    .fluent .e-setstate::before,
    .fluent-dark .e-setstate::before {
       content: '\e7a1';
    }
    .bootstrap5 .e-reloadpage::before,
    .bootstrap5-dark .e-reloadpage::before,
    .tailwind-dark .e-reloadpage::before,
    .tailwind .e-reloadpage::before,
    .fluent .e-reloadpage::before,
    .fluent-dark .e-reloadpage::before{
       content: '\e706';
    }
    .bootstrap .e-savestate::before,
    .bootstrap-dark .e-savestate::before {
       content: '\e701';
    }
    .bootstrap .e-setstate::before,
    .bootstrap-dark .e-setstate::before{
       content: '\ec32';
    }
    .bootstrap .e-reloadpage::before,
    .bootstrap-dark .e-reloadpage::before{
       content: '\e975';
    }
    .fabric .e-savestate::before,
    .fabric-dark .e-savestate::before,
    .highcontrast .e-savestate::before {
       content: '\e700';
    }
    .fabric .e-setstate::before {
       content: '\ebe4';
    }
    .fabric .e-reloadpage::before,
    .fabric-dark .e-reloadpage::before{
       content: '\e218';
    }
    .highcontrast .e-setstate::before,
    .fabric-dark .e-setstate::before {
       content: '\e603';
    }
    .highcontrast .e-reloadpage::before
    {
       content: '\e837';
    }
    .material .e-savestate::before,
    .material-dark .e-savestate::before {
       content: '\e735';
    }
    .material .e-setstate::before,
    .material-dark .e-setstate::before {
       content: '\ec0b';
    }
    .material .e-reloadpage::before,
    .material-dark .e-reloadpage::before {
       content: '\e99d';
    }
    .bootstrap5 .e-resetstate::before,
    .bootstrap5-dark .e-resetstate::before,
    .tailwind-dark .e-resetstate::before,
    .tailwind .e-resetstate::before,
    .fluent .e-resetstate::before,
    .fluent-dark .e-resetstate::before {
       content: '\e89b';
    }
    .material .e-resetstate::before,
    .material-dark .e-resetstate::before,
    .bootstrap .e-resetstate::before,
    .bootstrap-dark .e-resetstate::before,
    .bootstrap4 .e-resetstate::before {
       content: '\e953';
    }
    .fabric .e-resetstate::before,
    .fabric-dark .e-resetstate::before,
    .highcontrast .e-resetstate::before {
       content: '\e948';
    }
 </style>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfTreeGrid ID="TreeGridOne" @ref="TreeGrid" DataSource="@TreeData" Height="312" IdMapping="TaskId" ParentIdMapping="ParentId" ShowColumnChooser="true" TreeColumnIndex="1" EnablePersistence="true" AllowPaging="true" AllowFiltering="true" 
                AllowSorting="true" AllowReordering="true" AllowResizing="true" Toolbar="ToolbarItems">
                <TreeGridPageSettings PageSize="2"></TreeGridPageSettings>
                <TreeGridEvents TValue="WrapData" OnToolbarClick="ToolBarClick"></TreeGridEvents>
                 <TreeGridFilterSettings HierarchyMode="Syncfusion.Blazor.TreeGrid.FilterHierarchyMode.Both" Type="Syncfusion.Blazor.TreeGrid.FilterType.Excel"></TreeGridFilterSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="TaskId" HeaderText="Task ID" Width="95" IsPrimaryKey="true" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules() { Required=true})" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="TaskName" HeaderText="Task Name" ValidationRules="@(new Syncfusion.Blazor.Grids.ValidationRules() { Required=true})" Width="190"></TreeGridColumn>
                    <TreeGridColumn Field="StartDate" HeaderText="Start Date" Format="d" Type=Syncfusion.Blazor.Grids.ColumnType.Date Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" EditType=Syncfusion.Blazor.Grids.EditType.DatePickerEdit></TreeGridColumn>
                    <TreeGridColumn Field="Duration" HeaderText="Duration" Width="100" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                    <TreeGridColumn Field="Progress" HeaderText="Progress" Width="100"></TreeGridColumn>
                    <TreeGridColumn Field="Priority" HeaderText="Priority" Width="90" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right"></TreeGridColumn>
                </TreeGridColumns>
            </SfTreeGrid>
        </div>
    </div>
</div>

@code {
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    public SfTreeGrid<WrapData> TreeGrid;
#pragma warning disable BL0005 // Component parameter should not be set outside of its component.
    private List<Object> ToolbarItems = new List<Object>
        {
            "ColumnChooser",
            new ToolbarItem() { Text = "Save state", TooltipText = "Save state", PrefixIcon= "e-savestate" },
            new ToolbarItem() { Text = "Load state", TooltipText = "Load state", PrefixIcon= "e-setstate" },
            new ToolbarItem() { Text = "Reset state", TooltipText = "Reset state", PrefixIcon= "e-resetstate" },
        };
#pragma warning restore BL0005 // Component parameter should not be set outside of its component.
    private List<WrapData> TreeData { get; set; }
    public string SavedPersistence { get; set; } = "";
    public async Task ToolBarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Save state")
        {
            SavedPersistence = await this.TreeGrid.GetPersistDataAsync();
        }
         if (args.Item.Text == "Reset state")
        {
            await this.TreeGrid.ResetPersistDataAsync();
        }
        if (args.Item.Text == "Load state")
        {
            await this.TreeGrid.SetPersistDataAsync(SavedPersistence);
        }
    }
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        this.TreeData = WrapData.GetWrapData().ToList();
    }
}
