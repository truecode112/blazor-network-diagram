@page "/datagrid/observable-binding"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using BlazorDemos
@using blazor_griddata
@inherits SampleBaseComponent;
@*Hidden:Lines*@
@inject NavigationManager NavigationManager
<PageTitle>Blazor DataGrid Observable Collection Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Observable Collection in Blazor DataGrid Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
  <p>This sample demonstrates the usage of Observable data binding in DataGrid component.</p>  
</SampleDescription>
<ActionDescription>
   <p>Using Observable collection of objects can be added, removed or be updated with an automatic notification of actions. The UI is automatically updated, when an object is added to or removed from an observable collection. To refresh UI for single property update, the setter of the corresponding property must be configured as shown in the sample.</p>
   <p>More information about the Observable collection data binding feature can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/datagrid/data-binding/#observable-collection'>documentation</a> section.</p>
</ActionDescription>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <div style="padding-bottom: 10px;">
                <SfButton ID="add" @onclick="AddRecord">Add Data</SfButton>
                <SfButton ID="del" @onclick="DeleteRecord">Delete Data</SfButton>
                <SfButton ID="update" @onclick="UpdateRecord">Update Data</SfButton>
            </div>
            <SfGrid DataSource="@ObservableData" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field=@nameof(ObservableDatas.OrderID) HeaderText="Order ID" IsPrimaryKey="true" TextAlign="@TextAlign.Center" HeaderTextAlign="@TextAlign.Center" Width="140"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.Freight) HeaderText="Freight" EditType="EditType.NumericEdit" Format="C2" Width="140" TextAlign="@TextAlign.Right" HeaderTextAlign="@TextAlign.Right"></GridColumn>
                    <GridColumn Field=@nameof(ObservableDatas.OrderDate) HeaderText="Order Date" EditType="EditType.DatePickerEdit" Format="d" TextAlign="TextAlign.Right" Type="ColumnType.Date" Width="160"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code{

    public ObservableCollection<ObservableDatas> ObservableData { get; set; }

    List<ObservableDatas> Orders = new List<ObservableDatas>();

    private int uniqueid { get; set; }
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden
        ObservableData = GetAllRecords();
    }

    public static ObservableCollection<ObservableDatas> GetAllRecords()
    {
        ObservableCollection<ObservableDatas> customers = new ObservableCollection<ObservableDatas>();
        string[] CustomerName = { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" };
        double[] Freight = { 34.7, 26.7, 27.7, 29.7, 33.7 };
        int OrderID = 10000;
        int i = 0; int k = 0;
        for (int x = 0; x < 10; x++)
        {
            i = i >= CustomerName.Length ? 0 : i;
            k = k >= Freight.Length ? 0 : k;
            customers.Add(new ObservableDatas()
            {
                OrderID = OrderID + x,
                CustomerID = CustomerName[i],
                OrderDate = DateTime.Now.AddDays(-x),
                Freight = Freight[k],
            });
            i++; k++;
        }
        return customers;
    }

    public void AddRecord()
    {
        ObservableData.Add(new ObservableDatas() { OrderID = 10010 + ++uniqueid, CustomerID = "VINET", Freight = 30.35, OrderDate = new DateTime(1991, 05, 15) });
    }

    public void DeleteRecord()
    {
        if (ObservableData.Count() != 0)
        {
            ObservableData.Remove(ObservableData.First());
        }
    }

    public void UpdateRecord()
    {
        if (ObservableData.Count() != 0)
        {
            var name = ObservableData.First();
            name.CustomerID = "Record Updated";
        }
    }

    public class ObservableDatas : INotifyPropertyChanged
    {
        public int OrderID { get; set; }
        private string customerID { get; set; }
        public string CustomerID
        {
            get { return customerID; }
            set
            {
                this.customerID = value;
                NotifyPropertyChanged("CustomerID");
            }
        }
        public DateTime OrderDate { get; set; }
        public double Freight { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}