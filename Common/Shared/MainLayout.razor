@using Syncfusion.Blazor;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing;
@using Syncfusion.Blazor.Buttons;

@using BlazorDemos.Shared;


@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject SampleService SampleService;

@inherits LayoutComponentBase;
@implements IDisposable;

<CascadingValue Value="@this">
    <!--<SpinnerComponent @ref="spinnerRef"></SpinnerComponent>-->
    @*Set empty layout to home page and components which have open in new window functionality.*@
    @{
        var isEmptyLayout = SampleService.SampleInfo != null && !UriHelper.Uri.Contains(SampleService.SampleInfo.Url) && SampleService.SampleInfo.MappingSampleName != null;
    }
    @if (SampleUtils.IsHomePage(UriHelper) || isEmptyLayout)
    {
        foreach (var fileName in SampleBrowser.PreLoadFiles)
        {
            <link rel="preload" href="@fileName" as="font" type="font/woff2" crossorigin />
        }
        <CascadingValue Value="isDeviceMode" Name="IsDevice">
            <div>
                @Body
            </div>
        </CascadingValue>
    }
    else
    {
        <div class="sample-browser e-view sf-new" @onclick="OnAppClick">
            <div class="sb-mobile-overlay sb-hide"></div>
            <HeaderComponent @ref="headerRef" OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick" HomeIconClick="@HomeIconClick" OnSearchRender="@OnSearchRender"></HeaderComponent>
            <div class="sb-content e-view">
                <div class="@searchContainer">
                    <div class="index-search-container">
                        <SearchComponent @ref="@searchRef"></SearchComponent>
                    </div>
                </div>
                <LeftPaneComponent @ref="LeftPaneRef"></LeftPaneComponent>
                    @{ #if RELEASE && NET6_0}
                    <RightPaneComponent @ref="RightPaneRef">
                        <ErrorBoundary @ref="errorBoundaryRef">
                            <ChildContent>
                                @Body
                            </ChildContent>
                            <ErrorContent>
                                <div class="e-error-ui">
                                    <div class="e-error-content">
                                        <div class="e-error-ui-text">Try that again</div>
                                        <div class="e-error-text-ui">Page could not be loaded. Please try again later.</div>
                                        <div class="e-page-refresh">
                                            <SfButton CssClass="e-primary" OnClick="OnRefresh">Refresh the page</SfButton>
                                        </div>
                                    </div>
                                </div>
                            </ErrorContent>
                        </ErrorBoundary>
                    </RightPaneComponent>
                    @{ #else}
                    <RightPaneComponent @ref="RightPaneRef">@Body</RightPaneComponent>
                    @{ #endif}
                @if (SampleService.IsDevice)
                {
                    <SideBarComponent IsExpanded="@rightSidebarExpanded" Position="SidebarPlacement.Right">
                        <Preferences IsMobile="true"></Preferences>
                    </SideBarComponent>
                    <SampleNavigator @ref="SampleNavigatorRef"></SampleNavigator>
                }
            </div>
        </div>
    }
</CascadingValue>
<Syncfusion.Blazor.Popups.SfDialogProvider/>

@code {
    [Inject]
    protected SyncfusionBlazorService SyncfusionService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private bool isDeviceMode { get; set; }
    private bool isSearchIconClick { get; set; }
    private string searchContainer { get; set; }
    private bool rightSidebarExpanded { get; set; }
    public SpinnerComponent spinnerRef { get; set; }
    private DotNetObjectReference<object> dotnetObjectRef { get; set; }
    private SearchComponent searchRef { get; set; }
    public HeaderComponent headerRef { get; set; }
    #if RELEASE && NET6_0
    private ErrorBoundary errorBoundaryRef { get; set; }
    #endif

     /// <summary>
     /// Specifies the app is rendering in tablet or not.
    /// </summary> 
    public bool isTablet { get; set; }

    /// <summary>
    /// LeftPane reference for outside usage.
    /// </summary>
    public LeftPaneComponent LeftPaneRef { get; set; }
    /// <summary>
    /// RightPane reference for outside usage.
    /// </summary>
    public RightPaneComponent RightPaneRef { get; set; }

    /// <summary>
    /// SampleNavigator reference for outside usage.
    /// </summary>
    public SampleNavigator SampleNavigatorRef { get; set; }

    #if RELEASE && NET6_0
    // Recover from the error state and handle the exception.
    protected override void OnParametersSet()
    {
        errorBoundaryRef?.Recover();
    }

    // Refresh the current page.
    private void OnRefresh()
    {
        UriHelper.NavigateTo(UriHelper.Uri, true);
    }
   #endif

    // Left sidebar click handler
    private async Task OnToggleClick()
    {
        // Update left sidebar expand and collapse status
        this.LeftPaneRef.UpdateExpandedState();
        // Collapse right sidebar if it is expanded
        if (SampleService.IsDevice && rightSidebarExpanded)
        {
            rightSidebarExpanded = !rightSidebarExpanded;
        }
        await JsRuntime.InvokeAsync<string>("callResizeEvent");
    }

    // Right sidebar click handler
    private async Task OnRightToggleClick()
    {
        // Update right sidebar expand and collapse status
        rightSidebarExpanded = !rightSidebarExpanded;
        // Collapse left sidebar if it is expanded
        if (LeftPaneRef.IsExpanded())
        {
            LeftPaneRef.UpdateExpandedState();
        }
        await ShowSearchLayout();
    }

    // Home icon click handler.
     private async Task HomeIconClick(){
        await LeftPaneRef.HomeButtonClick();
    }

    // Search icon click handler.
    private async Task OnSearchRender()
    {
        await ShowSearchLayout(true);
    }

    // App click handler for collapse the sidebar components in device rendering.
    private async Task OnAppClick()
    {
        this.CollapseSideBar();
        if (!headerRef.dropdownRef.isthemepopupopen)
        {
            headerRef.dropdownRef.popupClass = SampleUtils.AddClass(headerRef.dropdownRef.popupClass, SampleUtils.DISPLAY_NONE);
        }
        headerRef.dropdownRef.isthemepopupopen = false;
        headerRef.HidePreferences();
        if (searchRef.IsFocusOut() && !isSearchIconClick)
        {
            // Await the search layout hide process for the search list selection.
            await Task.Delay(200);
            await ShowSearchLayout();
        }
        else
        {
            isSearchIconClick = false;
        }
    }

    // Location change event handler
    private async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        // Get dynamic resource list.
        var resources = SampleUtils.GetDynamicResources(UriHelper, SampleService);
        var jsResources = SampleUtils.GetDynamicJSResources(UriHelper, SampleService);

        if (resources.Count > 0)
        {
            await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", resources);
        }
        if (jsResources.Count > 0)
        {
            await this.JsRuntime.InvokeVoidAsync("sfBlazorSB.loadResources", jsResources);
        }
    }

    /// <summary>
    /// Show search layout in the demos page.
    /// </summary>
    public async Task ShowSearchLayout(bool isIconClick = false, bool isEscPressed = false)
    {
        if (isIconClick && searchContainer.Contains(SampleUtils.DISPLAY_NONE))
        {
            isSearchIconClick = isIconClick;
            searchContainer = SampleUtils.RemoveClass(searchContainer, SampleUtils.DISPLAY_NONE);
            await searchRef.InputFocus();
        }
        else
        {
            searchContainer = SampleUtils.AddClass(searchContainer, SampleUtils.DISPLAY_NONE);
        }
        if (isEscPressed)
        {
            StateHasChanged();
        }
    }

    /// <summary>
    /// Collapse both right and left sidebar component.
    /// </summary>
    public void CollapseSideBar()
    {
        if (SampleService.IsDevice)
        {
            // Collapse left sidebar if it is expanded on document click
            if (LeftPaneRef.IsExpanded())
            {
                LeftPaneRef.UpdateExpandedState();
            }
            // Collapse right sidebar if it is expanded on document click
            if (rightSidebarExpanded)
            {
                rightSidebarExpanded = !rightSidebarExpanded;
            }
        }
    }

    /// <summary>
    /// Update device mode while resizing window through UI.
    /// </summary>
    /// <param name="isDevice">Specifies the current resolution is device mode or not.</param>
    [JSInvokable]
    public void UpdateDeviceMode(bool isDevice, bool isTablet)
    {
        isDeviceMode = isDevice;
        SampleService.IsDevice = isDevice;
        if(isTablet){
            RightPaneRef?.SampleNavigatorRef.Rerender(SampleService.IsDevice,isTablet);
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Condition to check whether the URL query params contains the proper theme name. If the URL query params donesn't contains the theme name, the URL redirects to existing component URL without query params.
        // Due to this redirection, we can prevent our site from multiple vulnerability attacks from hackers.
        string themeName = System.Web.HttpUtility.ParseQueryString(new Uri(this.navigationManager.Uri).Query).Get("theme");
        if (!string.IsNullOrEmpty(themeName) && !SampleUtils.ThemeData.Any((theme => theme.ID == themeName)))
        {
            this.navigationManager.NavigateTo(this.navigationManager.Uri.Split("?")[0], forceLoad: true);
        }
        UriHelper.LocationChanged += LocationChanged;
        // Enable ripple effect to the material theme.
        SyncfusionService.EnableRipple(UriHelper.Uri.IndexOf("material") > 0);
        searchContainer = SampleUtils.SEARCH_OVERLAY + SampleUtils.SPACE + SampleUtils.DISPLAY_NONE;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Add Spinner ref to the sample servie to get access in SampleBaseComponent class.
            if (SampleService.Spinner == null)
            {
                SampleService.Spinner = spinnerRef;
            }

            dotnetObjectRef = DotNetObjectReference.Create<object>(this);
            // Get device information for mobile sidebar rendering
            this.SampleService.IsDevice = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isDevice", dotnetObjectRef);
            this.isTablet = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isTablet");
            this.isDeviceMode = this.SampleService.IsDevice;
            if (this.SampleService.IsDevice)
            {
                LeftPaneRef?.UpdateExpandedState();
                StateHasChanged();
            }
            // Update home page or demo page loaded property in SampleService.
            SampleUtils.GetDynamicResources(UriHelper, SampleService);
        }
        else
        {
            // Refresh meta data for home page navigation.
            if (UriHelper.BaseUri == UriHelper.Uri)
            {
                SampleService.MetaData?.Refresh();
            }
        }
        if (!this.SampleService.IsDevice || this.isTablet)
        {
            // Render sample navigator in the right pane for desktop.
            RightPaneRef?.SampleNavigatorRef.Rerender(SampleService.IsDevice,this.isTablet);
        }
    }

    public void Dispose()
    {
        dotnetObjectRef?.Dispose();
        UriHelper.LocationChanged -= LocationChanged;
    }
}

